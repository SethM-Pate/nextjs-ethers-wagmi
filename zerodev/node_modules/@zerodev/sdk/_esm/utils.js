import { encodeFunctionData, erc20Abi, hexToSignature, isHex, signatureToHex, zeroAddress } from "viem";
import { KERNEL_ADDRESSES } from "./accounts/index.js";
import { KernelImplToVersionMap, LATEST_KERNEL_VERSION } from "./constants.js";
export const getKernelVersion = (kernelImpl) => {
    if (!kernelImpl || kernelImpl === zeroAddress)
        return LATEST_KERNEL_VERSION;
    for (const [addr, ver] of Object.entries(KernelImplToVersionMap)) {
        if (addr.toLowerCase() === kernelImpl.toLowerCase())
            return ver;
    }
    return "0.2.1";
};
export const getERC20PaymasterApproveCall = async (client, { gasToken, approveAmount }) => {
    const response = await client.request({
        method: "zd_pm_accounts",
        params: [
            {
                chainId: client.chain?.id,
                entryPointAddress: KERNEL_ADDRESSES.ENTRYPOINT_V0_6
            }
        ]
    });
    return {
        to: gasToken,
        data: encodeFunctionData({
            abi: erc20Abi,
            functionName: "approve",
            args: [response[0], approveAmount]
        }),
        value: 0n
    };
};
export const fixSignedData = (sig) => {
    let signature = sig;
    if (!isHex(signature)) {
        signature = `0x${signature}`;
        if (!isHex(signature)) {
            throw new Error(`Invalid signed data ${sig}`);
        }
    }
    let { r, s, v } = hexToSignature(signature);
    if (v === 0n || v === 1n)
        v += 27n;
    const joined = signatureToHex({ r, s, v });
    return joined;
};
//# sourceMappingURL=utils.js.map