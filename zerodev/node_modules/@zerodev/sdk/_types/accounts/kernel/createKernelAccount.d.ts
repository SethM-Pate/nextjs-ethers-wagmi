import { type SmartAccount } from "permissionless/accounts";
import { type Address, type Chain, type Client, type Hex, type Transport } from "viem";
import type { KernelEncodeCallDataArgs, KernelPluginManager, KernelPluginManagerParams } from "../../types/kernel.js";
export type KernelSmartAccount<transport extends Transport = Transport, chain extends Chain | undefined = Chain | undefined> = SmartAccount<"kernelSmartAccount", transport, chain> & {
    kernelPluginManager: KernelPluginManager;
    generateInitCode: () => Promise<Hex>;
    encodeCallData: (args: KernelEncodeCallDataArgs) => Promise<Hex>;
};
export declare const EIP1271ABI: readonly [{
    readonly type: "function";
    readonly name: "eip712Domain";
    readonly inputs: readonly [];
    readonly outputs: readonly [{
        readonly name: "fields";
        readonly type: "bytes1";
        readonly internalType: "bytes1";
    }, {
        readonly name: "name";
        readonly type: "string";
        readonly internalType: "string";
    }, {
        readonly name: "version";
        readonly type: "string";
        readonly internalType: "string";
    }, {
        readonly name: "chainId";
        readonly type: "uint256";
        readonly internalType: "uint256";
    }, {
        readonly name: "verifyingContract";
        readonly type: "address";
        readonly internalType: "address";
    }, {
        readonly name: "salt";
        readonly type: "bytes32";
        readonly internalType: "bytes32";
    }, {
        readonly name: "extensions";
        readonly type: "uint256[]";
        readonly internalType: "uint256[]";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly name: "isValidSignature";
    readonly inputs: readonly [{
        readonly name: "data";
        readonly type: "bytes32";
        readonly internalType: "bytes32";
    }, {
        readonly name: "signature";
        readonly type: "bytes";
        readonly internalType: "bytes";
    }];
    readonly outputs: readonly [{
        readonly name: "magicValue";
        readonly type: "bytes4";
        readonly internalType: "bytes4";
    }];
    readonly stateMutability: "view";
}];
/**
 * Default addresses for kernel smart account
 */
export declare const KERNEL_ADDRESSES: {
    ACCOUNT_LOGIC: Address;
    FACTORY_ADDRESS: Address;
    ENTRYPOINT_V0_6: Address;
};
/**
 * Build a kernel smart account from a private key, that use the ECDSA signer behind the scene
 * @param client
 * @param privateKey
 * @param entryPoint
 * @param index
 * @param factoryAddress
 * @param accountLogicAddress
 * @param ecdsaValidatorAddress
 * @param deployedAccountAddress
 */
export declare function createKernelAccount<TTransport extends Transport = Transport, TChain extends Chain | undefined = Chain | undefined>(client: Client<TTransport, TChain, undefined>, { plugins, entryPoint, index, factoryAddress, accountLogicAddress, deployedAccountAddress }: {
    plugins: KernelPluginManagerParams | KernelPluginManager;
    entryPoint?: Address;
    index?: bigint;
    factoryAddress?: Address;
    accountLogicAddress?: Address;
    deployedAccountAddress?: Address;
}): Promise<KernelSmartAccount<TTransport, TChain>>;
//# sourceMappingURL=createKernelAccount.d.ts.map