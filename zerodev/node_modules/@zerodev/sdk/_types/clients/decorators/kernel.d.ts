import { type SmartAccountActions } from "permissionless";
import type { SmartAccount } from "permissionless/accounts/types";
import type { SponsorUserOperationMiddleware } from "permissionless/actions/smartAccount";
import type { Chain, Client, Transport } from "viem";
import type { SignUserOperationReturnType } from "../../actions/index.js";
import { signUserOperation } from "../../actions/index.js";
import { type SponsorUserOperationParameters, type SponsorUserOperationReturnType } from "../../actions/paymaster/sponsorUserOperation.js";
export type ZeroDevPaymasterClientActions = {
    /**
     * Returns paymasterAndData & updated gas parameters required to sponsor a userOperation.
     */
    sponsorUserOperation: (args: SponsorUserOperationParameters) => Promise<SponsorUserOperationReturnType>;
};
export declare const zerodevPaymasterActions: (client: Client) => ZeroDevPaymasterClientActions;
export type KernelAccountClientActions<TChain extends Chain | undefined = Chain | undefined, TSmartAccount extends SmartAccount | undefined = SmartAccount | undefined> = SmartAccountActions<TChain, TSmartAccount> & {
    /**
     * Signs a user operation with the given transport, chain, and smart account.
     *
     * @param args - Parameters for the signUserOperation function
     * @returns A promise that resolves to the result of the signUserOperation function
     */
    signUserOperation: <TTransport extends Transport>(args: Parameters<typeof signUserOperation<TTransport, TChain, TSmartAccount>>[1]) => Promise<SignUserOperationReturnType>;
};
export declare const kernelAccountClientActions: ({ sponsorUserOperation }: SponsorUserOperationMiddleware) => <TTransport extends Transport, TChain extends Chain | undefined = Chain | undefined, TSmartAccount extends SmartAccount | undefined = SmartAccount | undefined>(client: Client<TTransport, TChain, TSmartAccount>) => KernelAccountClientActions<TChain, TSmartAccount>;
//# sourceMappingURL=kernel.d.ts.map