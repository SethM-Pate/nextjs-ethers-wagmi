import { WebauthnStamper } from '@turnkey/webauthn-stamper';
import { IframeStamper } from '@turnkey/iframe-stamper';
import { getWebAuthnAttestation } from '@turnkey/http';
import { VERSION } from './__generated__/version.mjs';
import WindowWrapper from './__polyfills__/window.mjs';
import { TurnkeyRequestError } from './__types__/base.mjs';
import { TurnkeySDKClientBase } from './__generated__/sdk-client-base.mjs';
import { getStorageValue, StorageKeys, removeStorageValue, setStorageValue } from './storage.mjs';
import { generateRandomBuffer, base64UrlEncode } from './utils.mjs';

class TurnkeyBrowserSDK {
    constructor(config) {
        this.currentUserSession = async () => {
            const currentUser = await this.getCurrentUser();
            if (!currentUser?.readOnlySession) {
                return;
            }
            if (currentUser?.readOnlySession?.sessionExpiry > Date.now()) {
                return new TurnkeyBrowserClient({
                    readOnlySession: currentUser?.readOnlySession?.session,
                    apiBaseUrl: this.config.apiBaseUrl,
                    organizationId: currentUser?.organization?.organizationId ??
                        this.config.defaultOrganizationId,
                });
            }
            else {
                this.logoutUser();
            }
            return;
        };
        this.passkeyClient = (rpId) => {
            const targetRpId = rpId ?? this.config.rpId ?? WindowWrapper.location.hostname;
            if (!targetRpId) {
                throw new Error("Tried to initialize a passkey client with no rpId defined");
            }
            const webauthnStamper = new WebauthnStamper({
                rpId: targetRpId,
            });
            return new TurnkeyPasskeyClient({
                stamper: webauthnStamper,
                apiBaseUrl: this.config.apiBaseUrl,
                organizationId: this.config.defaultOrganizationId,
            });
        };
        this.iframeClient = async (params) => {
            if (!params.iframeUrl) {
                throw new Error("Tried to initialize iframeClient with no iframeUrl defined");
            }
            const TurnkeyIframeElementId = params.iframeElementId ?? "turnkey-default-iframe-element-id";
            const iframeStamper = new IframeStamper({
                iframeContainer: params.iframeContainer,
                iframeUrl: params.iframeUrl,
                iframeElementId: TurnkeyIframeElementId,
            });
            await iframeStamper.init();
            return new TurnkeyIframeClient({
                stamper: iframeStamper,
                apiBaseUrl: this.config.apiBaseUrl,
                organizationId: this.config.defaultOrganizationId,
            });
        };
        this.serverSign = async (methodName, params, serverSignUrl) => {
            const targetServerSignUrl = serverSignUrl ?? this.config.serverSignUrl;
            if (!targetServerSignUrl) {
                throw new Error("Tried to call serverSign with no serverSignUrl defined");
            }
            const stringifiedBody = JSON.stringify({
                methodName: methodName,
                params: params,
            });
            const response = await fetch(targetServerSignUrl, {
                method: "POST",
                headers: {
                    "Content-Type": "application/json",
                    "X-Client-Version": VERSION,
                },
                body: stringifiedBody,
                redirect: "follow",
            });
            if (!response.ok) {
                let res;
                try {
                    res = await response.json();
                }
                catch (_) {
                    throw new Error(`${response.status} ${response.statusText}`);
                }
                throw new TurnkeyRequestError(res);
            }
            const data = await response.json();
            return data;
        };
        // Local
        this.getCurrentSubOrganization = async () => {
            const currentUser = await this.getCurrentUser();
            return currentUser?.organization;
        };
        this.getCurrentUser = async () => {
            return await getStorageValue(StorageKeys.CurrentUser);
        };
        this.logoutUser = async () => {
            await removeStorageValue(StorageKeys.CurrentUser);
            return true;
        };
        this.config = config;
    }
}
class TurnkeyBrowserClient extends TurnkeySDKClientBase {
    constructor(config) {
        super(config);
        this.login = async () => {
            const readOnlySessionResult = await this.createReadOnlySession({});
            const org = {
                organizationId: readOnlySessionResult.organizationId,
                organizationName: readOnlySessionResult.organizationName,
            };
            const currentUser = {
                userId: readOnlySessionResult.userId,
                username: readOnlySessionResult.username,
                organization: org,
                readOnlySession: {
                    session: readOnlySessionResult.session,
                    sessionExpiry: Number(readOnlySessionResult.sessionExpiry),
                },
            };
            await setStorageValue(StorageKeys.CurrentUser, currentUser);
            return readOnlySessionResult;
        };
    }
}
class TurnkeyPasskeyClient extends TurnkeyBrowserClient {
    constructor(config) {
        super(config);
        this.createUserPasskey = async (config = {}) => {
            const challenge = generateRandomBuffer();
            const encodedChallenge = base64UrlEncode(challenge);
            const authenticatorUserId = generateRandomBuffer();
            // WebAuthn credential options options can be found here:
            // https://www.w3.org/TR/webauthn-2/#sctn-sample-registration
            //
            // All pubkey algorithms can be found here: https://www.iana.org/assignments/cose/cose.xhtml#algorithms
            // Turnkey only supports ES256 (-7) and RS256 (-257)
            //
            // The pubkey type only supports one value, "public-key"
            // See https://www.w3.org/TR/webauthn-2/#enumdef-publickeycredentialtype for more details
            const webauthnConfig = {
                publicKey: {
                    rp: {
                        id: config.publicKey?.rp?.id ?? this.rpId,
                        name: config.publicKey?.rp?.name ?? "",
                    },
                    challenge: config.publicKey?.challenge ?? challenge,
                    pubKeyCredParams: config.publicKey?.pubKeyCredParams ?? [
                        {
                            type: "public-key",
                            alg: -7,
                        },
                    ],
                    user: {
                        id: config.publicKey?.user?.id ?? authenticatorUserId,
                        name: config.publicKey?.user?.name ?? "Default User",
                        displayName: config.publicKey?.user?.displayName ?? "Default User",
                    },
                    authenticatorSelection: {
                        requireResidentKey: config.publicKey?.authenticatorSelection?.requireResidentKey ??
                            true,
                        residentKey: config.publicKey?.authenticatorSelection?.residentKey ?? "required",
                        userVerification: config.publicKey?.authenticatorSelection?.userVerification ??
                            "preferred",
                    },
                },
            };
            const attestation = await getWebAuthnAttestation(webauthnConfig);
            return {
                encodedChallenge: config.publicKey?.challenge
                    ? base64UrlEncode(config.publicKey?.challenge)
                    : encodedChallenge,
                attestation: attestation,
            };
        };
        this.rpId = config.stamper.rpId;
    }
}
class TurnkeyIframeClient extends TurnkeyBrowserClient {
    constructor(config) {
        super(config);
        this.injectCredentialBundle = async (credentialBundle) => {
            const stamper = this.config.stamper;
            return await stamper.injectCredentialBundle(credentialBundle);
        };
        this.injectWalletExportBundle = async (credentialBundle, organizationId) => {
            const stamper = this.config.stamper;
            return await stamper.injectWalletExportBundle(credentialBundle, organizationId);
        };
        this.injectKeyExportBundle = async (credentialBundle, organizationId) => {
            const stamper = this.config.stamper;
            return await stamper.injectKeyExportBundle(credentialBundle, organizationId);
        };
        this.injectImportBundle = async (bundle, organizationId, userId) => {
            const stamper = this.config.stamper;
            return await stamper.injectImportBundle(bundle, organizationId, userId);
        };
        this.extractWalletEncryptedBundle = async () => {
            const stamper = this.config.stamper;
            return await stamper.extractWalletEncryptedBundle();
        };
        this.iframePublicKey = config.stamper.iframePublicKey;
    }
}

export { TurnkeyBrowserClient, TurnkeyBrowserSDK, TurnkeyIframeClient, TurnkeyPasskeyClient };
//# sourceMappingURL=sdk-client.mjs.map
