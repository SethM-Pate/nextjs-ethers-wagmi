import type { TurnkeySDKClientConfig, TurnkeySDKBrowserConfig, IframeClientParams } from "./__types__/base";
import { TurnkeySDKClientBase } from "./__generated__/sdk-client-base";
import type * as SdkApiTypes from "./__generated__/sdk_api_types";
import type { User, SubOrganization } from "./models";
export declare class TurnkeyBrowserSDK {
    config: TurnkeySDKBrowserConfig;
    constructor(config: TurnkeySDKBrowserConfig);
    currentUserSession: () => Promise<TurnkeyBrowserClient | undefined>;
    passkeyClient: (rpId?: string) => TurnkeyPasskeyClient;
    iframeClient: (params: IframeClientParams) => Promise<TurnkeyIframeClient>;
    serverSign: <TResponseType>(methodName: string, params: any[], serverSignUrl?: string) => Promise<TResponseType>;
    getCurrentSubOrganization: () => Promise<SubOrganization | undefined>;
    getCurrentUser: () => Promise<User | undefined>;
    logoutUser: () => Promise<boolean>;
}
export declare class TurnkeyBrowserClient extends TurnkeySDKClientBase {
    constructor(config: TurnkeySDKClientConfig);
    login: () => Promise<SdkApiTypes.TGetWhoamiResponse>;
}
export declare class TurnkeyPasskeyClient extends TurnkeyBrowserClient {
    rpId: string;
    constructor(config: TurnkeySDKClientConfig);
    createUserPasskey: (config?: Record<any, any>) => Promise<{
        encodedChallenge: string;
        attestation: {
            credentialId: string;
            clientDataJson: string;
            attestationObject: string;
            transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
        };
    }>;
}
export declare class TurnkeyIframeClient extends TurnkeyBrowserClient {
    iframePublicKey: string | null;
    constructor(config: TurnkeySDKClientConfig);
    injectCredentialBundle: (credentialBundle: string) => Promise<boolean>;
    injectWalletExportBundle: (credentialBundle: string, organizationId: string) => Promise<boolean>;
    injectKeyExportBundle: (credentialBundle: string, organizationId: string) => Promise<boolean>;
    injectImportBundle: (bundle: string, organizationId: string, userId: string) => Promise<boolean>;
    extractWalletEncryptedBundle: () => Promise<string>;
}
//# sourceMappingURL=sdk-client.d.ts.map