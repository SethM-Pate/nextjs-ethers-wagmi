import type { Address } from "abitype";
import { type Chain, type GetContractReturnType, type Hex, type HttpTransport, type PublicClient, type Transport } from "viem";
import { EntryPointAbi } from "../abis/EntryPointAbi.js";
import type { PublicErc4337Client, SupportedTransports } from "../client/types.js";
import type { BatchUserOperationCallData } from "../types.js";
import type { ISmartContractAccount, SignTypedDataParams } from "./types.js";
export declare enum DeploymentState {
    UNDEFINED = "0x0",
    NOT_DEPLOYED = "0x1",
    DEPLOYED = "0x2"
}
export interface BaseSmartAccountParams<TTransport extends SupportedTransports = Transport> {
    rpcClient: string | PublicErc4337Client<TTransport>;
    entryPointAddress: Address;
    chain: Chain;
    accountAddress?: Address;
}
export declare abstract class BaseSmartContractAccount<TTransport extends SupportedTransports = Transport> implements ISmartContractAccount {
    protected deploymentState: DeploymentState;
    protected accountAddress?: Address;
    protected entryPoint: GetContractReturnType<typeof EntryPointAbi, PublicClient, Chain>;
    protected entryPointAddress: Address;
    protected rpcProvider: PublicErc4337Client<TTransport | HttpTransport>;
    constructor(params: BaseSmartAccountParams<TTransport>);
    abstract getDummySignature(): `0x${string}`;
    abstract encodeExecute(target: string, value: bigint, data: string): Promise<`0x${string}`>;
    abstract signMessage(msg: string | Uint8Array): Promise<`0x${string}`>;
    protected abstract getAccountInitCode(): Promise<`0x${string}`>;
    signMessageWith6492(_msg: string | Uint8Array): Promise<`0x${string}`>;
    signTypedData(_params: SignTypedDataParams): Promise<`0x${string}`>;
    signTypedDataWith6492(_params: SignTypedDataParams): Promise<`0x${string}`>;
    encodeBatchExecute(_txs: BatchUserOperationCallData): Promise<`0x${string}`>;
    getNonce(): Promise<bigint>;
    getInitCode(): Promise<Hex>;
    getAddress(): Promise<Address>;
    isAccountDeployed(): Promise<boolean>;
    getDeploymentState(): Promise<DeploymentState>;
}
