import type { Address } from "abitype";
import { type FallbackTransport, type Hash, type Hex, type Transport } from "viem";
import type { BatchUserOperationCallData } from "../types.js";
import { BaseSmartContractAccount, type BaseSmartAccountParams } from "./base.js";
import type { SignTypedDataParams } from "./types.js";
export interface SimpleSmartAccountOwner {
    signMessage: (msg: Uint8Array) => Promise<Hash>;
    getAddress: () => Promise<Address>;
    signTypedData: (params: SignTypedDataParams) => Promise<Hash>;
}
export interface SimpleSmartAccountParams<TTransport extends Transport | FallbackTransport = Transport> extends BaseSmartAccountParams<TTransport> {
    owner: SimpleSmartAccountOwner;
    factoryAddress: Address;
    index?: bigint;
}
export declare class SimpleSmartContractAccount<TTransport extends Transport | FallbackTransport = Transport> extends BaseSmartContractAccount<TTransport> {
    protected owner: SimpleSmartAccountOwner;
    protected factoryAddress: Address;
    protected index: bigint;
    constructor(params: SimpleSmartAccountParams);
    getDummySignature(): `0x${string}`;
    encodeExecute(target: Hex, value: bigint, data: Hex): Promise<`0x${string}`>;
    encodeBatchExecute(_txs: BatchUserOperationCallData): Promise<`0x${string}`>;
    signMessage(msg: Uint8Array | string): Promise<`0x${string}`>;
    protected getAccountInitCode(): Promise<`0x${string}`>;
}
