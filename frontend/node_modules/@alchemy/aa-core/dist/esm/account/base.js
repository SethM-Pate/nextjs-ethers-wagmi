import { getContract, } from "viem";
import { EntryPointAbi } from "../abis/EntryPointAbi.js";
import { createPublicErc4337Client } from "../client/create-client.js";
import { Logger } from "../logger.js";
export var DeploymentState;
(function (DeploymentState) {
    DeploymentState["UNDEFINED"] = "0x0";
    DeploymentState["NOT_DEPLOYED"] = "0x1";
    DeploymentState["DEPLOYED"] = "0x2";
})(DeploymentState || (DeploymentState = {}));
export class BaseSmartContractAccount {
    constructor(params) {
        Object.defineProperty(this, "deploymentState", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: DeploymentState.UNDEFINED
        });
        Object.defineProperty(this, "accountAddress", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "entryPoint", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "entryPointAddress", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "rpcProvider", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.entryPointAddress = params.entryPointAddress;
        this.rpcProvider =
            typeof params.rpcClient === "string"
                ? createPublicErc4337Client({
                    chain: params.chain,
                    rpcUrl: params.rpcClient,
                })
                : params.rpcClient;
        this.accountAddress = params.accountAddress;
        this.entryPoint = getContract({
            address: params.entryPointAddress,
            abi: EntryPointAbi,
            publicClient: this.rpcProvider,
        });
    }
    async signMessageWith6492(_msg) {
        throw new Error("signMessageWith6492 not supported");
    }
    async signTypedData(_params) {
        throw new Error("signTypedData not supported");
    }
    async signTypedDataWith6492(_params) {
        throw new Error("signTypedDataWith6492 not supported");
    }
    async encodeBatchExecute(_txs) {
        throw new Error("encodeBatchExecute not supported");
    }
    async getNonce() {
        if (!(await this.isAccountDeployed())) {
            return 0n;
        }
        const address = await this.getAddress();
        return this.entryPoint.read.getNonce([address, BigInt(0)]);
    }
    async getInitCode() {
        if (this.deploymentState === DeploymentState.DEPLOYED) {
            return "0x";
        }
        const contractCode = await this.rpcProvider.getContractCode(await this.getAddress());
        if ((contractCode?.length ?? 0) > 2) {
            this.deploymentState = DeploymentState.DEPLOYED;
            return "0x";
        }
        else {
            this.deploymentState = DeploymentState.NOT_DEPLOYED;
        }
        return this.getAccountInitCode();
    }
    async getAddress() {
        if (!this.accountAddress) {
            const initCode = await this.getAccountInitCode();
            Logger.debug("[BaseSmartContractAccount](getAddress) initCode: ", initCode);
            try {
                await this.entryPoint.simulate.getSenderAddress([initCode]);
            }
            catch (err) {
                Logger.debug("[BaseSmartContractAccount](getAddress) entrypoint.getSenderAddress result: ", err);
                if (err.cause?.data?.errorName === "SenderAddressResult") {
                    this.accountAddress = err.cause.data.args[0];
                    return this.accountAddress;
                }
            }
            throw new Error("getCounterFactualAddress failed");
        }
        return this.accountAddress;
    }
    async isAccountDeployed() {
        return (await this.getDeploymentState()) === DeploymentState.DEPLOYED;
    }
    async getDeploymentState() {
        if (this.deploymentState === DeploymentState.UNDEFINED) {
            const initCode = await this.getInitCode();
            return initCode === "0x"
                ? DeploymentState.DEPLOYED
                : DeploymentState.NOT_DEPLOYED;
        }
        else {
            return this.deploymentState;
        }
    }
}
//# sourceMappingURL=base.js.map