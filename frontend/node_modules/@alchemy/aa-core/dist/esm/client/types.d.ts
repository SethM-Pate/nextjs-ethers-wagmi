import type { Address } from "abitype";
import type { Chain, FallbackTransport, Hash, Hex, HttpTransport, PublicClient, Transport } from "viem";
import type { EIP1193RequestFn, PublicRpcSchema } from "viem/dist/types/types/eip1193";
import type { BigNumberish, UserOperationEstimateGasResponse, UserOperationReceipt, UserOperationRequest, UserOperationResponse } from "../types.js";
export type SupportedTransports = Transport | FallbackTransport | HttpTransport;
export type Erc337RpcSchema = [
    {
        Method: "eth_sendUserOperation";
        Parameters: [UserOperationRequest, Address];
        ReturnType: Hash;
    },
    {
        Method: "eth_estimateUserOperationGas";
        Parameters: [UserOperationRequest, Address];
        ReturnType: UserOperationEstimateGasResponse;
    },
    {
        Method: "eth_getUserOperationReceipt";
        Parameters: [Hash];
        ReturnType: UserOperationReceipt;
    },
    {
        Method: "eth_getUserOperationByHash";
        Parameters: [Hash];
        ReturnType: UserOperationResponse;
    },
    {
        Method: "eth_supportedEntryPoints";
        Parameters: [];
        ReturnType: Address[];
    },
    {
        Method: "eth_maxPriorityFeePerGas";
        Parameters: [];
        ReturnType: BigNumberish;
    }
];
export interface Erc4337Actions {
    estimateUserOperationGas(request: UserOperationRequest, entryPoint: string): Promise<UserOperationEstimateGasResponse>;
    sendUserOperation(request: UserOperationRequest, entryPoint: string): Promise<Hex>;
    getUserOperationByHash(hash: Hash): Promise<UserOperationResponse>;
    getUserOperationReceipt(hash: Hash): Promise<UserOperationReceipt>;
    getSupportedEntryPoints(): Promise<Address[]>;
}
export interface PublicErc4337Client<T extends SupportedTransports = Transport> extends PublicClient<T, Chain>, Erc4337Actions {
    request: EIP1193RequestFn<[PublicRpcSchema[number], Erc337RpcSchema[number]]>;
    getMaxPriorityFeePerGas(): Promise<BigNumberish>;
    getFeeData(): Promise<{
        maxFeePerGas?: BigNumberish;
        maxPriorityFeePerGas?: BigNumberish;
    }>;
    getContractCode(address: string): Promise<Hex | `0x`>;
}
