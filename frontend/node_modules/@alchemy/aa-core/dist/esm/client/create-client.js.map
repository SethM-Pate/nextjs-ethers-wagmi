{"version":3,"file":"create-client.js","sourceRoot":"","sources":["../../../src/client/create-client.ts"],"names":[],"mappings":"AACA,OAAO,EACL,kBAAkB,EAClB,IAAI,GASL,MAAM,MAAM,CAAC;AAYd,OAAO,EAAE,OAAO,EAAE,MAAM,eAAe,CAAC;AAGxC,MAAM,CAAC,MAAM,6BAA6B,GAIZ,CAG5B,MAA8B,EACN,EAAE;IAC1B,MAAM,aAAa,GAAG,MAIrB,CAAC;IAEF,OAAO;QACL,GAAG,aAAa;QAChB,wBAAwB,CACtB,OAA6B,EAC7B,UAAkB;YAElB,OAAO,aAAa,CAAC,OAAO,CAAC;gBAC3B,MAAM,EAAE,8BAA8B;gBACtC,MAAM,EAAE,CAAC,OAAO,EAAE,UAAqB,CAAC;aACzC,CAAC,CAAC;QACL,CAAC;QAED,iBAAiB,CACf,OAA6B,EAC7B,UAAkB;YAElB,OAAO,aAAa,CAAC,OAAO,CAAC;gBAC3B,MAAM,EAAE,uBAAuB;gBAC/B,MAAM,EAAE,CAAC,OAAO,EAAE,UAAqB,CAAC;aACzC,CAAC,CAAC;QACL,CAAC;QAED,sBAAsB,CAAC,IAAU;YAC/B,OAAO,aAAa,CAAC,OAAO,CAAC;gBAC3B,MAAM,EAAE,4BAA4B;gBACpC,MAAM,EAAE,CAAC,IAAI,CAAC;aACf,CAAC,CAAC;QACL,CAAC;QAED,uBAAuB,CAAC,IAAU;YAChC,OAAO,aAAa,CAAC,OAAO,CAAC;gBAC3B,MAAM,EAAE,6BAA6B;gBACrC,MAAM,EAAE,CAAC,IAAI,CAAC;aACf,CAAC,CAAC;QACL,CAAC;QAED,uBAAuB;YACrB,OAAO,aAAa,CAAC,OAAO,CAAC;gBAC3B,MAAM,EAAE,0BAA0B;gBAClC,MAAM,EAAE,EAAE;aACX,CAAC,CAAC;QACL,CAAC;QAED,uBAAuB;YACrB,OAAO,aAAa,CAAC,OAAO,CAAC;gBAC3B,MAAM,EAAE,0BAA0B;gBAClC,MAAM,EAAE,EAAE;aACX,CAAC,CAAC;QACL,CAAC;QAED,KAAK,CAAC,UAAU;YAMd,MAAM,KAAK,GAAG,MAAM,aAAa,CAAC,QAAQ,CAAC;gBACzC,QAAQ,EAAE,QAAQ;aACnB,CAAC,CAAC;YAEH,IAAI,KAAK,IAAI,KAAK,CAAC,aAAa,EAAE;gBAChC,MAAM,oBAAoB,GAAG,MAAM,CAAC,UAAU,CAAC,CAAC;gBAChD,OAAO;oBACL,oBAAoB;oBACpB,YAAY,EAAE,KAAK,CAAC,aAAa,GAAG,MAAM,CAAC,CAAC,CAAC,GAAG,oBAAoB;iBACrE,CAAC;aACH;YAED,OAAO;gBACL,YAAY,EAAE,CAAC;gBACf,oBAAoB,EAAE,CAAC;aACxB,CAAC;QACJ,CAAC;QAED,KAAK,CAAC,eAAe,CAAC,OAAe;YACnC,MAAM,IAAI,GAAG,MAAM,aAAa,CAAC,WAAW,CAAC;gBAC3C,OAAO,EAAE,OAAkB;aAC5B,CAAC,CAAC;YACH,OAAO,IAAI,IAAI,IAAI,CAAC;QACtB,CAAC;KACwB,CAAC;AAC9B,CAAC,CAAC;AAEF,MAAM,CAAC,MAAM,yBAAyB,GAAG,CAAC,EACxC,KAAK,EACL,MAAM,EACN,YAAY,GAKb,EAAsC,EAAE;IACvC,MAAM,MAAM,GAAG,6BAA6B,CAC1C,kBAAkB,CAAC;QACjB,KAAK;QACL,SAAS,EAAE,IAAI,CAAC,MAAM,EAAE;YACtB,YAAY,EAAE;gBACZ,GAAG,YAAY;gBACf,OAAO,EAAE;oBACP,GAAG,YAAY,EAAE,OAAO;oBACxB,wBAAwB,EAAE,OAAO;iBAClC;aACF;SACF,CAAC;KACH,CAAC,CACH,CAAC;IAEF,OAAO,MAAM,CAAC;AAChB,CAAC,CAAC","sourcesContent":["import type { Address } from \"abitype\";\nimport {\n  createPublicClient,\n  http,\n  type Chain,\n  type FallbackTransport,\n  type Hash,\n  type Hex,\n  type HttpTransport,\n  type PublicClient,\n  type Transport,\n  type HttpTransportConfig,\n} from \"viem\";\nimport type {\n  EIP1193RequestFn,\n  PublicRpcSchema,\n} from \"viem/dist/types/types/eip1193\";\nimport type {\n  BigNumberish,\n  UserOperationEstimateGasResponse,\n  UserOperationReceipt,\n  UserOperationRequest,\n  UserOperationResponse,\n} from \"../types.js\";\nimport { VERSION } from \"../version.js\";\nimport type { Erc337RpcSchema, PublicErc4337Client } from \"./types.js\";\n\nexport const createPublicErc4337FromClient: <\n  T extends Transport | FallbackTransport = Transport\n>(\n  client: PublicClient<T, Chain>\n) => PublicErc4337Client<T> = <\n  T extends Transport | FallbackTransport = Transport\n>(\n  client: PublicClient<T, Chain>\n): PublicErc4337Client<T> => {\n  const clientAdapter = client as PublicClient<T, Chain> & {\n    request: EIP1193RequestFn<\n      [Erc337RpcSchema[number], PublicRpcSchema[number]]\n    >;\n  };\n\n  return {\n    ...clientAdapter,\n    estimateUserOperationGas(\n      request: UserOperationRequest,\n      entryPoint: string\n    ): Promise<UserOperationEstimateGasResponse> {\n      return clientAdapter.request({\n        method: \"eth_estimateUserOperationGas\",\n        params: [request, entryPoint as Address],\n      });\n    },\n\n    sendUserOperation(\n      request: UserOperationRequest,\n      entryPoint: string\n    ): Promise<Hex> {\n      return clientAdapter.request({\n        method: \"eth_sendUserOperation\",\n        params: [request, entryPoint as Address],\n      });\n    },\n\n    getUserOperationByHash(hash: Hash): Promise<UserOperationResponse> {\n      return clientAdapter.request({\n        method: \"eth_getUserOperationByHash\",\n        params: [hash],\n      });\n    },\n\n    getUserOperationReceipt(hash: Hash): Promise<UserOperationReceipt> {\n      return clientAdapter.request({\n        method: \"eth_getUserOperationReceipt\",\n        params: [hash],\n      });\n    },\n\n    getSupportedEntryPoints(): Promise<Address[]> {\n      return clientAdapter.request({\n        method: \"eth_supportedEntryPoints\",\n        params: [],\n      });\n    },\n\n    getMaxPriorityFeePerGas(): Promise<BigNumberish> {\n      return clientAdapter.request({\n        method: \"eth_maxPriorityFeePerGas\",\n        params: [],\n      });\n    },\n\n    async getFeeData(): Promise<{\n      maxFeePerGas?: BigNumberish;\n      maxPriorityFeePerGas?: BigNumberish;\n    }> {\n      // viem doesn't support getFeeData, so looking at ethers: https://github.com/ethers-io/ethers.js/blob/main/lib.esm/providers/abstract-provider.js#L472\n      // also keeping this implementation the same as ethers so that the middlewares work consistently\n      const block = await clientAdapter.getBlock({\n        blockTag: \"latest\",\n      });\n\n      if (block && block.baseFeePerGas) {\n        const maxPriorityFeePerGas = BigInt(1500000000);\n        return {\n          maxPriorityFeePerGas,\n          maxFeePerGas: block.baseFeePerGas * BigInt(2) + maxPriorityFeePerGas,\n        };\n      }\n\n      return {\n        maxFeePerGas: 0,\n        maxPriorityFeePerGas: 0,\n      };\n    },\n\n    async getContractCode(address: string): Promise<Hex | `0x`> {\n      const code = await clientAdapter.getBytecode({\n        address: address as Address,\n      });\n      return code ?? \"0x\";\n    },\n  } as PublicErc4337Client<T>;\n};\n\nexport const createPublicErc4337Client = ({\n  chain,\n  rpcUrl,\n  fetchOptions,\n}: {\n  chain: Chain;\n  rpcUrl: string;\n  fetchOptions?: HttpTransportConfig[\"fetchOptions\"];\n}): PublicErc4337Client<HttpTransport> => {\n  const client = createPublicErc4337FromClient(\n    createPublicClient({\n      chain,\n      transport: http(rpcUrl, {\n        fetchOptions: {\n          ...fetchOptions,\n          headers: {\n            ...fetchOptions?.headers,\n            \"Alchemy-AA-Sdk-Version\": VERSION,\n          },\n        },\n      }),\n    })\n  );\n\n  return client;\n};\n"]}