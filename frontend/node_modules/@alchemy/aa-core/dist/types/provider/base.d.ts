import { default as EventEmitter } from "eventemitter3";
import { type Address, type Chain, type Hash, type RpcTransactionRequest, type Transaction, type Transport } from "viem";
import { BaseSmartContractAccount } from "../account/base.js";
import type { SignTypedDataParams } from "../account/types.js";
import type { PublicErc4337Client, SupportedTransports } from "../client/types.js";
import { type BatchUserOperationCallData, type UserOperationCallData, type UserOperationOverrides, type UserOperationReceipt, type UserOperationResponse } from "../types.js";
import type { AccountMiddlewareFn, FeeDataMiddleware, GasEstimatorMiddleware, ISmartAccountProvider, PaymasterAndDataMiddleware, ProviderEvents, SendUserOperationResult } from "./types.js";
export declare const noOpMiddleware: AccountMiddlewareFn;
export interface SmartAccountProviderOpts {
    /**
     * The maximum number of times to try fetching a transaction receipt before giving up (default: 5)
     */
    txMaxRetries?: number;
    /**
     * The interval in milliseconds to wait between retries while waiting for tx receipts (default: 2_000n)
     */
    txRetryIntervalMs?: number;
    /**
     * The mulitplier on interval length to wait between retries while waiting for tx receipts (default: 1.5)
     */
    txRetryMulitplier?: number;
    /**
     * used when computing the fees for a user operation (default: 100_000_000n)
     */
    minPriorityFeePerBid?: bigint;
}
export type ConnectedSmartAccountProvider<TTransport extends SupportedTransports = Transport> = SmartAccountProvider<TTransport> & {
    account: BaseSmartContractAccount<TTransport>;
};
export declare class SmartAccountProvider<TTransport extends SupportedTransports = Transport> extends EventEmitter<ProviderEvents> implements ISmartAccountProvider<TTransport> {
    protected entryPointAddress: Address;
    protected chain: Chain;
    readonly account?: BaseSmartContractAccount<TTransport> | undefined;
    private txMaxRetries;
    private txRetryIntervalMs;
    private txRetryMulitplier;
    minPriorityFeePerBid: bigint;
    rpcClient: PublicErc4337Client<Transport>;
    constructor(rpcProvider: string | PublicErc4337Client<TTransport>, entryPointAddress: Address, chain: Chain, account?: BaseSmartContractAccount<TTransport> | undefined, opts?: SmartAccountProviderOpts);
    request: (args: {
        method: string;
        params?: any[];
    }) => Promise<any>;
    getAddress: () => Promise<`0x${string}`>;
    sendTransaction: (request: RpcTransactionRequest) => Promise<Hash>;
    signMessage: (msg: string | Uint8Array) => Promise<Hash>;
    signTypedData: (params: SignTypedDataParams) => Promise<Hash>;
    signMessageWith6492(msg: string | Uint8Array): Promise<`0x${string}`>;
    signTypedDataWith6492(params: SignTypedDataParams): Promise<`0x${string}`>;
    sendTransactions: (requests: RpcTransactionRequest[]) => Promise<`0x${string}`>;
    waitForUserOperationTransaction: (hash: Hash) => Promise<Hash>;
    getUserOperationByHash: (hash: Hash) => Promise<UserOperationResponse>;
    getUserOperationReceipt: (hash: Hash) => Promise<UserOperationReceipt>;
    getTransaction: (hash: Hash) => Promise<Transaction>;
    sendUserOperation: (data: UserOperationCallData | BatchUserOperationCallData, overrides?: UserOperationOverrides) => Promise<SendUserOperationResult>;
    readonly dummyPaymasterDataMiddleware: AccountMiddlewareFn;
    readonly paymasterDataMiddleware: AccountMiddlewareFn;
    readonly gasEstimator: AccountMiddlewareFn;
    readonly feeDataGetter: AccountMiddlewareFn;
    readonly customMiddleware?: AccountMiddlewareFn | undefined;
    withPaymasterMiddleware: (overrides: {
        dummyPaymasterDataMiddleware?: PaymasterAndDataMiddleware;
        paymasterDataMiddleware?: PaymasterAndDataMiddleware;
    }) => this;
    withGasEstimator: (override: GasEstimatorMiddleware) => this;
    withFeeDataGetter: (override: FeeDataMiddleware) => this;
    withCustomMiddleware: (override: AccountMiddlewareFn) => this;
    connect(fn: (provider: PublicErc4337Client<TTransport>) => BaseSmartContractAccount): this & {
        account: BaseSmartContractAccount;
    };
    disconnect(): this & {
        account: undefined;
    };
    isConnected(): this is ConnectedSmartAccountProvider<TTransport>;
    private overrideMiddlewareFunction;
}
//# sourceMappingURL=base.d.ts.map