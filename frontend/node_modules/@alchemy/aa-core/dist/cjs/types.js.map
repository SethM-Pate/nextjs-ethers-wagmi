{"version":3,"file":"types.js","sourceRoot":"","sources":["../../src/types.ts"],"names":[],"mappings":";;;AAuLA,SAAgB,cAAc,CAC5B,OAA4B;IAG5B,OAAO,CACL,CAAC,CAAC,OAAO,CAAC,YAAY;QACtB,CAAC,CAAC,OAAO,CAAC,YAAY;QACtB,OAAO,CAAC,oBAAoB,IAAI,IAAI;QACpC,CAAC,CAAC,OAAO,CAAC,kBAAkB;QAC5B,CAAC,CAAC,OAAO,CAAC,oBAAoB,CAC/B,CAAC;AACJ,CAAC;AAXD,wCAWC","sourcesContent":["import type { Address, Hash } from \"viem\";\n\nexport type Hex = `0x${string}`;\nexport type EmptyHex = `0x`;\n\n// based on @account-abstraction/common\nexport type PromiseOrValue<T> = T | Promise<T>;\nexport type BigNumberish = string | bigint | number;\nexport type BytesLike = Uint8Array | string;\n\nexport interface UserOperationCallData {\n  /* the target of the call */\n  target: Address;\n  /* the data passed to the target */\n  data: Hex;\n  /* the amount of native token to send to the target (default: 0) */\n  value?: bigint;\n}\n\nexport type BatchUserOperationCallData = UserOperationCallData[];\n\nexport type UserOperationOverrides = Pick<\n  UserOperationStruct,\n  \"maxFeePerGas\" | \"maxPriorityFeePerGas\"\n>;\n\n// represents the request as it needs to be formatted for RPC requests\nexport interface UserOperationRequest {\n  /* the origin of the request */\n  sender: Address;\n  /* nonce (as hex) of the transaction, returned from the entrypoint for this Address */\n  nonce: Hex;\n  /* the initCode for creating the sender if it does not exist yet, otherwise \"0x\" */\n  initCode: Hex | EmptyHex;\n  /* the callData passed to the target */\n  callData: Hex;\n  /* Gas value (as hex) used by inner account execution */\n  callGasLimit: Hex;\n  /* Actual gas (as hex) used by the validation of this UserOperation */\n  verificationGasLimit: Hex;\n  /* Gas overhead (as hex) of this UserOperation */\n  preVerificationGas: Hex;\n  /* Maximum fee per gas (similar to EIP-1559 max_fee_per_gas) (as hex)*/\n  maxFeePerGas: Hex;\n  /* Maximum priority fee per gas (similar to EIP-1559 max_priority_fee_per_gas) (as hex)*/\n  maxPriorityFeePerGas: Hex;\n  /* Address of paymaster sponsoring the transaction, followed by extra data to send to the paymaster (\"0x\" for self-sponsored transaction) */\n  paymasterAndData: Hex | EmptyHex;\n  /* Data passed into the account along with the nonce during the verification step */\n  signature: Hex;\n}\n\nexport interface UserOperationEstimateGasResponse {\n  /* Gas overhead of this UserOperation */\n  preVerificationGas: BigNumberish;\n  /* Actual gas used by the validation of this UserOperation */\n  verificationGasLimit: BigNumberish;\n  /* Value used by inner account execution */\n  callGasLimit: BigNumberish;\n}\n\nexport interface UserOperationResponse extends UserOperationRequest {\n  /* the address of the entry point contract that executed the user operation */\n  entryPoint: Address;\n  /* the block number the user operation was included in */\n  blockNumber: BigNumberish;\n  /* the hash of the block the user operation was included in */\n  blockHash: Hash;\n  /* the hash of the transaction that included the user operation */\n  transactionHash: Hash;\n}\n\nexport interface UserOperationReceipt {\n  /* The request hash of the UserOperation. */\n  userOpHash: Hash;\n  /* The entry point address used for the UserOperation. */\n  entryPoint: Address;\n  /* The account initiating the UserOperation. */\n  sender: Address;\n  /* The nonce used in the UserOperation. */\n  nonce: BigNumberish;\n  /* The paymaster used for this UserOperation (or empty). */\n  paymaster?: Address;\n  /* The actual amount paid (by account or paymaster) for this UserOperation. */\n  actualGasCost: BigNumberish;\n  /* The total gas used by this UserOperation (including preVerification, creation, validation, and execution). */\n  actualGasUsed: BigNumberish;\n  /* Indicates whether the execution completed without reverting. */\n  success: boolean;\n  /* In case of revert, this is the revert reason. */\n  reason?: string;\n  /* The logs generated by this UserOperation (not including logs of other UserOperations in the same bundle). */\n  logs: string[];\n  /* The TransactionReceipt object for the entire bundle, not only for this UserOperation. */\n  receipt: UserOperationReceiptObject;\n}\n\nexport interface UserOperationReceiptObject {\n  /* 32 Bytes - hash of the block where this log was in. null when its pending. null when its pending log */\n  blockHash: Hash;\n  /* The block number where this log was in. null when its pending. null when its pending log. */\n  blockNumber: BigNumberish;\n  /* The index of the transaction within the block. */\n  transactionIndex: BigNumberish;\n  /* 32 Bytes - hash of the transaction. null when its pending. */\n  transactionHash: Hash;\n  /* 20 Bytes - address of the sender */\n  from: Address;\n  /* 20 Bytes - address of the receiver. null when its a contract creation transaction */\n  to: Address;\n  /* The total amount of gas used when this transaction was executed in the block. */\n  cumulativeGasUsed: BigNumberish;\n  /* The amount of gas used by this specific transaction alone */\n  gasUsed: BigNumberish;\n  /* 20 Bytes - The contract address created, if the transaction was a contract creation, otherwise null */\n  contractAddress: Address;\n  logs: UserOperationReceiptLog[];\n  /* 256 Bytes - Bloom filter for light clients to quickly retrieve related logs */\n  logsBloom: Hex;\n  /* 32 bytes of post-transaction stateroot. (pre Byzantium hard fork at block 4,370,000) */\n  root: Hex;\n  /* Either 1 (success) or 0 (failure). (post Byzantium hard fork at block 4,370,000) */\n  status: number;\n  /* The cumulative gas used in the block containing this UserOperation. */\n  effectiveGasPrice: BigNumberish;\n  /* The type of the recipt object */\n  type: string;\n}\n\nexport interface UserOperationReceiptLog {\n  /* The hash of the block where the given transaction was included. */\n  blockHash: Hash;\n  /* The number of the block where the given transaction was included. */\n  blockNumber: BigNumberish;\n  /* The index of the transaction within the block. */\n  transactionIndex: BigNumberish;\n  /* 20 Bytes - address from which this log originated. */\n  address: Address;\n  /* Integer of the log index position in the block. null when its pending log. */\n  logIndex: BigNumberish;\n  /* Contains one or more 32 Bytes non-indexed arguments of the log. */\n  data: Hex;\n  /* true when the log was removed, due to a chain reorganization. false if its a valid log. */\n  removed: boolean;\n  /* Array of zero to four 32 Bytes DATA of indexed log arguments. */\n  topics: string[];\n  /* hash of the transaction */\n  transactionHash: Hash;\n}\n\n// based on @account-abstraction/common\n// this is used for building requests\nexport interface UserOperationStruct {\n  /* the origin of the request */\n  sender: PromiseOrValue<string>;\n  /* nonce of the transaction, returned from the entrypoint for this Address */\n  nonce: PromiseOrValue<BigNumberish>;\n  /* the initCode for creating the sender if it does not exist yet, otherwise \"0x\" */\n  initCode: PromiseOrValue<BytesLike | \"0x\">;\n  /* the callData passed to the target */\n  callData: PromiseOrValue<BytesLike>;\n  /* Value used by inner account execution */\n  callGasLimit?: PromiseOrValue<BigNumberish>;\n  /* Actual gas used by the validation of this UserOperation */\n  verificationGasLimit?: PromiseOrValue<BigNumberish>;\n  /* Gas overhead of this UserOperation */\n  preVerificationGas?: PromiseOrValue<BigNumberish>;\n  /* Maximum fee per gas (similar to EIP-1559 max_fee_per_gas) */\n  maxFeePerGas?: PromiseOrValue<BigNumberish>;\n  /* Maximum priority fee per gas (similar to EIP-1559 max_priority_fee_per_gas) */\n  maxPriorityFeePerGas?: PromiseOrValue<BigNumberish>;\n  /* Address of paymaster sponsoring the transaction, followed by extra data to send to the paymaster (\"0x\" for self-sponsored transaction) */\n  paymasterAndData: PromiseOrValue<BytesLike | \"0x\">;\n  /* Data passed into the account along with the nonce during the verification step */\n  signature: PromiseOrValue<BytesLike>;\n}\n\n/**\n * Utility method for asserting a {@link UserOperationStruct} is a {@link UserOperationRequest}\n *\n * @param request a {@link UserOperationStruct} to validate\n * @returns a type guard that asserts the {@link UserOperationStruct} is a {@link UserOperationRequest}\n */\nexport function isValidRequest(\n  request: UserOperationStruct\n): request is UserOperationRequest {\n  // These are the only ones marked as optional in the interface above\n  return (\n    !!request.callGasLimit &&\n    !!request.maxFeePerGas &&\n    request.maxPriorityFeePerGas != null &&\n    !!request.preVerificationGas &&\n    !!request.verificationGasLimit\n  );\n}\n"]}