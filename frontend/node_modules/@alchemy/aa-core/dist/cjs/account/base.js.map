{"version":3,"file":"base.js","sourceRoot":"","sources":["../../../src/account/base.ts"],"names":[],"mappings":"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","sourcesContent":["import type { Address } from \"abitype\";\nimport {\n  getContract,\n  type Chain,\n  type GetContractReturnType,\n  type Hex,\n  type HttpTransport,\n  type PublicClient,\n  type Transport,\n} from \"viem\";\nimport { EntryPointAbi } from \"../abis/EntryPointAbi.js\";\nimport { createPublicErc4337Client } from \"../client/create-client.js\";\nimport type {\n  PublicErc4337Client,\n  SupportedTransports,\n} from \"../client/types.js\";\nimport { Logger } from \"../logger.js\";\nimport type { BatchUserOperationCallData } from \"../types.js\";\nimport type { ISmartContractAccount, SignTypedDataParams } from \"./types.js\";\n\nexport enum DeploymentState {\n  UNDEFINED = \"0x0\",\n  NOT_DEPLOYED = \"0x1\",\n  DEPLOYED = \"0x2\",\n}\n\nexport interface BaseSmartAccountParams<\n  TTransport extends SupportedTransports = Transport\n> {\n  rpcClient: string | PublicErc4337Client<TTransport>;\n  entryPointAddress: Address;\n  chain: Chain;\n  accountAddress?: Address;\n}\n\nexport abstract class BaseSmartContractAccount<\n  TTransport extends SupportedTransports = Transport\n> implements ISmartContractAccount\n{\n  protected deploymentState: DeploymentState = DeploymentState.UNDEFINED;\n  protected accountAddress?: Address;\n  protected entryPoint: GetContractReturnType<\n    typeof EntryPointAbi,\n    PublicClient,\n    Chain\n  >;\n  protected entryPointAddress: Address;\n  protected rpcProvider: PublicErc4337Client<TTransport | HttpTransport>;\n\n  constructor(params: BaseSmartAccountParams<TTransport>) {\n    this.entryPointAddress = params.entryPointAddress;\n    this.rpcProvider =\n      typeof params.rpcClient === \"string\"\n        ? createPublicErc4337Client({\n            chain: params.chain,\n            rpcUrl: params.rpcClient,\n          })\n        : params.rpcClient;\n\n    this.accountAddress = params.accountAddress;\n\n    this.entryPoint = getContract({\n      address: params.entryPointAddress,\n      abi: EntryPointAbi,\n      // Need to cast this as PublicClient or else it breaks ABI typing.\n      // This is valid because our PublicClient is a subclass of PublicClient\n      publicClient: this.rpcProvider as PublicClient,\n    });\n  }\n\n  abstract getDummySignature(): `0x${string}`;\n  abstract encodeExecute(\n    target: string,\n    value: bigint,\n    data: string\n  ): Promise<`0x${string}`>;\n  abstract signMessage(msg: string | Uint8Array): Promise<`0x${string}`>;\n\n  protected abstract getAccountInitCode(): Promise<`0x${string}`>;\n\n  async signMessageWith6492(_msg: string | Uint8Array): Promise<`0x${string}`> {\n    throw new Error(\"signMessageWith6492 not supported\");\n  }\n\n  async signTypedData(_params: SignTypedDataParams): Promise<`0x${string}`> {\n    throw new Error(\"signTypedData not supported\");\n  }\n\n  async signTypedDataWith6492(\n    _params: SignTypedDataParams\n  ): Promise<`0x${string}`> {\n    throw new Error(\"signTypedDataWith6492 not supported\");\n  }\n\n  async encodeBatchExecute(\n    _txs: BatchUserOperationCallData\n  ): Promise<`0x${string}`> {\n    throw new Error(\"encodeBatchExecute not supported\");\n  }\n\n  async getNonce(): Promise<bigint> {\n    if (!(await this.isAccountDeployed())) {\n      return 0n;\n    }\n    const address = await this.getAddress();\n    return this.entryPoint.read.getNonce([address, BigInt(0)]);\n  }\n\n  async getInitCode(): Promise<Hex> {\n    if (this.deploymentState === DeploymentState.DEPLOYED) {\n      return \"0x\";\n    }\n    const contractCode = await this.rpcProvider.getContractCode(\n      await this.getAddress()\n    );\n\n    if ((contractCode?.length ?? 0) > 2) {\n      this.deploymentState = DeploymentState.DEPLOYED;\n      return \"0x\";\n    } else {\n      this.deploymentState = DeploymentState.NOT_DEPLOYED;\n    }\n\n    return this.getAccountInitCode();\n  }\n\n  async getAddress(): Promise<Address> {\n    if (!this.accountAddress) {\n      const initCode = await this.getAccountInitCode();\n      Logger.debug(\n        \"[BaseSmartContractAccount](getAddress) initCode: \",\n        initCode\n      );\n      try {\n        await this.entryPoint.simulate.getSenderAddress([initCode]);\n      } catch (err: any) {\n        Logger.debug(\n          \"[BaseSmartContractAccount](getAddress) entrypoint.getSenderAddress result: \",\n          err\n        );\n        if (err.cause?.data?.errorName === \"SenderAddressResult\") {\n          this.accountAddress = err.cause.data.args[0] as Address;\n          return this.accountAddress;\n        }\n      }\n\n      throw new Error(\"getCounterFactualAddress failed\");\n    }\n\n    return this.accountAddress;\n  }\n\n  // Extra implementations\n  async isAccountDeployed(): Promise<boolean> {\n    return (await this.getDeploymentState()) === DeploymentState.DEPLOYED;\n  }\n\n  async getDeploymentState(): Promise<DeploymentState> {\n    if (this.deploymentState === DeploymentState.UNDEFINED) {\n      const initCode = await this.getInitCode();\n      return initCode === \"0x\"\n        ? DeploymentState.DEPLOYED\n        : DeploymentState.NOT_DEPLOYED;\n    } else {\n      return this.deploymentState;\n    }\n  }\n}\n"]}