{"version":3,"file":"base.js","sourceRoot":"","sources":["../../../src/provider/base.ts"],"names":[],"mappings":"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","sourcesContent":["import { default as EventEmitter } from \"eventemitter3\";\nimport {\n  fromHex,\n  toHex,\n  type Address,\n  type Chain,\n  type Hash,\n  type RpcTransactionRequest,\n  type Transaction,\n  type Transport,\n} from \"viem\";\nimport { arbitrum, arbitrumGoerli } from \"viem/chains\";\nimport { BaseSmartContractAccount } from \"../account/base.js\";\nimport type { SignTypedDataParams } from \"../account/types.js\";\nimport { createPublicErc4337Client } from \"../client/create-client.js\";\nimport type {\n  PublicErc4337Client,\n  SupportedTransports,\n} from \"../client/types.js\";\nimport {\n  isValidRequest,\n  type BatchUserOperationCallData,\n  type UserOperationCallData,\n  type UserOperationOverrides,\n  type UserOperationReceipt,\n  type UserOperationResponse,\n  type UserOperationStruct,\n} from \"../types.js\";\nimport {\n  asyncPipe,\n  deepHexlify,\n  defineReadOnly,\n  getUserOperationHash,\n  resolveProperties,\n} from \"../utils.js\";\nimport type {\n  AccountMiddlewareFn,\n  AccountMiddlewareOverrideFn,\n  FeeDataMiddleware,\n  GasEstimatorMiddleware,\n  ISmartAccountProvider,\n  PaymasterAndDataMiddleware,\n  ProviderEvents,\n  SendUserOperationResult,\n} from \"./types.js\";\n\nexport const noOpMiddleware: AccountMiddlewareFn = async (\n  struct: UserOperationStruct\n) => struct;\nexport interface SmartAccountProviderOpts {\n  /**\n   * The maximum number of times to try fetching a transaction receipt before giving up (default: 5)\n   */\n  txMaxRetries?: number;\n\n  /**\n   * The interval in milliseconds to wait between retries while waiting for tx receipts (default: 2_000n)\n   */\n  txRetryIntervalMs?: number;\n\n  /**\n   * The mulitplier on interval length to wait between retries while waiting for tx receipts (default: 1.5)\n   */\n  txRetryMulitplier?: number;\n\n  /**\n   * used when computing the fees for a user operation (default: 100_000_000n)\n   */\n  minPriorityFeePerBid?: bigint;\n}\n\nconst minPriorityFeePerBidDefaults = new Map<number, bigint>([\n  [arbitrum.id, 10_000_000n],\n  [arbitrumGoerli.id, 10_000_000n],\n]);\n\nexport type ConnectedSmartAccountProvider<\n  TTransport extends SupportedTransports = Transport\n> = SmartAccountProvider<TTransport> & {\n  account: BaseSmartContractAccount<TTransport>;\n};\n\nexport class SmartAccountProvider<\n    TTransport extends SupportedTransports = Transport\n  >\n  extends EventEmitter<ProviderEvents>\n  implements ISmartAccountProvider<TTransport>\n{\n  private txMaxRetries: number;\n  private txRetryIntervalMs: number;\n  private txRetryMulitplier: number;\n\n  minPriorityFeePerBid: bigint;\n  rpcClient: PublicErc4337Client<Transport>;\n\n  constructor(\n    rpcProvider: string | PublicErc4337Client<TTransport>,\n    protected entryPointAddress: Address,\n    protected chain: Chain,\n    readonly account?: BaseSmartContractAccount<TTransport>,\n    opts?: SmartAccountProviderOpts\n  ) {\n    super();\n\n    this.txMaxRetries = opts?.txMaxRetries ?? 5;\n    this.txRetryIntervalMs = opts?.txRetryIntervalMs ?? 2000;\n    this.txRetryMulitplier = opts?.txRetryMulitplier ?? 1.5;\n\n    this.minPriorityFeePerBid =\n      opts?.minPriorityFeePerBid ??\n      minPriorityFeePerBidDefaults.get(chain.id) ??\n      100_000_000n;\n\n    this.rpcClient =\n      typeof rpcProvider === \"string\"\n        ? createPublicErc4337Client({\n            chain,\n            rpcUrl: rpcProvider,\n          })\n        : rpcProvider;\n  }\n\n  request: (args: { method: string; params?: any[] }) => Promise<any> = async (\n    args\n  ) => {\n    const { method, params } = args;\n    switch (method) {\n      case \"eth_sendTransaction\":\n        const [tx] = params as [RpcTransactionRequest];\n        return this.sendTransaction(tx);\n      // TODO: will probably need to handle typed message signing too?\n      case \"eth_sign\":\n      case \"personal_sign\":\n        const [data, address] = params!;\n        if (address !== (await this.getAddress())) {\n          throw new Error(\n            \"cannot sign for address that is not the current account\"\n          );\n        }\n        return this.signMessage(data);\n      default:\n        // TODO: there's probably a number of methods we just don't support, will need to test most of them out\n        // first let's get something working though\n        // @ts-expect-error the typing with viem clashes here, we'll need to fix the typing on this method\n        return this.rpcClient.request(args);\n    }\n  };\n\n  getAddress = (): Promise<`0x${string}`> => {\n    if (!this.account) {\n      throw new Error(\"account not connected!\");\n    }\n\n    return this.account.getAddress();\n  };\n\n  sendTransaction = async (request: RpcTransactionRequest): Promise<Hash> => {\n    if (!request.to) {\n      throw new Error(\"transaction is missing to address\");\n    }\n\n    const overrides: UserOperationOverrides = {};\n    if (request.maxFeePerGas) {\n      overrides.maxFeePerGas = request.maxFeePerGas;\n    }\n    if (request.maxPriorityFeePerGas) {\n      overrides.maxPriorityFeePerGas = request.maxPriorityFeePerGas;\n    }\n\n    const { hash } = await this.sendUserOperation(\n      {\n        target: request.to,\n        data: request.data ?? \"0x\",\n        value: request.value ? fromHex(request.value, \"bigint\") : 0n,\n      },\n      overrides\n    );\n\n    return await this.waitForUserOperationTransaction(hash as Hash);\n  };\n\n  signMessage = async (msg: string | Uint8Array): Promise<Hash> => {\n    if (!this.account) {\n      throw new Error(\"account not connected!\");\n    }\n    return this.account.signMessage(msg);\n  };\n\n  signTypedData = async (params: SignTypedDataParams): Promise<Hash> => {\n    if (!this.account) {\n      throw new Error(\"account not connected!\");\n    }\n\n    return this.account.signTypedData(params);\n  };\n\n  signMessageWith6492(msg: string | Uint8Array): Promise<`0x${string}`> {\n    if (!this.account) {\n      throw new Error(\"account not connected!\");\n    }\n\n    return this.account.signMessageWith6492(msg);\n  }\n\n  signTypedDataWith6492(params: SignTypedDataParams): Promise<`0x${string}`> {\n    if (!this.account) {\n      throw new Error(\"account not connected!\");\n    }\n\n    return this.account.signTypedDataWith6492(params);\n  }\n\n  sendTransactions = async (requests: RpcTransactionRequest[]) => {\n    const batch = requests.map((request) => {\n      if (!request.to) {\n        throw new Error(\n          \"one transaction in the batch is missing a target address\"\n        );\n      }\n\n      return {\n        target: request.to,\n        data: request.data ?? \"0x\",\n        value: request.value ? fromHex(request.value, \"bigint\") : 0n,\n      };\n    });\n\n    const bigIntMax = (...args: bigint[]) => {\n      if (!args.length) {\n        return undefined;\n      }\n\n      return args.reduce((m, c) => (m > c ? m : c));\n    };\n\n    const maxFeePerGas = bigIntMax(\n      ...requests\n        .filter((x) => x.maxFeePerGas != null)\n        .map((x) => fromHex(x.maxFeePerGas!, \"bigint\"))\n    );\n\n    const maxPriorityFeePerGas = bigIntMax(\n      ...requests\n        .filter((x) => x.maxPriorityFeePerGas != null)\n        .map((x) => fromHex(x.maxPriorityFeePerGas!, \"bigint\"))\n    );\n    const overrides: UserOperationOverrides = {};\n    if (maxFeePerGas != null) {\n      overrides.maxFeePerGas = maxFeePerGas;\n    }\n\n    if (maxPriorityFeePerGas != null) {\n      overrides.maxPriorityFeePerGas = maxPriorityFeePerGas;\n    }\n\n    const { hash } = await this.sendUserOperation(batch, overrides);\n\n    return await this.waitForUserOperationTransaction(hash as Hash);\n  };\n\n  waitForUserOperationTransaction = async (hash: Hash): Promise<Hash> => {\n    for (let i = 0; i < this.txMaxRetries; i++) {\n      const txRetryIntervalWithJitterMs =\n        this.txRetryIntervalMs * Math.pow(this.txRetryMulitplier, i) +\n        Math.random() * 100;\n\n      await new Promise((resolve) =>\n        setTimeout(resolve, txRetryIntervalWithJitterMs)\n      );\n      const receipt = await this.getUserOperationReceipt(hash as `0x${string}`)\n        // TODO: should maybe log the error?\n        .catch(() => null);\n      if (receipt) {\n        return this.getTransaction(receipt.receipt.transactionHash).then(\n          (x) => x.hash\n        );\n      }\n    }\n\n    throw new Error(\"Failed to find transaction for User Operation\");\n  };\n\n  getUserOperationByHash = (hash: Hash): Promise<UserOperationResponse> => {\n    return this.rpcClient.getUserOperationByHash(hash);\n  };\n\n  getUserOperationReceipt = (hash: Hash): Promise<UserOperationReceipt> => {\n    return this.rpcClient.getUserOperationReceipt(hash);\n  };\n\n  getTransaction = (hash: Hash): Promise<Transaction> => {\n    return this.rpcClient.getTransaction({ hash: hash });\n  };\n\n  sendUserOperation = async (\n    data: UserOperationCallData | BatchUserOperationCallData,\n    overrides?: UserOperationOverrides\n  ): Promise<SendUserOperationResult> => {\n    if (!this.account) {\n      throw new Error(\"account not connected!\");\n    }\n\n    const initCode = await this.account.getInitCode();\n    const uoStruct = await asyncPipe(\n      this.dummyPaymasterDataMiddleware,\n      this.feeDataGetter,\n      this.gasEstimator,\n      this.paymasterDataMiddleware,\n      this.customMiddleware ?? noOpMiddleware,\n      // This applies the overrides if they've been passed in\n      async (struct) => ({ ...struct, ...overrides })\n    )({\n      initCode,\n      sender: this.getAddress(),\n      nonce: this.account.getNonce(),\n      callData: Array.isArray(data)\n        ? this.account.encodeBatchExecute(data)\n        : this.account.encodeExecute(data.target, data.value ?? 0n, data.data),\n      signature: this.account.getDummySignature(),\n    } as UserOperationStruct);\n\n    const request = deepHexlify(await resolveProperties(uoStruct));\n    if (!isValidRequest(request)) {\n      // this pretty prints the uo\n      throw new Error(\n        `Request is missing parameters. All properties on UserOperationStruct must be set. uo: ${JSON.stringify(\n          request,\n          null,\n          2\n        )}`\n      );\n    }\n\n    request.signature = (await this.account.signMessage(\n      getUserOperationHash(\n        request,\n        this.entryPointAddress as `0x${string}`,\n        BigInt(this.chain.id)\n      )\n    )) as `0x${string}`;\n\n    return {\n      hash: await this.rpcClient.sendUserOperation(\n        request,\n        this.entryPointAddress\n      ),\n      request,\n    };\n  };\n\n  // These are dependent on the specific paymaster being used\n  // You should implement your own middleware to override these\n  // or extend this class and provider your own implemenation\n  readonly dummyPaymasterDataMiddleware: AccountMiddlewareFn = async (\n    struct: UserOperationStruct\n  ): Promise<UserOperationStruct> => {\n    struct.paymasterAndData = \"0x\";\n    return struct;\n  };\n\n  readonly paymasterDataMiddleware: AccountMiddlewareFn = async (\n    struct: UserOperationStruct\n  ): Promise<UserOperationStruct> => {\n    struct.paymasterAndData = \"0x\";\n    return struct;\n  };\n\n  readonly gasEstimator: AccountMiddlewareFn = async (struct) => {\n    const request = deepHexlify(await resolveProperties(struct));\n    const estimates = await this.rpcClient.estimateUserOperationGas(\n      request,\n      this.entryPointAddress\n    );\n\n    struct.callGasLimit = estimates.callGasLimit;\n    struct.verificationGasLimit = estimates.verificationGasLimit;\n    struct.preVerificationGas = estimates.preVerificationGas;\n\n    return struct;\n  };\n\n  readonly feeDataGetter: AccountMiddlewareFn = async (struct) => {\n    const maxPriorityFeePerGas = await this.rpcClient.getMaxPriorityFeePerGas();\n    const feeData = await this.rpcClient.getFeeData();\n    if (!feeData.maxFeePerGas || !feeData.maxPriorityFeePerGas) {\n      throw new Error(\n        \"feeData is missing maxFeePerGas or maxPriorityFeePerGas\"\n      );\n    }\n\n    // add 33% to the priorty fee to ensure the transaction is mined\n    let maxPriorityFeePerGasBid = (BigInt(maxPriorityFeePerGas) * 4n) / 3n;\n    if (maxPriorityFeePerGasBid < this.minPriorityFeePerBid) {\n      maxPriorityFeePerGasBid = this.minPriorityFeePerBid;\n    }\n\n    const maxFeePerGasBid =\n      BigInt(feeData.maxFeePerGas) -\n      BigInt(feeData.maxPriorityFeePerGas) +\n      maxPriorityFeePerGasBid;\n\n    struct.maxFeePerGas = maxFeePerGasBid;\n    struct.maxPriorityFeePerGas = maxPriorityFeePerGasBid;\n\n    return struct;\n  };\n\n  readonly customMiddleware?: AccountMiddlewareFn | undefined = undefined;\n\n  withPaymasterMiddleware = (overrides: {\n    dummyPaymasterDataMiddleware?: PaymasterAndDataMiddleware;\n    paymasterDataMiddleware?: PaymasterAndDataMiddleware;\n  }): this => {\n    const newDummyMiddleware = overrides.dummyPaymasterDataMiddleware\n      ? this.overrideMiddlewareFunction(overrides.dummyPaymasterDataMiddleware)\n      : this.dummyPaymasterDataMiddleware;\n    defineReadOnly(this, \"dummyPaymasterDataMiddleware\", newDummyMiddleware);\n\n    const newPaymasterMiddleware = overrides.paymasterDataMiddleware\n      ? this.overrideMiddlewareFunction(overrides.paymasterDataMiddleware)\n      : this.paymasterDataMiddleware;\n    defineReadOnly(this, \"paymasterDataMiddleware\", newPaymasterMiddleware);\n\n    return this;\n  };\n\n  withGasEstimator = (override: GasEstimatorMiddleware): this => {\n    defineReadOnly(\n      this,\n      \"gasEstimator\",\n      this.overrideMiddlewareFunction(override)\n    );\n    return this;\n  };\n\n  withFeeDataGetter = (override: FeeDataMiddleware): this => {\n    defineReadOnly(\n      this,\n      \"feeDataGetter\",\n      this.overrideMiddlewareFunction(override)\n    );\n    return this;\n  };\n\n  withCustomMiddleware = (override: AccountMiddlewareFn): this => {\n    defineReadOnly(this, \"customMiddleware\", override);\n\n    return this;\n  };\n\n  connect(\n    fn: (provider: PublicErc4337Client<TTransport>) => BaseSmartContractAccount\n  ): this & { account: BaseSmartContractAccount } {\n    const account = fn(this.rpcClient);\n    defineReadOnly(this, \"account\", account);\n\n    this.emit(\"connect\", {\n      chainId: toHex(this.chain.id),\n    });\n\n    account\n      .getAddress()\n      .then((address) => this.emit(\"accountsChanged\", [address]));\n\n    return this as this & { account: typeof account };\n  }\n\n  disconnect(): this & { account: undefined } {\n    if (this.account) {\n      this.emit(\"disconnect\");\n      this.emit(\"accountsChanged\", []);\n    }\n\n    defineReadOnly(this, \"account\", undefined);\n\n    return this as this & { account: undefined };\n  }\n\n  isConnected(): this is ConnectedSmartAccountProvider<TTransport> {\n    return this.account !== undefined;\n  }\n\n  private overrideMiddlewareFunction = (\n    override: AccountMiddlewareOverrideFn\n  ): AccountMiddlewareFn => {\n    return async (struct: UserOperationStruct) => {\n      return {\n        ...struct,\n        ...(await override(struct)),\n      };\n    };\n  };\n}\n"]}