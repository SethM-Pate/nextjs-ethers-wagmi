import { BaseSmartContractAccount, SmartAccountProvider, getChain, } from "@alchemy/aa-core";
import { defineReadOnly } from "@ethersproject/properties";
import { JsonRpcProvider } from "@ethersproject/providers";
import { AccountSigner } from "./account-signer.js";
export class EthersProviderAdapter extends JsonRpcProvider {
    constructor(rpcProvider, entryPointAddress, chainId) {
        super();
        Object.defineProperty(this, "accountProvider", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "withPaymasterMiddleware", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: (overrides) => {
                this.accountProvider.withPaymasterMiddleware(overrides);
                return this;
            }
        });
        Object.defineProperty(this, "withGasEstimator", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: (override) => {
                this.accountProvider.withGasEstimator(override);
                return this;
            }
        });
        Object.defineProperty(this, "withFeeDataGetter", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: (override) => {
                this.accountProvider.withFeeDataGetter(override);
                return this;
            }
        });
        Object.defineProperty(this, "withCustomMiddleware", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: (override) => {
                this.accountProvider.withCustomMiddleware(override);
                return this;
            }
        });
        const chain = getChain(chainId);
        this.accountProvider = new SmartAccountProvider(rpcProvider, entryPointAddress, chain);
    }
    send(method, params) {
        return this.accountProvider.request({ method, params });
    }
    connectToAccount(fn) {
        defineReadOnly(this, "accountProvider", this.accountProvider.connect(fn));
        return this.getAccountSigner();
    }
    getAccountSigner() {
        return new AccountSigner(this);
    }
    getPublicErc4337Client() {
        return this.accountProvider.rpcClient;
    }
    static fromEthersProvider(provider, entryPointAddress) {
        return new EthersProviderAdapter(provider.connection.url, entryPointAddress, provider.network.chainId);
    }
}
//# sourceMappingURL=provider-adapter.js.map