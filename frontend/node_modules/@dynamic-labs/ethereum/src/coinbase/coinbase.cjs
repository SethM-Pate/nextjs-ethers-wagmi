'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _tslib = require('../../_virtual/_tslib.cjs');
var viem = require('viem');
var walletBook = require('@dynamic-labs/wallet-book');
var walletConnectorCore = require('@dynamic-labs/wallet-connector-core');
var ethProviderHelper = require('../ethProviderHelper.cjs');
var EthWalletConnector = require('../EthWalletConnector.cjs');
var client = require('./client/client.cjs');

class Coinbase extends EthWalletConnector.EthWalletConnector {
    constructor(_a) {
        var { appName, appLogoUrl, evmNetworks } = _a, props = _tslib.__rest(_a, ["appName", "appLogoUrl", "evmNetworks"]);
        super(Object.assign({ evmNetworks }, props));
        this.name = 'Coinbase';
        this.supportedChains = ['EVM', 'ETH'];
        this.connectedChain = 'EVM';
        this.canConnectViaQrCode = true;
        this.coinbaseProviderOpts = {
            appLogoUrl: appLogoUrl,
            appName: appName,
            evmNetworks: evmNetworks,
        };
        const wallet = walletBook.findWalletBookWallet(this.walletBook, this.key);
        if (!wallet)
            return;
        this.ethProviderHelper = new ethProviderHelper.EthProviderHelper(wallet);
    }
    setupEventListeners() {
        var _a, _b, _c;
        if (!this.isInstalledOnBrowser()) {
            this.setupCoinbaseProviderEventListeners();
            return;
        }
        const provider = (_a = this.ethProviderHelper) === null || _a === void 0 ? void 0 : _a.findProvider();
        if (!provider) {
            return;
        }
        const setupResponse = (_c = (_b = this.ethProviderHelper) === null || _b === void 0 ? void 0 : _b._setupEventListeners) === null || _c === void 0 ? void 0 : _c.call(_b, this);
        if (!(setupResponse === null || setupResponse === void 0 ? void 0 : setupResponse.tearDownEventListeners))
            return;
        this.teardownEventListeners = setupResponse.tearDownEventListeners;
    }
    getWalletClient(chainId) {
        var _a;
        if (this.isInstalledOnBrowser()) {
            return (_a = this.ethProviderHelper) === null || _a === void 0 ? void 0 : _a.findWalletClient(chainId);
        }
        return viem.createWalletClient({
            transport: viem.custom(client.getCoinbaseClient({
                opts: this.coinbaseProviderOpts,
            }).provider),
        });
    }
    isInstalledOnBrowser() {
        var _a;
        return ((_a = this.ethProviderHelper) === null || _a === void 0 ? void 0 : _a.findProvider()) !== undefined;
    }
    fetchPublicAddress(opts) {
        return _tslib.__awaiter(this, void 0, void 0, function* () {
            var _a;
            if (this.isInstalledOnBrowser()) {
                return (_a = this.ethProviderHelper) === null || _a === void 0 ? void 0 : _a.fetchPublicAddress();
            }
            return client.fetchPublicAddress(this.coinbaseProviderOpts, opts);
        });
    }
    signMessage(messageToSign) {
        return _tslib.__awaiter(this, void 0, void 0, function* () {
            var _a;
            if (this.isInstalledOnBrowser()) {
                return (_a = this.ethProviderHelper) === null || _a === void 0 ? void 0 : _a.signMessage(messageToSign);
            }
            return client.signMessage(this.coinbaseProviderOpts, messageToSign);
        });
    }
    endSession() {
        return _tslib.__awaiter(this, void 0, void 0, function* () {
            if (this.isInstalledOnBrowser())
                return;
            client.killCoinbaseSession();
        });
    }
    setupCoinbaseProviderEventListeners() {
        const { provider } = client.getCoinbaseClient({
            opts: this.coinbaseProviderOpts,
        });
        if (!provider) {
            return;
        }
        const { handleAccountChange, handleChainChange, handleDisconnect } = walletConnectorCore.eventListenerHandlers(this);
        provider.on('accountsChanged', handleAccountChange);
        provider.on('chainChanged', handleChainChange);
        provider.on('disconnect', handleDisconnect);
        this.teardownEventListeners = () => {
            provider.removeListener('accountsChanged', handleAccountChange);
            provider.removeListener('chainChanged', handleChainChange);
            provider.removeListener('disconnect', handleDisconnect);
        };
    }
}

exports.Coinbase = Coinbase;
