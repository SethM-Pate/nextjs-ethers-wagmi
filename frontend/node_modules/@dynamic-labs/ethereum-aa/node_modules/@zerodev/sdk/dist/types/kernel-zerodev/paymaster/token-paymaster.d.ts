import { type PromiseOrValue, type BytesLike, type UserOperationCallData, type UserOperationStruct, type BatchUserOperationCallData } from "@alchemy/aa-core";
import { type Hex } from "viem";
import type { ZeroDevProvider } from "../provider.js";
import { type UserOperationCallDataWithDelegate } from "../utils.js";
import { Paymaster } from "./base.js";
import { type PaymasterAndBundlerProviders, type PaymasterConfig } from "./types.js";
export declare function isBatchUserOperationCallData(data: any): data is BatchUserOperationCallData;
export declare class TokenPaymaster extends Paymaster {
    protected paymasterConfig: PaymasterConfig<"TOKEN_PAYMASTER">;
    constructor(provider: ZeroDevProvider, paymasterConfig: PaymasterConfig<"TOKEN_PAYMASTER">);
    getPaymasterAddress(paymasterProvider?: PaymasterAndBundlerProviders): Promise<Hex | undefined>;
    decodeMainCallFromCallData(kernelAddress: PromiseOrValue<string>, callData: PromiseOrValue<BytesLike>): Promise<UserOperationCallData | BatchUserOperationCallData | UserOperationCallDataWithDelegate | undefined>;
    getERC20UserOp<T extends UserOperationCallData | BatchUserOperationCallData>(struct: UserOperationStruct, mainCall: T, gasTokenAddress: Hex, paymasterAddress: Hex): Promise<UserOperationStruct | undefined>;
    getPaymasterResponse(struct: UserOperationStruct, paymasterProvider?: PaymasterAndBundlerProviders, shouldOverrideFee?: boolean, shouldConsume?: boolean): Promise<UserOperationStruct | undefined>;
}
//# sourceMappingURL=token-paymaster.d.ts.map