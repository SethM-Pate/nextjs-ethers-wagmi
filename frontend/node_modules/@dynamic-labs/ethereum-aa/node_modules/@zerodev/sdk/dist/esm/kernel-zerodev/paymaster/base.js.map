{"version":3,"file":"base.js","sourceRoot":"","sources":["../../../../src/kernel-zerodev/paymaster/base.ts"],"names":[],"mappings":"AAAA,OAAO,EACL,WAAW,EAIX,iBAAiB,GAClB,MAAM,kBAAkB,CAAC;AAC1B,OAAO,KAAK,MAAM,OAAO,CAAC;AAC1B,OAAO,EAAE,kBAAkB,EAAE,aAAa,EAAE,MAAM,iBAAiB,CAAC;AAEpE,OAAO,EAAE,YAAY,EAAE,MAAM,2BAA2B,CAAC;AAEzD,OAAO,EAAE,UAAU,EAAE,MAAM,iBAAiB,CAAC;AAE7C,MAAM,OAAgB,SAAS;IAC7B,YAAsB,QAAyB;QAAnC;;;;mBAAU,QAAQ;WAAiB;IAAG,CAAC;IAOzC,KAAK,CAAC,UAAU,CAAC,EACzB,MAAM,EACN,QAAQ,EACR,eAAe,EACf,WAAW,EACX,aAAa,EACb,iBAAiB,EACjB,iBAAiB,GAAG,KAAK,EACzB,aAAa,GAAG,IAAI,GAUrB;QACC,MAAM,cAAc,GAAG,WAAW,CAAC,MAAM,iBAAiB,CAAC,MAAM,CAAC,CAAC,CAAC;QACpE,IAAI,mBAAmB,CAAC;QACxB,IAAI,mBAAwB,CAAC;QAC7B,IAAI,WAAW,EAAE;YACf,mBAAmB,GAAG,MAAM,iBAAiB,CAAC,WAAW,CAAC,CAAC;YAE3D,mBAAmB,GAAG,YAAY,CAAC,mBAAmB,CAAC,CAAC;SACzD;QACD,MAAM,OAAO,GAAG,MAAM,UAAU,CAAC,IAAI,CAAC,QAAQ,CAAC,YAAY,EAAE,CAAC,CAAC;QAC/D,IAAI,CAAC,OAAO;YAAE,MAAM,IAAI,KAAK,CAAC,mBAAmB,CAAC,CAAC;QACnD,IAAI,iBAAiB,GAAG,MAAM,CAAC,WAAW,CACxC,MAAM,CAAC,OAAO,CAAC;YACb,SAAS,EAAE,IAAI,CAAC,QAAQ,CAAC,YAAY,EAAE;YACvC,OAAO;YACP,MAAM,EAAE,cAAc;YACtB,iBAAiB,EAAE,kBAAkB;YACrC,QAAQ,EAAE,QAAQ,YAAY,OAAO,CAAC,CAAC,CAAC,MAAM,QAAQ,CAAC,CAAC,CAAC,QAAQ;YACjE,YAAY,EACV,eAAe,IAAI,mBAAmB,IAAI,aAAa;gBACrD,CAAC,CAAC;oBACE,YAAY,EAAE,eAAe;oBAC7B,WAAW,EAAE,mBAAmB;oBAChC,aAAa,EACX,aAAa,YAAY,OAAO;wBAC9B,CAAC,CAAC,MAAM,aAAa;wBACrB,CAAC,CAAC,aAAa;iBACpB;gBACH,CAAC,CAAC,SAAS;YACf,YAAY,EAAE,eAAe;YAC7B,WAAW,EAAE,mBAAmB;YAChC,aAAa,EACX,aAAa,YAAY,OAAO;gBAC9B,CAAC,CAAC,MAAM,aAAa;gBACrB,CAAC,CAAC,aAAa;YACnB,iBAAiB;YACjB,iBAAiB;YACjB,aAAa;SACd,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,EAAE,KAAK,CAAC,EAAE,EAAE,CAAC,KAAK,KAAK,SAAS,CAAC,CAC/C,CAAC;QACF,MAAM,EAAE,IAAI,EAAE,aAAa,EAAE,GAAG,MAAM,KAAK,CAAC,IAAI,CAC9C,GAAG,aAAa,sBAAsB,EACtC;YACE,GAAG,iBAAiB;SACrB,EACD,EAAE,OAAO,EAAE,EAAE,cAAc,EAAE,kBAAkB,EAAE,EAAE,CACpD,CAAC;QACF,OAAO,aAAa,CAAC;IACvB,CAAC;CACF","sourcesContent":["import {\n  deepHexlify,\n  type BytesLike,\n  type PromiseOrValue,\n  type UserOperationStruct,\n  resolveProperties,\n} from \"@alchemy/aa-core\";\nimport axios from \"axios\";\nimport { ENTRYPOINT_ADDRESS, PAYMASTER_URL } from \"../constants.js\";\nimport type { ZeroDevProvider } from \"../provider.js\";\nimport { hexifyUserOp } from \"../utils/ERC4337-utils.js\";\nimport type { PaymasterAndBundlerProviders } from \"./types.js\";\nimport { getChainId } from \"../api/index.js\";\n\nexport abstract class Paymaster {\n  constructor(protected provider: ZeroDevProvider) {}\n  abstract getPaymasterResponse(\n    struct: UserOperationStruct,\n    paymasterProvider?: PaymasterAndBundlerProviders,\n    shouldOverrideFee?: boolean,\n    shouldConsume?: boolean\n  ): Promise<UserOperationStruct | undefined>;\n  protected async signUserOp({\n    userOp,\n    callData,\n    gasTokenAddress,\n    erc20UserOp,\n    erc20CallData,\n    paymasterProvider,\n    shouldOverrideFee = false,\n    shouldConsume = true,\n  }: {\n    userOp: UserOperationStruct;\n    callData?: PromiseOrValue<BytesLike>;\n    gasTokenAddress?: string;\n    erc20UserOp?: Partial<UserOperationStruct>;\n    erc20CallData?: PromiseOrValue<BytesLike>;\n    paymasterProvider?: PaymasterAndBundlerProviders;\n    shouldOverrideFee?: boolean;\n    shouldConsume?: boolean;\n  }): Promise<any> {\n    const hexifiedUserOp = deepHexlify(await resolveProperties(userOp));\n    let resolvedERC20UserOp;\n    let hexifiedERC20UserOp: any;\n    if (erc20UserOp) {\n      resolvedERC20UserOp = await resolveProperties(erc20UserOp);\n\n      hexifiedERC20UserOp = hexifyUserOp(resolvedERC20UserOp);\n    }\n    const chainId = await getChainId(this.provider.getProjectId());\n    if (!chainId) throw new Error(\"ChainId not found\");\n    let requestBodyParams = Object.fromEntries(\n      Object.entries({\n        projectId: this.provider.getProjectId(),\n        chainId,\n        userOp: hexifiedUserOp,\n        entryPointAddress: ENTRYPOINT_ADDRESS,\n        callData: callData instanceof Promise ? await callData : callData,\n        gasTokenData:\n          gasTokenAddress && hexifiedERC20UserOp && erc20CallData\n            ? {\n                tokenAddress: gasTokenAddress,\n                erc20UserOp: hexifiedERC20UserOp,\n                erc20CallData:\n                  erc20CallData instanceof Promise\n                    ? await erc20CallData\n                    : erc20CallData,\n              }\n            : undefined,\n        tokenAddress: gasTokenAddress,\n        erc20UserOp: hexifiedERC20UserOp,\n        erc20CallData:\n          erc20CallData instanceof Promise\n            ? await erc20CallData\n            : erc20CallData,\n        paymasterProvider,\n        shouldOverrideFee,\n        shouldConsume,\n      }).filter(([_, value]) => value !== undefined)\n    );\n    const { data: paymasterResp } = await axios.post(\n      `${PAYMASTER_URL}/getPaymasterAndData`,\n      {\n        ...requestBodyParams,\n      },\n      { headers: { \"Content-Type\": \"application/json\" } }\n    );\n    return paymasterResp;\n  }\n}\n"]}