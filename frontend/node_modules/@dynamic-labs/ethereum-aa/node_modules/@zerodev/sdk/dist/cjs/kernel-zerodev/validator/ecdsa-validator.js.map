{"version":3,"file":"ecdsa-validator.js","sourceRoot":"","sources":["../../../../src/kernel-zerodev/validator/ecdsa-validator.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  getUserOperationHash,\n  type Address,\n  type Hex,\n  type SmartAccountSigner,\n  type UserOperationRequest,\n  type SignTypedDataParams,\n} from \"@alchemy/aa-core\";\nimport { KernelBaseValidator, type KernelBaseValidatorParams } from \"./base.js\";\nimport { encodeFunctionData, toBytes } from \"viem\";\nimport { ECDSAValidatorAbi } from \"../abis/ESCDAValidatorAbi.js\";\nimport { getChainId } from \"../api/index.js\";\nimport { DUMMY_ECDSA_SIG } from \"../constants.js\";\nimport { KernelAccountAbi } from \"../abis/KernelAccountAbi.js\";\nimport { fixSignedData, getChain } from \"../utils.js\";\n\nexport interface ECDSAValidatorParams extends KernelBaseValidatorParams {\n  owner: SmartAccountSigner;\n}\n\nexport class ECDSAValidator extends KernelBaseValidator {\n  protected owner: SmartAccountSigner;\n\n  constructor(params: ECDSAValidatorParams) {\n    super(params);\n    this.owner = params.owner;\n  }\n\n  public static async init(\n    params: ECDSAValidatorParams\n  ): Promise<ECDSAValidator> {\n    const chainId = await getChainId(params.projectId);\n    if (!chainId) {\n      throw new Error(\"ChainId not found\");\n    }\n    const chain = getChain(chainId);\n    const instance = new ECDSAValidator({ ...params, chain });\n    return instance;\n  }\n\n  async signer(): Promise<SmartAccountSigner> {\n    return await Promise.resolve(this.owner);\n  }\n\n  async getOwner(): Promise<Hex> {\n    return this.owner.getAddress();\n  }\n\n  async getEnableData(): Promise<Hex> {\n    return this.getOwner();\n  }\n\n  encodeEnable(newOwner: Hex): Hex {\n    return encodeFunctionData({\n      abi: ECDSAValidatorAbi,\n      functionName: \"enable\",\n      args: [newOwner],\n    });\n  }\n\n  encodeDisable(disableData: Hex = \"0x\"): Hex {\n    return encodeFunctionData({\n      abi: ECDSAValidatorAbi,\n      functionName: \"disable\",\n      args: [disableData],\n    });\n  }\n\n  async getDummyUserOpSignature(): Promise<Hex> {\n    return DUMMY_ECDSA_SIG;\n  }\n\n  async isPluginEnabled(\n    kernelAccountAddress: Address,\n    selector: Hex\n  ): Promise<boolean> {\n    if (!this.publicClient) {\n      throw new Error(\"Validator uninitialized: PublicClient missing\");\n    }\n    const execDetail = await this.publicClient.readContract({\n      abi: KernelAccountAbi,\n      address: kernelAccountAddress,\n      functionName: \"getExecution\",\n      args: [selector],\n    });\n    const enableData = await this.publicClient.readContract({\n      abi: ECDSAValidatorAbi,\n      address: this.validatorAddress,\n      functionName: \"ecdsaValidatorStorage\",\n      args: [kernelAccountAddress],\n    });\n    return (\n      execDetail.validator.toLowerCase() ===\n        this.validatorAddress.toLowerCase() &&\n      enableData.toLowerCase() === (await this.getEnableData()).toLowerCase()\n    );\n  }\n\n  async signMessage(message: string | Uint8Array): Promise<Hex> {\n    return await this.owner.signMessage(message);\n  }\n\n  async signTypedData(params: SignTypedDataParams): Promise<Hex> {\n    return fixSignedData(await this.owner.signTypedData(params));\n  }\n\n  async signUserOp(userOp: UserOperationRequest): Promise<Hex> {\n    if (!this.chain) {\n      throw new Error(\"Validator uninitialized\");\n    }\n    const hash = getUserOperationHash(\n      {\n        ...userOp,\n        signature: \"0x\",\n      },\n      this.entryPointAddress,\n      BigInt(this.chain.id)\n    );\n    const formattedMessage = typeof hash === \"string\" ? toBytes(hash) : hash;\n    return await this.owner.signMessage(formattedMessage);\n  }\n}\n"]}