{"version":3,"file":"base.js","sourceRoot":"","sources":["../../../../src/kernel-zerodev/validator/base.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  type SignTypedDataParams,\n  type SmartAccountSigner,\n  type UserOperationRequest,\n} from \"@alchemy/aa-core\";\nimport {\n  concat,\n  type Chain,\n  type Hex,\n  pad,\n  toHex,\n  type Address,\n  concatHex,\n  hexToBigInt,\n  type PublicClient,\n  type Transport,\n  createPublicClient,\n  http,\n  zeroAddress,\n} from \"viem\";\nimport { KernelAccountAbi } from \"../abis/KernelAccountAbi.js\";\nimport {\n  CHAIN_ID_TO_NODE,\n  ECDSA_VALIDATOR_ADDRESS,\n  ENTRYPOINT_ADDRESS,\n  KERNEL_IMPL_ADDRESS,\n} from \"../constants.js\";\nimport { polygonMumbai } from \"viem/chains\";\n\nexport enum ValidatorMode {\n  sudo = \"0x00000000\",\n  plugin = \"0x00000001\",\n  enable = \"0x00000002\",\n}\n\nexport interface KernelBaseValidatorParams {\n  projectId: string;\n  validatorAddress?: Hex;\n  mode?: ValidatorMode;\n  chain?: Chain;\n  entryPointAddress?: Address;\n  enableSignature?: Hex;\n  validUntil?: number;\n  validAfter?: number;\n  executor?: Address;\n  selector?: Hex;\n  rpcUrl?: string;\n}\n\nexport type ValidatorPluginData = Required<\n  Pick<\n    KernelBaseValidatorParams,\n    \"executor\" | \"selector\" | \"validAfter\" | \"validUntil\"\n  >\n>;\n\n//Kernel wallet implementation separates out validation and execution phase. It allows you to have\n// custom wrapper logic for the validation phase in addition to signature of choice.\nexport abstract class KernelBaseValidator {\n  readonly validatorAddress: Hex;\n  mode: ValidatorMode;\n  resolvedMode?: ValidatorMode;\n  protected projectId: string;\n  protected chain?: Chain;\n  protected entryPointAddress: Address;\n  protected enableSignature?: Hex;\n  protected validUntil: number;\n  protected validAfter: number;\n  protected executor?: Address;\n  protected selector?: Hex;\n  protected rpcUrl?: string;\n  publicClient?: PublicClient<Transport, Chain>;\n\n  constructor(params: KernelBaseValidatorParams) {\n    this.projectId = params.projectId;\n    this.validatorAddress = params.validatorAddress ?? ECDSA_VALIDATOR_ADDRESS;\n    this.mode = params.mode ?? ValidatorMode.sudo;\n    this.entryPointAddress = params.entryPointAddress ?? ENTRYPOINT_ADDRESS;\n    this.enableSignature = params.enableSignature;\n    this.validUntil = params.validUntil ?? 0;\n    this.validAfter = params.validAfter ?? 0;\n    this.executor = params.executor;\n    this.selector = params.selector;\n    this.chain = params.chain;\n    this.rpcUrl = params.rpcUrl;\n    this.publicClient = createPublicClient({\n      transport: http(\n        params.rpcUrl ?? CHAIN_ID_TO_NODE[this.chain?.id ?? polygonMumbai.id]\n      ),\n      chain: this.chain ?? polygonMumbai,\n    });\n  }\n\n  abstract encodeEnable(enableData: Hex): Hex;\n\n  abstract encodeDisable(enableData: Hex): Hex;\n\n  abstract getEnableData(kernelAccountAddress?: Address): Promise<Hex>;\n\n  abstract signMessage(message: Uint8Array | string | Hex): Promise<Hex>;\n\n  abstract signTypedData(params: SignTypedDataParams): Promise<Hex>;\n\n  abstract signUserOp(userOp: UserOperationRequest): Promise<Hex>;\n\n  abstract signer(): Promise<SmartAccountSigner>;\n\n  abstract getDummyUserOpSignature(callData?: Hex): Promise<Hex>;\n\n  abstract isPluginEnabled(\n    kernelAccountAddress: Address,\n    selector: Hex\n  ): Promise<boolean>;\n\n  shouldDelegateViaFallback(): boolean {\n    return true;\n  }\n\n  getPluginValidatorData(): ValidatorPluginData {\n    if (!this.selector || !this.executor) {\n      throw Error(\"Plugin Validator data params uninitialised\");\n    }\n    return {\n      selector: this.selector,\n      executor: this.executor,\n      validAfter: this.validAfter,\n      validUntil: this.validUntil,\n    };\n  }\n\n  getNonceKey(): bigint {\n    return 0n;\n  }\n\n  async getDynamicDummySignature(\n    kernelAccountAddress: Address,\n    calldata: Hex\n  ): Promise<Hex> {\n    const dummyECDSASig =\n      \"0xfffffffffffffffffffffffffffffff0000000000000000000000000000000007aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa1c\";\n    const validatorMode =\n      this.resolvedMode ??\n      (await this.resolveValidatorMode(kernelAccountAddress, calldata));\n    if (validatorMode === ValidatorMode.enable) {\n      const enableData = await this.getEnableData(kernelAccountAddress);\n      const enableDataLength = enableData.length / 2 - 1;\n      const enableSigLength = 65;\n      const staticDummySig = concatHex([\n        \"0x000000000000000000000000\",\n        this.getAddress(),\n        this.executor!,\n      ]);\n\n      return concatHex([\n        ValidatorMode.enable,\n        staticDummySig,\n        pad(toHex(enableDataLength), { size: 32 }),\n        enableData,\n        pad(toHex(enableSigLength), { size: 32 }),\n        dummyECDSASig,\n        await this.getDummyUserOpSignature(calldata),\n      ]);\n    }\n    return concatHex([\n      validatorMode,\n      await this.getDummyUserOpSignature(calldata),\n    ]);\n  }\n\n  setEnableSignature(enableSignature: Hex) {\n    this.enableSignature = enableSignature;\n  }\n\n  getEnableSignature(): Hex | undefined {\n    return this.enableSignature;\n  }\n\n  getAddress(): Hex {\n    return this.validatorAddress;\n  }\n\n  getPublicClient(): PublicClient<Transport, Chain> {\n    if (!this.publicClient) {\n      throw new Error(\"Validator uninitialized: PublicClient missing\");\n    }\n    return this.publicClient;\n  }\n\n  async approveExecutor(\n    kernel: Address,\n    selector: Hex,\n    executor: Address,\n    validUntil: number,\n    validAfter: number,\n    validator: KernelBaseValidator\n  ): Promise<Hex> {\n    if (!this.chain) {\n      throw new Error(\"Validator uninitialized\");\n    }\n    let kernelImplAddr;\n    try {\n      const strgAddr = await this.getPublicClient().getStorageAt({\n        address: kernel,\n        slot: \"0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc\",\n      });\n      kernelImplAddr = strgAddr\n        ? ((\"0x\" + strgAddr.slice(26)) as Hex)\n        : strgAddr;\n    } catch (error) {}\n    const sender = kernel;\n    const signer = await this.signer();\n    const ownerSig = await signer.signTypedData({\n      domain: {\n        name: \"Kernel\",\n        version:\n          kernelImplAddr?.toLowerCase() === KERNEL_IMPL_ADDRESS.toLowerCase() ||\n          kernelImplAddr?.toLowerCase() ===\n            \"0x8dD4DBB54d8A8Cf0DE6F9CCC4609470A30EfF18C\".toLowerCase() ||\n          kernelImplAddr === undefined ||\n          kernelImplAddr === zeroAddress\n            ? \"0.2.2\"\n            : \"0.2.1\",\n        chainId: this.chain.id,\n        verifyingContract: sender,\n      },\n      types: {\n        ValidatorApproved: [\n          { name: \"sig\", type: \"bytes4\" },\n          { name: \"validatorData\", type: \"uint256\" },\n          { name: \"executor\", type: \"address\" },\n          { name: \"enableData\", type: \"bytes\" },\n        ],\n      },\n      message: {\n        sig: selector as Hex,\n        validatorData: hexToBigInt(\n          concatHex([\n            pad(toHex(validUntil), { size: 6 }),\n            pad(toHex(validAfter), { size: 6 }),\n            validator.getAddress(),\n          ]),\n          { size: 32 }\n        ),\n        executor: executor as Address,\n        enableData: await validator.getEnableData(kernel),\n      },\n      primaryType: \"ValidatorApproved\",\n    });\n    return ownerSig;\n  }\n\n  async resolveValidatorMode(\n    kernelAccountAddress: Address,\n    callData: Hex\n  ): Promise<ValidatorMode> {\n    if (!this.chain || !this.publicClient) {\n      throw new Error(\"Validator uninitialized\");\n    }\n\n    let mode: ValidatorMode;\n    try {\n      const defaultValidatorAddress = await this.publicClient.readContract({\n        abi: KernelAccountAbi,\n        address: kernelAccountAddress,\n        functionName: \"getDefaultValidator\",\n      });\n      if (\n        defaultValidatorAddress?.toLowerCase() ===\n          this.validatorAddress.toLowerCase() ||\n        this.mode === ValidatorMode.sudo\n      ) {\n        mode = ValidatorMode.sudo;\n      } else if (\n        await this.isPluginEnabled(\n          kernelAccountAddress,\n          callData.toString().slice(0, 10) as Hex\n        )\n      ) {\n        mode = ValidatorMode.plugin;\n      } else {\n        mode = ValidatorMode.enable;\n      }\n    } catch (error) {\n      if (this.mode === ValidatorMode.plugin) {\n        mode = ValidatorMode.enable;\n      } else {\n        mode = this.mode;\n      }\n    }\n    this.resolvedMode = mode;\n    return mode;\n  }\n\n  async getSignature(userOp: UserOperationRequest): Promise<Hex> {\n    const mode =\n      this.resolvedMode ??\n      (await this.resolveValidatorMode(userOp.sender, userOp.callData));\n    if (mode === ValidatorMode.sudo || mode === ValidatorMode.plugin) {\n      return concatHex([this.mode, await this.signUserOp(userOp)]);\n    } else {\n      const enableData = await this.getEnableData(userOp.sender);\n      const enableDataLength = enableData.length / 2 - 1;\n      const enableSignature = this.getEnableSignature();\n      if (!enableSignature) {\n        throw new Error(\"Enable signature not set\");\n      }\n      return concat([\n        mode, // 4 bytes 0 - 4\n        pad(toHex(this.validUntil), { size: 6 }), // 6 bytes 4 - 10\n        pad(toHex(this.validAfter), { size: 6 }), // 6 bytes 10 - 16\n        pad(this.validatorAddress, { size: 20 }), // 20 bytes 16 - 36\n        pad(this.executor!, { size: 20 }), // 20 bytes 36 - 56\n        pad(toHex(enableDataLength), { size: 32 }), // 32 bytes 56 - 88\n        enableData, // 88 - 88 + enableData.length\n        pad(toHex(enableSignature.length / 2 - 1), { size: 32 }), // 32 bytes 88 + enableData.length - 120 + enableData.length\n        enableSignature, // 120 + enableData.length - 120 + enableData.length + enableSignature.length\n        await this.signUserOp(userOp), // 120 + enableData.length + enableSignature.length - 120 + enableData.length + enableSignature.length + userOperation.length\n      ]);\n    }\n  }\n}\n"]}