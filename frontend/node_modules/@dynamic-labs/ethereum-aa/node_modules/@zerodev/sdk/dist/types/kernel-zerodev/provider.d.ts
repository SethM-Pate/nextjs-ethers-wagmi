import { type Address, type Chain, type Hash, type HttpTransport, type RpcTransactionRequest } from "viem";
import { type SmartAccountProviderOpts, type UserOperationCallData, type BatchUserOperationCallData, type SendUserOperationResult, type UserOperationStruct, SmartAccountProvider, type AccountMiddlewareFn, type UserOperationOverrides } from "@alchemy/aa-core";
import { KernelSmartContractAccount } from "./account.js";
import type { PaymasterAndBundlerProviders, PaymasterConfig, PaymasterPolicy } from "./paymaster/types.js";
export type FeeOptions = {
    maxFeePerGasBufferPercentage?: number;
    maxPriorityFeePerGasBufferPercentage?: number;
};
export type ZeroDevProviderConfig = {
    projectId: string;
    chain: Chain | number;
    entryPointAddress?: Address;
    rpcUrl?: string;
    bundlerRpcUrl?: string;
    account?: KernelSmartContractAccount;
    bundlerProvider?: PaymasterAndBundlerProviders;
    opts?: SmartAccountProviderOpts & {
        sendTxMaxRetries?: number;
        sendTxRetryIntervalMs?: number;
        feeOptions?: FeeOptions;
    };
};
export declare enum Operation {
    Call = 0,
    DelegateCall = 1
}
type UserOpDataOperationTypes<T> = T extends UserOperationCallData ? Operation.Call | Operation.DelegateCall : T extends BatchUserOperationCallData ? Operation.Call : never;
export declare class ZeroDevProvider extends SmartAccountProvider<HttpTransport> {
    protected projectId: string;
    protected sendTxMaxRetries: number;
    protected sendTxRetryIntervalMs: number;
    readonly bundlerProvider?: PaymasterAndBundlerProviders;
    private _txMaxRetries;
    private _txRetryIntervalMs;
    private _shouldConsume;
    feeOptions: Required<FeeOptions>;
    constructor({ projectId, chain, entryPointAddress, rpcUrl, bundlerRpcUrl, account, bundlerProvider, opts, }: ZeroDevProviderConfig);
    getProjectId: () => string;
    shouldConsume: () => boolean;
    sendTransaction: (request: RpcTransactionRequest, operation?: UserOpDataOperationTypes<UserOperationCallData>) => Promise<Hash>;
    buildUserOperation: <T extends UserOperationCallData | BatchUserOperationCallData>(data: T, overrides?: UserOperationOverrides, operation?: UserOpDataOperationTypes<T>) => Promise<UserOperationStruct>;
    private _runMiddlewareStack;
    sendUserOperation: <T extends UserOperationCallData | BatchUserOperationCallData>(data: T, overrides?: UserOperationOverrides, operation?: UserOpDataOperationTypes<T>) => Promise<SendUserOperationResult>;
    isReplacementOpError(errorIn: any): boolean;
    unwrapError(errorIn: any): Error;
    waitForUserOperationTransaction: (hash: Hash) => Promise<Hash>;
    getAccount: () => KernelSmartContractAccount;
    dummyPaymasterDataMiddleware: AccountMiddlewareFn;
    withZeroDevPaymasterAndData(config: PaymasterConfig<PaymasterPolicy>): this & SmartAccountProvider<HttpTransport> & {
        account: import("@alchemy/aa-core").BaseSmartContractAccount<HttpTransport>;
    };
    request: (args: {
        method: string;
        params?: any[];
    }) => Promise<any>;
}
export {};
//# sourceMappingURL=provider.d.ts.map