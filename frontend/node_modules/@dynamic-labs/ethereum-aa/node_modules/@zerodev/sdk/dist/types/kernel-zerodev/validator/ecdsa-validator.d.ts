import { type Address, type Hex, type SmartAccountSigner, type UserOperationRequest, type SignTypedDataParams } from "@alchemy/aa-core";
import { KernelBaseValidator, type KernelBaseValidatorParams } from "./base.js";
export interface ECDSAValidatorParams extends KernelBaseValidatorParams {
    owner: SmartAccountSigner;
}
export declare class ECDSAValidator extends KernelBaseValidator {
    protected owner: SmartAccountSigner;
    constructor(params: ECDSAValidatorParams);
    static init(params: ECDSAValidatorParams): Promise<ECDSAValidator>;
    signer(): Promise<SmartAccountSigner>;
    getOwner(): Promise<Hex>;
    getEnableData(): Promise<Hex>;
    encodeEnable(newOwner: Hex): Hex;
    encodeDisable(disableData?: Hex): Hex;
    getDummyUserOpSignature(): Promise<Hex>;
    isPluginEnabled(kernelAccountAddress: Address, selector: Hex): Promise<boolean>;
    signMessage(message: string | Uint8Array): Promise<Hex>;
    signTypedData(params: SignTypedDataParams): Promise<Hex>;
    signUserOp(userOp: UserOperationRequest): Promise<Hex>;
}
//# sourceMappingURL=ecdsa-validator.d.ts.map