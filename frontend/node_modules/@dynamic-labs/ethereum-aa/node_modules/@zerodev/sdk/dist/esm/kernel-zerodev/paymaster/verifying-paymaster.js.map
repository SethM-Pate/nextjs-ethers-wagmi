{"version":3,"file":"verifying-paymaster.js","sourceRoot":"","sources":["../../../../src/kernel-zerodev/paymaster/verifying-paymaster.ts"],"names":[],"mappings":"AAAA,OAAO,EAEL,WAAW,EACX,iBAAiB,GAClB,MAAM,kBAAkB,CAAC;AAC1B,OAAO,EAAE,SAAS,EAAE,MAAM,WAAW,CAAC;AAItC,MAAM,OAAO,kBAAmB,SAAQ,SAAS;IAC/C,YACE,QAAyB,EACzB,CAAyC;QAEzC,KAAK,CAAC,QAAQ,CAAC,CAAC;IAClB,CAAC;IACD,KAAK,CAAC,oBAAoB,CACxB,MAA2B,EAC3B,iBAAgD,EAChD,iBAA2B,EAC3B,aAAuB;QAEvB,MAAM,cAAc,GAAG,WAAW,CAAC,MAAM,iBAAiB,CAAC,MAAM,CAAC,CAAC,CAAC;QACpE,MAAM,aAAa,GAAG,MAAM,IAAI,CAAC,UAAU,CAAC;YAC1C,MAAM,EAAE,cAAc;YACtB,iBAAiB;YACjB,iBAAiB;YACjB,aAAa;SACd,CAAC,CAAC;QACH,OAAO,aAAa,CAAC;IACvB,CAAC;CACF","sourcesContent":["import {\n  type UserOperationStruct,\n  deepHexlify,\n  resolveProperties,\n} from \"@alchemy/aa-core\";\nimport { Paymaster } from \"./base.js\";\nimport type { ZeroDevProvider } from \"../provider.js\";\nimport type { PaymasterAndBundlerProviders, PaymasterConfig } from \"./types.js\";\n\nexport class VerifyingPaymaster extends Paymaster {\n  constructor(\n    provider: ZeroDevProvider,\n    _: PaymasterConfig<\"VERIFYING_PAYMASTER\">\n  ) {\n    super(provider);\n  }\n  async getPaymasterResponse(\n    struct: UserOperationStruct,\n    paymasterProvider?: PaymasterAndBundlerProviders,\n    shouldOverrideFee?: boolean,\n    shouldConsume?: boolean\n  ): Promise<UserOperationStruct | undefined> {\n    const hexifiedUserOp = deepHexlify(await resolveProperties(struct));\n    const paymasterResp = await this.signUserOp({\n      userOp: hexifiedUserOp,\n      paymasterProvider,\n      shouldOverrideFee,\n      shouldConsume,\n    });\n    return paymasterResp;\n  }\n}\n"]}