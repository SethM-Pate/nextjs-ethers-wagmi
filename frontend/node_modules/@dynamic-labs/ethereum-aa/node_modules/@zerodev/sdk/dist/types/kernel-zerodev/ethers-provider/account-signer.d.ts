import { type AccountMiddlewareFn, type FeeDataMiddleware, type GasEstimatorMiddleware, type PaymasterAndDataMiddleware, type PublicErc4337Client, type SignTypedDataParams } from "@alchemy/aa-core";
import { Signer, type TypedDataSigner, type TypedDataDomain, type TypedDataField } from "@ethersproject/abstract-signer";
import type { Deferrable } from "@ethersproject/properties";
import { type TransactionRequest, type TransactionResponse } from "@ethersproject/providers";
import { ZeroDevEthersProvider } from "./ethers-provider.js";
import type { SupportedValidators } from "../validator/types.js";
import type { Hex } from "viem";
export declare class ZeroDevAccountSigner<V extends SupportedValidators> extends Signer implements TypedDataSigner {
    readonly provider: ZeroDevEthersProvider<V>;
    private account?;
    sendUserOperation: (<T extends import("@alchemy/aa-core").UserOperationCallData | import("@alchemy/aa-core").BatchUserOperationCallData>(data: T, overrides?: import("@alchemy/aa-core").UserOperationOverrides | undefined, operation?: T extends import("@alchemy/aa-core").UserOperationCallData ? import("../provider.js").Operation : T extends import("@alchemy/aa-core").BatchUserOperationCallData ? import("../provider.js").Operation.Call : never) => Promise<import("@alchemy/aa-core").SendUserOperationResult>) | (<T_1 extends import("@alchemy/aa-core").UserOperationCallData | import("@alchemy/aa-core").BatchUserOperationCallData>(data: T_1, overrides?: import("@alchemy/aa-core").UserOperationOverrides | undefined, operation?: T_1 extends import("@alchemy/aa-core").UserOperationCallData ? import("../provider.js").Operation : T_1 extends import("@alchemy/aa-core").BatchUserOperationCallData ? import("../provider.js").Operation.Call : never) => Promise<import("@alchemy/aa-core").SendUserOperationResult>) | (<T_2 extends import("@alchemy/aa-core").UserOperationCallData | import("@alchemy/aa-core").BatchUserOperationCallData>(data: T_2, overrides?: import("@alchemy/aa-core").UserOperationOverrides | undefined, operation?: T_2 extends import("@alchemy/aa-core").UserOperationCallData ? import("../provider.js").Operation : T_2 extends import("@alchemy/aa-core").BatchUserOperationCallData ? import("../provider.js").Operation.Call : never) => Promise<import("@alchemy/aa-core").SendUserOperationResult>) | (<T_3 extends import("@alchemy/aa-core").UserOperationCallData | import("@alchemy/aa-core").BatchUserOperationCallData>(data: T_3, overrides?: import("@alchemy/aa-core").UserOperationOverrides | undefined, operation?: T_3 extends import("@alchemy/aa-core").UserOperationCallData ? import("../provider.js").Operation : T_3 extends import("@alchemy/aa-core").BatchUserOperationCallData ? import("../provider.js").Operation.Call : never) => Promise<import("@alchemy/aa-core").SendUserOperationResult>) | (<T_4 extends import("@alchemy/aa-core").UserOperationCallData | import("@alchemy/aa-core").BatchUserOperationCallData>(data: T_4, overrides?: import("@alchemy/aa-core").UserOperationOverrides | undefined, operation?: T_4 extends import("@alchemy/aa-core").UserOperationCallData ? import("../provider.js").Operation : T_4 extends import("@alchemy/aa-core").BatchUserOperationCallData ? import("../provider.js").Operation.Call : never) => Promise<import("@alchemy/aa-core").SendUserOperationResult>);
    waitForUserOperationTransaction: ((hash: `0x${string}`) => Promise<`0x${string}`>) | ((hash: `0x${string}`) => Promise<`0x${string}`>) | ((hash: `0x${string}`) => Promise<`0x${string}`>) | ((hash: `0x${string}`) => Promise<`0x${string}`>) | ((hash: `0x${string}`) => Promise<`0x${string}`>);
    constructor(provider: ZeroDevEthersProvider<V>);
    getAddress(): Promise<Hex>;
    signMessage(message: string | Uint8Array): Promise<string>;
    signTypedData(params: SignTypedDataParams): Promise<string>;
    _signTypedData(domain: TypedDataDomain, types: Record<string, Array<TypedDataField>>, value: Record<string, any>): Promise<string>;
    signMessageWith6492(_msg: string | Uint8Array): Promise<Hex>;
    signTypedDataWith6492(params: SignTypedDataParams): Promise<Hex>;
    withPaymasterMiddleware: (overrides: {
        dummyPaymasterDataMiddleware?: PaymasterAndDataMiddleware;
        paymasterDataMiddleware?: PaymasterAndDataMiddleware;
    }) => this;
    withGasEstimator: (override: GasEstimatorMiddleware) => this;
    withFeeDataGetter: (override: FeeDataMiddleware) => this;
    withCustomMiddleware: (override: AccountMiddlewareFn) => this;
    sendTransaction(transaction: Deferrable<TransactionRequest>): Promise<TransactionResponse>;
    signTransaction(_transaction: Deferrable<TransactionRequest>): Promise<string>;
    getPublicErc4337Client(): PublicErc4337Client;
    connect(provider: ZeroDevEthersProvider<V>): ZeroDevAccountSigner<V>;
}
//# sourceMappingURL=account-signer.d.ts.map