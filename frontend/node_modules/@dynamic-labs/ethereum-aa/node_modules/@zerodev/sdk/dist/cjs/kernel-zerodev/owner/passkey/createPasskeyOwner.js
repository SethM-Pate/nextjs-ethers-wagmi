"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.createPasskeyOwner = void 0;
const http_1 = require("@turnkey/http");
const axios_1 = __importDefault(require("axios"));
const utils_js_1 = require("./utils.js");
const constants_js_1 = require("../../constants.js");
const exceptions_js_1 = require("./exceptions.js");
async function createPasskeyOwner({ name, projectId, withCredentials = false, fallback, apiUrl = constants_js_1.API_URL, }) {
    if (typeof window !== "undefined") {
        const challenge = (0, utils_js_1.generateRandomBuffer)();
        let credentials = undefined;
        if (withCredentials) {
            credentials = await (0, utils_js_1.getCredentials)(projectId, name);
        }
        if (credentials && credentials?.length >= 64) {
            throw new exceptions_js_1.UsernameIsAlreadyUsed();
        }
        try {
            (0, utils_js_1.abortWebauthn)();
            const attestation = await (0, http_1.getWebAuthnAttestation)({
                publicKey: {
                    rp: {
                        id: window.location.hostname,
                        name: window.location.hostname,
                    },
                    authenticatorSelection: {
                        residentKey: "required",
                        userVerification: "required",
                    },
                    excludeCredentials: credentials,
                    extensions: { credProps: true },
                    challenge,
                    pubKeyCredParams: [
                        {
                            type: utils_js_1.publicKey,
                            alg: utils_js_1.es256,
                        },
                    ],
                    user: {
                        id: Uint8Array.from(name, (c) => c.charCodeAt(0)),
                        name,
                        displayName: name,
                    },
                },
            });
            const response = await axios_1.default.post(`${apiUrl}/projects/${projectId}/wallets`, {
                challenge: (0, utils_js_1.base64UrlEncode)(challenge),
                name,
                attestation,
            });
            const { id, walletId, address } = await response.data;
            const owner = {
                getAddress: async () => address,
                signMessage: (msg) => (0, utils_js_1.signMessage)(msg, id, walletId, projectId, attestation.credentialId, apiUrl),
                signTypedData: (params) => (0, utils_js_1.signTypedData)(params, id, walletId, projectId, attestation.credentialId, apiUrl),
            };
            return owner;
        }
        catch (e) {
            if (e instanceof DOMException && e.name === "InvalidStateError") {
                if (fallback)
                    return await fallback();
            }
            console.log(e);
        }
    }
    return;
}
exports.createPasskeyOwner = createPasskeyOwner;
//# sourceMappingURL=createPasskeyOwner.js.map