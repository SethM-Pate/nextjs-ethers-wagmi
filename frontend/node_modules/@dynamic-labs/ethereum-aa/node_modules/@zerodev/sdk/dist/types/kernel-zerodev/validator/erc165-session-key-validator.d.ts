import { type Address, type Hex, type SmartAccountSigner, type UserOperationRequest, type SignTypedDataParams } from "@alchemy/aa-core";
import { KernelBaseValidator, type KernelBaseValidatorParams } from "./base.js";
export interface ERC165SessionKeyValidatorParams extends KernelBaseValidatorParams {
    sessionKey: SmartAccountSigner;
    sessionKeyData: SessionKeyData;
}
interface SessionKeyData {
    selector: Hex;
    erc165InterfaceId: Hex;
    validUntil: number;
    validAfter: number;
    addressOffset: number;
}
export declare class ERC165SessionKeyValidator extends KernelBaseValidator {
    protected sessionKey: SmartAccountSigner;
    sessionKeyData: SessionKeyData;
    constructor(params: ERC165SessionKeyValidatorParams);
    static init(params: ERC165SessionKeyValidatorParams): Promise<ERC165SessionKeyValidator>;
    signer(): Promise<SmartAccountSigner>;
    getEnableData(): Promise<Hex>;
    isPluginEnabled(kernelAccountAddress: Address, selector: Hex): Promise<boolean>;
    getDummyUserOpSignature(): Promise<Hex>;
    encodeEnable(sessionKeyEnableData: Hex): Hex;
    encodeDisable(sessionKey: Hex): Hex;
    signMessage(message: string | Uint8Array): Promise<Hex>;
    signTypedData(params: SignTypedDataParams): Promise<Hex>;
    signUserOp(userOp: UserOperationRequest): Promise<Hex>;
}
export {};
//# sourceMappingURL=erc165-session-key-validator.d.ts.map