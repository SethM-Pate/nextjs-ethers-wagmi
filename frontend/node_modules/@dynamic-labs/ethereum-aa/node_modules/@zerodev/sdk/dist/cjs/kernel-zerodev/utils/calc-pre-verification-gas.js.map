{"version":3,"file":"calc-pre-verification-gas.js","sourceRoot":"","sources":["../../../../src/kernel-zerodev/utils/calc-pre-verification-gas.ts"],"names":[],"mappings":";;;AACA,+BAAsC;AACtC,yDAAgD;AAyCnC,QAAA,mBAAmB,GAAiB;IAC/C,KAAK,EAAE,KAAK;IACZ,SAAS,EAAE,KAAK;IAChB,aAAa,EAAE,CAAC;IAChB,QAAQ,EAAE,CAAC;IACX,WAAW,EAAE,EAAE;IACf,UAAU,EAAE,CAAC;IACb,OAAO,EAAE,EAAE;CACZ,CAAC;AAaF,SAAgB,sBAAsB,CACpC,MAAgD,EAChD,SAAiC;IAEjC,MAAM,EAAE,GAAG,EAAE,GAAG,2BAAmB,EAAE,GAAG,CAAC,SAAS,IAAI,EAAE,CAAC,EAAE,CAAC;IAC5D,MAAM,CAAC,GAAoC;QAEzC,kBAAkB,EAAE,KAAK;QACzB,SAAS,EAAE,IAAA,YAAK,EAAC,MAAM,CAAC,KAAK,CAAC,EAAE,CAAC,OAAO,EAAE,CAAC,CAAC,CAAC;QAC7C,GAAG,MAAM;KACH,CAAC;IAET,MAAM,MAAM,GAAG,IAAA,cAAO,EAAC,IAAA,6BAAU,EAAC,CAAC,EAAE,KAAK,CAAC,CAAC,CAAC;IAC7C,MAAM,YAAY,GAAG,MAAM;SACxB,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,QAAQ,CAAC,CAAC,CAAC,EAAE,CAAC,WAAW,CAAC,CAAC;SACpD,MAAM,CAAC,CAAC,GAAG,EAAE,CAAC,EAAE,EAAE,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC;IAC/B,MAAM,GAAG,GAAG,IAAI,CAAC,KAAK,CACpB,YAAY;QACV,EAAE,CAAC,KAAK,GAAG,EAAE,CAAC,UAAU;QACxB,EAAE,CAAC,SAAS;QACZ,EAAE,CAAC,aAAa,GAAG,MAAM,CAAC,MAAM,CACnC,CAAC;IACF,OAAO,GAAG,CAAC;AACb,CAAC;AAvBD,wDAuBC","sourcesContent":["import type { UserOperationStruct } from \"@alchemy/aa-core\";\nimport { toBytes, toHex } from \"viem\";\nimport { packUserOp } from \"./ERC4337-utils.js\";\n\nexport interface GasOverheads {\n  /**\n   * fixed overhead for entire handleOp bundle.\n   */\n  fixed: number;\n\n  /**\n   * per userOp overhead, added on top of the above fixed per-bundle.\n   */\n  perUserOp: number;\n\n  /**\n   * overhead for userOp word (32 bytes) block\n   */\n  perUserOpWord: number;\n\n  // perCallDataWord: number\n\n  /**\n   * zero byte cost, for calldata gas cost calculations\n   */\n  zeroByte: number;\n\n  /**\n   * non-zero byte cost, for calldata gas cost calculations\n   */\n  nonZeroByte: number;\n\n  /**\n   * expected bundle size, to split per-bundle overhead between all ops.\n   */\n  bundleSize: number;\n\n  /**\n   * expected length of the userOp signature.\n   */\n  sigSize: number;\n}\n\nexport const DefaultGasOverheads: GasOverheads = {\n  fixed: 21000,\n  perUserOp: 18300,\n  perUserOpWord: 4,\n  zeroByte: 4,\n  nonZeroByte: 16,\n  bundleSize: 1,\n  sigSize: 65,\n};\n\nexport type NotPromise<T> = {\n  [P in keyof T]: Exclude<T[P], Promise<any>>;\n};\n\n/**\n * calculate the preVerificationGas of the given UserOperation\n * preVerificationGas (by definition) is the cost overhead that can't be calculated on-chain.\n * it is based on parameters that are defined by the Ethereum protocol for external transactions.\n * @param userOp filled userOp to calculate. The only possible missing fields can be the signature and preVerificationGas itself\n * @param overheads gas overheads to use, to override the default values\n */\nexport function calcPreVerificationGas(\n  userOp: Partial<NotPromise<UserOperationStruct>>,\n  overheads?: Partial<GasOverheads>\n): number {\n  const ov = { ...DefaultGasOverheads, ...(overheads ?? {}) };\n  const p: NotPromise<UserOperationStruct> = {\n    // dummy values, in case the UserOp is incomplete.\n    preVerificationGas: 21000, // dummy value, just for calldata cost\n    signature: toHex(Buffer.alloc(ov.sigSize, 1)), // dummy signature\n    ...userOp,\n  } as any;\n\n  const packed = toBytes(packUserOp(p, false));\n  const callDataCost = packed\n    .map((x) => (x === 0 ? ov.zeroByte : ov.nonZeroByte))\n    .reduce((sum, x) => sum + x);\n  const ret = Math.round(\n    callDataCost +\n      ov.fixed / ov.bundleSize +\n      ov.perUserOp +\n      ov.perUserOpWord * packed.length\n  );\n  return ret;\n}\n"]}