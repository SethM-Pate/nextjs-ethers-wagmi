"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.zeroDevPaymasterAndDataMiddleware = exports.withZeroDevPaymasterAndData = void 0;
const index_js_1 = require("../paymaster/index.js");
const axios_1 = require("axios");
const withZeroDevPaymasterAndData = (provider, paymasterConfig) => {
    provider.withPaymasterMiddleware((0, exports.zeroDevPaymasterAndDataMiddleware)(provider, paymasterConfig));
    return provider;
};
exports.withZeroDevPaymasterAndData = withZeroDevPaymasterAndData;
const zeroDevPaymasterAndDataMiddleware = (provider, paymasterConfig) => {
    return {
        dummyPaymasterDataMiddleware: async (struct) => {
            struct.paymasterAndData =
                "0xe93eca6595fe94091dc1af46aac2a8b5d79907700000000000000000000000000000000000000000000000000000000064ee5cd9000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000fffffffffffffffffffffffffffffff0000000000000000000000000000000007aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa1c";
            return struct;
        },
        paymasterDataMiddleware: async (struct) => {
            const preVerificationGas = BigInt("100000");
            const verificationGasLimit = BigInt("1000000");
            const callGasLimit = BigInt("55000");
            const paymaster = new index_js_1.Paymasters[paymasterConfig.policy](provider, paymasterConfig);
            let paymasterResp;
            try {
                paymasterResp = await paymaster.getPaymasterResponse({
                    ...struct,
                    preVerificationGas,
                    verificationGasLimit,
                    callGasLimit,
                }, paymasterConfig.paymasterProvider, false, provider.shouldConsume());
            }
            catch (error) {
                console.error(error);
                if (paymasterConfig.onlySendSponsoredTransaction) {
                    if (error instanceof axios_1.AxiosError)
                        throw Error(error.response?.data.message);
                    else
                        throw error;
                }
            }
            if (paymasterConfig.onlySendSponsoredTransaction &&
                (!paymasterResp ||
                    !paymasterResp.paymasterAndData ||
                    paymasterResp.paymasterAndData === "0x")) {
                throw new Error("Transaction is not sponsored");
            }
            if (!paymasterResp ||
                !paymasterResp.paymasterAndData ||
                paymasterResp.paymasterAndData === "0x") {
                return {
                    ...struct,
                    paymasterAndData: "0x",
                };
            }
            return {
                ...struct,
                ...paymasterResp,
            };
        },
    };
};
exports.zeroDevPaymasterAndDataMiddleware = zeroDevPaymasterAndDataMiddleware;
//# sourceMappingURL=paymaster.js.map