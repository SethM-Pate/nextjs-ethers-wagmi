{"version":3,"file":"createPasskeyOwner.js","sourceRoot":"","sources":["../../../../../src/kernel-zerodev/owner/passkey/createPasskeyOwner.ts"],"names":[],"mappings":"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","sourcesContent":["import { getWebAuthnAttestation } from \"@turnkey/http\";\nimport axios from \"axios\";\nimport type { SignTypedDataParams, SmartAccountSigner } from \"@alchemy/aa-core\";\nimport {\n  abortWebauthn,\n  base64UrlEncode,\n  es256,\n  generateRandomBuffer,\n  getCredentials,\n  publicKey,\n  signMessage,\n  signTypedData,\n} from \"./utils.js\";\nimport { API_URL } from \"../../constants.js\";\nimport { UsernameIsAlreadyUsed } from \"./exceptions.js\";\n\nexport async function createPasskeyOwner({\n  name,\n  projectId,\n  withCredentials = false,\n  fallback,\n  apiUrl = API_URL,\n}: {\n  name: string;\n  projectId: string;\n  withCredentials?: boolean;\n  fallback?: () => Promise<SmartAccountSigner | undefined>;\n  apiUrl?: string;\n}): Promise<SmartAccountSigner | undefined> {\n  if (typeof window !== \"undefined\") {\n    const challenge = generateRandomBuffer();\n    let credentials = undefined;\n    if (withCredentials) {\n      credentials = await getCredentials(projectId, name);\n    }\n    if (credentials && credentials?.length >= 64) {\n      throw new UsernameIsAlreadyUsed();\n    }\n\n    try {\n      abortWebauthn();\n      const attestation = await getWebAuthnAttestation({\n        publicKey: {\n          rp: {\n            id: window.location.hostname,\n            name: window.location.hostname,\n          },\n          authenticatorSelection: {\n            residentKey: \"required\", // or 'preferred', 'discouraged'\n            userVerification: \"required\",\n          },\n          excludeCredentials: credentials,\n          extensions: { credProps: true },\n          challenge,\n          pubKeyCredParams: [\n            {\n              type: publicKey,\n              alg: es256,\n            },\n          ],\n          user: {\n            id: Uint8Array.from(name, (c) => c.charCodeAt(0)),\n            name,\n            displayName: name,\n          },\n        },\n      });\n      const response = await axios.post(\n        `${apiUrl}/projects/${projectId}/wallets`,\n        {\n          challenge: base64UrlEncode(challenge),\n          name,\n          attestation,\n        }\n      );\n      const { id, walletId, address } = await response.data;\n      const owner: SmartAccountSigner = {\n        getAddress: async () => address,\n        signMessage: (msg) =>\n          signMessage(\n            msg,\n            id,\n            walletId,\n            projectId,\n            attestation.credentialId,\n            apiUrl\n          ),\n        signTypedData: (params: SignTypedDataParams) =>\n          signTypedData(\n            params,\n            id,\n            walletId,\n            projectId,\n            attestation.credentialId,\n            apiUrl\n          ),\n      };\n      return owner;\n    } catch (e) {\n      if (e instanceof DOMException && e.name === \"InvalidStateError\") {\n        if (fallback) return await fallback();\n      }\n      console.log(e);\n    }\n  }\n  return;\n}\n"]}