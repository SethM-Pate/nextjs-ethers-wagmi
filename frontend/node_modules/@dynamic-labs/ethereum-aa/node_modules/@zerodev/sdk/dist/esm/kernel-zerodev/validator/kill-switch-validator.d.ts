import { type Address, type Hex, type SmartAccountSigner, type UserOperationRequest, type SignTypedDataParams } from "@alchemy/aa-core";
import { KernelBaseValidator, type KernelBaseValidatorParams } from "./base.js";
export interface KillSwitchValidatorParams extends KernelBaseValidatorParams {
    guardian: SmartAccountSigner;
    delaySeconds: number;
}
export declare class KillSwitchValidator extends KernelBaseValidator {
    protected guardian: SmartAccountSigner;
    protected delaySeconds: number;
    constructor(params: KillSwitchValidatorParams);
    static init(params: KillSwitchValidatorParams): Promise<KillSwitchValidator>;
    signer(): Promise<SmartAccountSigner>;
    getEnableData(): Promise<Hex>;
    getPausedUntil(): number;
    encodeEnable(newGuardian: Hex): Hex;
    encodeDisable(disableData?: Hex): Hex;
    isPluginEnabled(kernelAccountAddress: Address, selector: Hex): Promise<boolean>;
    getDummyUserOpSignature(): Promise<Hex>;
    signMessage(message: string | Uint8Array): Promise<Hex>;
    signTypedData(params: SignTypedDataParams): Promise<Hex>;
    signUserOp(userOp: UserOperationRequest): Promise<Hex>;
}
