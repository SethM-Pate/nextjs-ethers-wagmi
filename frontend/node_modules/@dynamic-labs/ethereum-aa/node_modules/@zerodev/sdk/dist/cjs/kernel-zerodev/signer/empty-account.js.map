{"version":3,"file":"empty-account.js","sourceRoot":"","sources":["../../../../src/kernel-zerodev/signer/empty-account.ts"],"names":[],"mappings":";;;AAGA,MAAa,kBAAkB;IAE7B,YAAY,KAAU;QADd;;;;;WAAW;QAKV;;;;mBAAoE,CAC3E,IAAI,EACJ,EAAE;gBACF,MAAM,KAAK,CAAC,4CAA4C,CAAC,CAAC;YAC5D,CAAC;WAAC;QAEO;;;;mBAAgB,CAAC,OAA4B,EAAE,EAAE;gBACxD,MAAM,KAAK,CAAC,4CAA4C,CAAC,CAAC;YAC5D,CAAC;WAAC;QAEO;;;;mBAA2C,KAAK,IAAI,EAAE;gBAC7D,OAAO,IAAI,CAAC,KAAK,CAAC;YACpB,CAAC;WAAC;QAfA,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;IACrB,CAAC;IAgBD,MAAM,CAAC,sBAAsB,CAAC,YAAiB;QAC7C,OAAO,IAAI,kBAAkB,CAAC,YAAY,CAAC,CAAC;IAC9C,CAAC;CACF;AAvBD,gDAuBC","sourcesContent":["import type { SignTypedDataParams, SmartAccountSigner } from \"@alchemy/aa-core\";\nimport { type Hex } from \"viem\";\n\nexport class EmptyAccountSigner implements SmartAccountSigner {\n  private owner: Hex;\n  constructor(owner: Hex) {\n    this.owner = owner;\n  }\n\n  readonly signMessage: (msg: string | Uint8Array) => Promise<`0x${string}`> = (\n    _msg\n  ) => {\n    throw Error(\"EmptyAccountSigner: method not implemented\");\n  };\n\n  readonly signTypedData = (_params: SignTypedDataParams) => {\n    throw Error(\"EmptyAccountSigner: method not implemented\");\n  };\n\n  readonly getAddress: () => Promise<`0x${string}`> = async () => {\n    return this.owner;\n  };\n\n  static addressToAccountSigner(ownerAddress: Hex): EmptyAccountSigner {\n    return new EmptyAccountSigner(ownerAddress);\n  }\n}\n"]}