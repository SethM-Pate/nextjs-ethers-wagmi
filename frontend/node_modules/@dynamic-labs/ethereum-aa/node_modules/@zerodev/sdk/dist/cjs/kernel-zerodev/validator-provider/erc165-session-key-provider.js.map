{"version":3,"file":"erc165-session-key-provider.js","sourceRoot":"","sources":["../../../../src/kernel-zerodev/validator-provider/erc165-session-key-provider.ts"],"names":[],"mappings":";;;AAAA,uCAGmB;AACnB,kGAGsD;AACtD,8CAA6C;AAC7C,wCAA4C;AAC5C,kDAAuE;AACvE,0CAAuC;AAEvC,MAAa,wBAAyB,SAAQ,2BAG7C;IACC,YACE,MAAwE;QAExE,MAAM,KAAK,GACT,OAAO,MAAM,CAAC,IAAI,EAAE,cAAc,EAAE,KAAK,KAAK,QAAQ;YACpD,CAAC,CAAC,IAAA,mBAAQ,EAAC,MAAM,CAAC,IAAI,CAAC,cAAc,CAAC,KAAK,CAAC;YAC5C,CAAC,CAAC,MAAM,CAAC,IAAI,EAAE,cAAc,EAAE,KAAK,IAAI,sBAAa,CAAC;QAC1D,MAAM,SAAS,GAAG,IAAI,2DAAyB,CAAC;YAC9C,SAAS,EAAE,MAAM,CAAC,SAAS;YAC3B,UAAU,EAAE,MAAM,CAAC,UAAU;YAC7B,cAAc,EAAE,MAAM,CAAC,cAAc;YACrC,KAAK;YACL,MAAM,EAAE,MAAM,CAAC,IAAI,EAAE,cAAc,EAAE,MAAM;YAC3C,gBAAgB,EACd,MAAM,CAAC,IAAI,EAAE,eAAe,EAAE,gBAAgB;gBAC9C,mDAAoC;YACtC,GAAG,MAAM,CAAC,IAAI,EAAE,eAAe;SAChC,CAAC,CAAC;QACH,KAAK,CACH;YACE,GAAG,MAAM;YACT,IAAI,EAAE;gBACJ,GAAG,MAAM,CAAC,IAAI;gBACd,cAAc,EAAE,EAAE,GAAG,MAAM,CAAC,IAAI,EAAE,cAAc,EAAE,KAAK,EAAE;aAC1D;SACF,EACD,SAAS,CACV,CAAC;QAwBJ;;;;mBAAiB,IAAI,CAAC,uBAAuB;WAAC;QAE9C;;;;mBAA6B,IAAI,CAAC,wBAAwB;WAAC;IAzB3D,CAAC;IAEM,MAAM,CAAC,KAAK,CAAC,IAAI,CACtB,MAAwE;QAExE,MAAM,OAAO,GAAG,MAAM,IAAA,qBAAU,EAAC,MAAM,CAAC,SAAS,CAAC,CAAC;QACnD,IAAI,CAAC,OAAO,EAAE;YACZ,MAAM,IAAI,KAAK,CAAC,mBAAmB,CAAC,CAAC;SACtC;QACD,MAAM,KAAK,GAAG,IAAA,mBAAQ,EAAC,OAAO,CAAC,CAAC;QAChC,MAAM,QAAQ,GAAG,IAAI,wBAAwB,CAAC;YAC5C,GAAG,MAAM;YACT,IAAI,EAAE;gBACJ,GAAG,MAAM,CAAC,IAAI;gBACd,cAAc,EAAE;oBACd,KAAK;oBACL,GAAG,MAAM,CAAC,IAAI,EAAE,cAAc;iBAC/B;aACF;SACF,CAAC,CAAC;QACH,OAAO,QAAQ,CAAC;IAClB,CAAC;CAKF;AA1DD,4DA0DC","sourcesContent":["import {\n  ValidatorProvider,\n  type ExtendedValidatorProviderParams,\n} from \"./base.js\";\nimport {\n  ERC165SessionKeyValidator,\n  type ERC165SessionKeyValidatorParams,\n} from \"../validator/erc165-session-key-validator.js\";\nimport { getChainId } from \"../api/index.js\";\nimport { polygonMumbai } from \"viem/chains\";\nimport { ERC165_SESSION_KEY_VALIDATOR_ADDRESS } from \"../constants.js\";\nimport { getChain } from \"../utils.js\";\n\nexport class ERC165SessionKeyProvider extends ValidatorProvider<\n  ERC165SessionKeyValidator,\n  ERC165SessionKeyValidatorParams\n> {\n  constructor(\n    params: ExtendedValidatorProviderParams<ERC165SessionKeyValidatorParams>\n  ) {\n    const chain =\n      typeof params.opts?.providerConfig?.chain === \"number\"\n        ? getChain(params.opts.providerConfig.chain)\n        : params.opts?.providerConfig?.chain ?? polygonMumbai;\n    const validator = new ERC165SessionKeyValidator({\n      projectId: params.projectId,\n      sessionKey: params.sessionKey,\n      sessionKeyData: params.sessionKeyData,\n      chain,\n      rpcUrl: params.opts?.providerConfig?.rpcUrl,\n      validatorAddress:\n        params.opts?.validatorConfig?.validatorAddress ??\n        ERC165_SESSION_KEY_VALIDATOR_ADDRESS,\n      ...params.opts?.validatorConfig,\n    });\n    super(\n      {\n        ...params,\n        opts: {\n          ...params.opts,\n          providerConfig: { ...params.opts?.providerConfig, chain },\n        },\n      },\n      validator\n    );\n  }\n\n  public static async init(\n    params: ExtendedValidatorProviderParams<ERC165SessionKeyValidatorParams>\n  ): Promise<ERC165SessionKeyProvider> {\n    const chainId = await getChainId(params.projectId);\n    if (!chainId) {\n      throw new Error(\"ChainId not found\");\n    }\n    const chain = getChain(chainId);\n    const instance = new ERC165SessionKeyProvider({\n      ...params,\n      opts: {\n        ...params.opts,\n        providerConfig: {\n          chain,\n          ...params.opts?.providerConfig,\n        },\n      },\n    });\n    return instance;\n  }\n\n  changeGuardian = this.sendEnableUserOperation;\n\n  deleteERC165SessionKeyData = this.sendDisableUserOperation;\n}\n"]}