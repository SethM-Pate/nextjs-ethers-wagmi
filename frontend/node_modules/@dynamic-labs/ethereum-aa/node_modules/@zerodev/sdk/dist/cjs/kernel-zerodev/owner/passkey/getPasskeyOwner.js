"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getPasskeyOwner = void 0;
const webauthn_1 = require("@turnkey/http/dist/webauthn");
const axios_1 = __importDefault(require("axios"));
const utils_js_1 = require("./utils.js");
const constants_js_1 = require("../../constants.js");
async function getPasskeyOwner({ projectId, name, apiUrl = constants_js_1.API_URL, withCredentials = false, }) {
    if (typeof window !== "undefined") {
        const challenge = (0, utils_js_1.generateRandomBuffer)();
        try {
            (0, utils_js_1.abortWebauthn)();
            const assertion = JSON.parse(await (0, webauthn_1.getWebAuthnAssertion)((0, utils_js_1.base64UrlEncode)(challenge), {
                publicKey: {
                    rpId: window.location.hostname,
                    userVerification: "required",
                    allowCredentials: withCredentials
                        ? await (0, utils_js_1.getCredentials)(projectId, name)
                        : undefined,
                },
            }));
            const response = await axios_1.default.post(`${apiUrl}/projects/${projectId}/wallets/${assertion.credentialId}`, {
                challenge: (0, utils_js_1.base64UrlEncode)(challenge),
                assertion,
            });
            const { id, walletId, address } = await response.data;
            const owner = {
                getAddress: async () => address,
                signMessage: (msg) => (0, utils_js_1.signMessage)(msg, id, walletId, projectId, assertion.credentialId, apiUrl),
                signTypedData: (params) => (0, utils_js_1.signTypedData)(params, id, walletId, projectId, assertion.credentialId, apiUrl),
            };
            return owner;
        }
        catch (e) {
            console.log(e);
        }
    }
    return;
}
exports.getPasskeyOwner = getPasskeyOwner;
//# sourceMappingURL=getPasskeyOwner.js.map