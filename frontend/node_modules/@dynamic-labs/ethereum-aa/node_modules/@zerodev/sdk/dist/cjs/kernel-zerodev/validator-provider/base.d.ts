import { type Hex, type SendUserOperationResult } from "@alchemy/aa-core";
import { ZeroDevProvider, type ZeroDevProviderConfig } from "../provider.js";
import type { KernelBaseValidator, KernelBaseValidatorParams } from "../validator/base.js";
import type { PaymasterAndBundlerProviders, PaymasterConfig, PaymasterPolicy } from "../paymaster/types.js";
import { type KernelSmartAccountParams } from "../account.js";
import type { RequiredProps } from "../types.js";
export type ValidatorProviderParamsOpts<P extends KernelBaseValidatorParams> = {
    paymasterConfig?: PaymasterConfig<PaymasterPolicy>;
    providerConfig?: Partial<ZeroDevProviderConfig>;
    accountConfig?: Omit<KernelSmartAccountParams, keyof ExtendedValidatorProviderParams<P>>;
    validatorConfig?: Omit<P, keyof ExtendedValidatorProviderParams<P>>;
};
export interface ValidatorProviderParams<P extends KernelBaseValidatorParams> {
    projectId: string;
    bundlerProvider?: PaymasterAndBundlerProviders;
    opts?: ValidatorProviderParamsOpts<P>;
    usePaymaster?: boolean;
    defaultProvider?: ValidatorProvider<KernelBaseValidator, KernelBaseValidatorParams>;
}
export type ExtendedValidatorProviderParams<P extends KernelBaseValidatorParams> = ValidatorProviderParams<P> & RequiredProps<P>;
export declare abstract class ValidatorProvider<V extends KernelBaseValidator, P extends KernelBaseValidatorParams> extends ZeroDevProvider {
    protected defaultProvider?: ValidatorProvider<KernelBaseValidator, KernelBaseValidatorParams>;
    constructor(params: ExtendedValidatorProviderParams<P>, validator: KernelBaseValidator);
    getValidator: () => V;
    getEncodedEnableData: (enableData: Hex) => Promise<Hex>;
    getEncodedDisableData: (disableData?: Hex) => Promise<Hex>;
    sendEnableUserOperation: (enableData: Hex) => Promise<SendUserOperationResult>;
    sendDisableUserOperation: (disableData?: Hex) => Promise<SendUserOperationResult>;
}
