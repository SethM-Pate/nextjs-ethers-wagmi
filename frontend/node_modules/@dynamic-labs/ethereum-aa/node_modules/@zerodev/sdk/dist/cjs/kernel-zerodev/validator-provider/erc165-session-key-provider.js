"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ERC165SessionKeyProvider = void 0;
const base_js_1 = require("./base.js");
const erc165_session_key_validator_js_1 = require("../validator/erc165-session-key-validator.js");
const index_js_1 = require("../api/index.js");
const chains_1 = require("viem/chains");
const constants_js_1 = require("../constants.js");
const utils_js_1 = require("../utils.js");
class ERC165SessionKeyProvider extends base_js_1.ValidatorProvider {
    constructor(params) {
        const chain = typeof params.opts?.providerConfig?.chain === "number"
            ? (0, utils_js_1.getChain)(params.opts.providerConfig.chain)
            : params.opts?.providerConfig?.chain ?? chains_1.polygonMumbai;
        const validator = new erc165_session_key_validator_js_1.ERC165SessionKeyValidator({
            projectId: params.projectId,
            sessionKey: params.sessionKey,
            sessionKeyData: params.sessionKeyData,
            chain,
            rpcUrl: params.opts?.providerConfig?.rpcUrl,
            validatorAddress: params.opts?.validatorConfig?.validatorAddress ??
                constants_js_1.ERC165_SESSION_KEY_VALIDATOR_ADDRESS,
            ...params.opts?.validatorConfig,
        });
        super({
            ...params,
            opts: {
                ...params.opts,
                providerConfig: { ...params.opts?.providerConfig, chain },
            },
        }, validator);
        Object.defineProperty(this, "changeGuardian", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: this.sendEnableUserOperation
        });
        Object.defineProperty(this, "deleteERC165SessionKeyData", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: this.sendDisableUserOperation
        });
    }
    static async init(params) {
        const chainId = await (0, index_js_1.getChainId)(params.projectId);
        if (!chainId) {
            throw new Error("ChainId not found");
        }
        const chain = (0, utils_js_1.getChain)(chainId);
        const instance = new ERC165SessionKeyProvider({
            ...params,
            opts: {
                ...params.opts,
                providerConfig: {
                    chain,
                    ...params.opts?.providerConfig,
                },
            },
        });
        return instance;
    }
}
exports.ERC165SessionKeyProvider = ERC165SessionKeyProvider;
//# sourceMappingURL=erc165-session-key-provider.js.map