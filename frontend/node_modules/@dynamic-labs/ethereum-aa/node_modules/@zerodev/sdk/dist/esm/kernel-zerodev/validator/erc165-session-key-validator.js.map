{"version":3,"file":"erc165-session-key-validator.js","sourceRoot":"","sources":["../../../../src/kernel-zerodev/validator/erc165-session-key-validator.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  getUserOperationHash,\n  type Address,\n  type Hex,\n  type SmartAccountSigner,\n  type UserOperationRequest,\n  type SignTypedDataParams,\n} from \"@alchemy/aa-core\";\nimport {\n  KernelBaseValidator,\n  ValidatorMode,\n  type KernelBaseValidatorParams,\n} from \"./base.js\";\nimport { encodeFunctionData, toBytes, concat, pad, toHex } from \"viem\";\nimport { ERC165SessionKeyValidatorAbi } from \"../abis/ERC165SessionKeyValidatorAbi.js\";\nimport { DUMMY_ECDSA_SIG } from \"../constants.js\";\nimport { KernelAccountAbi } from \"../abis/KernelAccountAbi.js\";\nimport { getChainId } from \"../api/index.js\";\nimport { fixSignedData, getChain } from \"../utils.js\";\n\nexport interface ERC165SessionKeyValidatorParams\n  extends KernelBaseValidatorParams {\n  sessionKey: SmartAccountSigner;\n  sessionKeyData: SessionKeyData;\n}\n\ninterface SessionKeyData {\n  selector: Hex;\n  erc165InterfaceId: Hex;\n  validUntil: number;\n  validAfter: number;\n  addressOffset: number;\n}\n\nexport class ERC165SessionKeyValidator extends KernelBaseValidator {\n  protected sessionKey: SmartAccountSigner;\n  sessionKeyData: SessionKeyData;\n\n  constructor(params: ERC165SessionKeyValidatorParams) {\n    super(params);\n    this.sessionKey = params.sessionKey;\n    this.sessionKeyData = params.sessionKeyData;\n    this.mode = params.mode ?? ValidatorMode.plugin;\n  }\n\n  public static async init(\n    params: ERC165SessionKeyValidatorParams\n  ): Promise<ERC165SessionKeyValidator> {\n    const chainId = await getChainId(params.projectId);\n    if (!chainId) {\n      throw new Error(\"ChainId not found\");\n    }\n    const chain = getChain(chainId);\n    const instance = new ERC165SessionKeyValidator({ ...params, chain });\n    return instance;\n  }\n\n  async signer(): Promise<SmartAccountSigner> {\n    return await Promise.resolve(this.sessionKey);\n  }\n\n  async getEnableData(): Promise<Hex> {\n    return concat([\n      await this.sessionKey.getAddress(),\n      pad(this.sessionKeyData.erc165InterfaceId, { size: 4 }),\n      pad(this.sessionKeyData.selector, { size: 4 }),\n      pad(toHex(this.sessionKeyData.validUntil), { size: 6 }),\n      pad(toHex(this.sessionKeyData.validAfter), { size: 6 }),\n      pad(toHex(this.sessionKeyData.addressOffset), { size: 4 }),\n    ]);\n  }\n\n  async isPluginEnabled(\n    kernelAccountAddress: Address,\n    selector: Hex\n  ): Promise<boolean> {\n    if (!this.publicClient) {\n      throw new Error(\"Validator uninitialized: PublicClient missing\");\n    }\n    const execDetail = await this.publicClient.readContract({\n      abi: KernelAccountAbi,\n      address: kernelAccountAddress,\n      functionName: \"getExecution\",\n      args: [selector],\n    });\n    const enableData = await this.publicClient.readContract({\n      abi: ERC165SessionKeyValidatorAbi,\n      address: this.validatorAddress,\n      functionName: \"sessionKeys\",\n      args: [await this.sessionKey.getAddress(), kernelAccountAddress],\n    });\n    const enableDataHex = concat([\n      await this.sessionKey.getAddress(),\n      pad(enableData[2], { size: 4 }),\n      pad(enableData[1], { size: 4 }),\n      pad(toHex(enableData[3]), { size: 6 }),\n      pad(toHex(enableData[4]), { size: 6 }),\n      pad(toHex(enableData[5]), { size: 4 }),\n    ]);\n    return (\n      execDetail.validator.toLowerCase() ===\n        this.validatorAddress.toLowerCase() &&\n      enableData[0] &&\n      enableDataHex.toLowerCase() === (await this.getEnableData()).toLowerCase()\n    );\n  }\n\n  async getDummyUserOpSignature(): Promise<Hex> {\n    return DUMMY_ECDSA_SIG;\n  }\n\n  encodeEnable(sessionKeyEnableData: Hex): Hex {\n    return encodeFunctionData({\n      abi: ERC165SessionKeyValidatorAbi,\n      functionName: \"enable\",\n      args: [sessionKeyEnableData],\n    });\n  }\n\n  encodeDisable(sessionKey: Hex): Hex {\n    return encodeFunctionData({\n      abi: ERC165SessionKeyValidatorAbi,\n      functionName: \"disable\",\n      args: [sessionKey],\n    });\n  }\n\n  async signMessage(message: string | Uint8Array): Promise<Hex> {\n    return await this.sessionKey.signMessage(message);\n  }\n\n  async signTypedData(params: SignTypedDataParams): Promise<Hex> {\n    return fixSignedData(await this.sessionKey.signTypedData(params));\n  }\n\n  async signUserOp(userOp: UserOperationRequest): Promise<Hex> {\n    if (!this.chain) {\n      throw new Error(\"Validator uninitialized\");\n    }\n    const hash = getUserOperationHash(\n      {\n        ...userOp,\n        signature: \"0x\",\n      },\n      this.entryPointAddress,\n      BigInt(this.chain.id)\n    );\n    const formattedMessage = typeof hash === \"string\" ? toBytes(hash) : hash;\n    return await this.sessionKey.signMessage(formattedMessage);\n  }\n}\n"]}