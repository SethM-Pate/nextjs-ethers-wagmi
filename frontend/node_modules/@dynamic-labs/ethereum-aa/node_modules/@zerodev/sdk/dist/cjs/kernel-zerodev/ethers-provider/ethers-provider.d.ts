import { BaseSmartContractAccount, type AccountMiddlewareFn, type FeeDataMiddleware, type GasEstimatorMiddleware, type PaymasterAndDataMiddleware, type PublicErc4337Client } from "@alchemy/aa-core";
import { ZeroDevAccountSigner } from "./account-signer.js";
import { JsonRpcProvider } from "@ethersproject/providers";
import type { SupportedValidators } from "../validator/types.js";
import type { ValidatorProviderParamsMap, ValidatorProviderTypeMap } from "../validator-provider/types.js";
export declare class ZeroDevEthersProvider<V extends SupportedValidators> extends JsonRpcProvider {
    readonly accountProvider: ValidatorProviderTypeMap[V];
    constructor(validatorType: V, params: ValidatorProviderParamsMap[V]);
    static init<V extends SupportedValidators>(validatorType: V, params: ValidatorProviderParamsMap[V]): Promise<ZeroDevEthersProvider<V>>;
    getAccountProvider(): ValidatorProviderTypeMap[V];
    send(method: string, params: any[]): Promise<any>;
    connectToAccount(fn: (rpcClient: PublicErc4337Client) => BaseSmartContractAccount): ZeroDevAccountSigner<V>;
    getAccountSigner(): ZeroDevAccountSigner<V>;
    withPaymasterMiddleware: (overrides: {
        dummyPaymasterDataMiddleware?: PaymasterAndDataMiddleware;
        paymasterDataMiddleware?: PaymasterAndDataMiddleware;
    }) => this;
    withGasEstimator: (override: GasEstimatorMiddleware) => this;
    withFeeDataGetter: (override: FeeDataMiddleware) => this;
    withCustomMiddleware: (override: AccountMiddlewareFn) => this;
    getPublicErc4337Client(): PublicErc4337Client;
}
