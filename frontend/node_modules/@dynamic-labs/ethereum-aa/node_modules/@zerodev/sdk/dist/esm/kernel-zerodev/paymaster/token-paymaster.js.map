{"version":3,"file":"token-paymaster.js","sourceRoot":"","sources":["../../../../src/kernel-zerodev/paymaster/token-paymaster.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  type PromiseOrValue,\n  type BytesLike,\n  type UserOperationCallData,\n  type UserOperationStruct,\n  type BatchUserOperationCallData,\n} from \"@alchemy/aa-core\";\nimport axios from \"axios\";\nimport {\n  type Hex,\n  toHex,\n  decodeFunctionData,\n  encodeFunctionData,\n  isAddress,\n} from \"viem\";\nimport { ERC20Abi } from \"../abis/ERC20Abi.js\";\nimport { KernelAccountAbi } from \"../abis/KernelAccountAbi.js\";\nimport {\n  PAYMASTER_URL,\n  ENTRYPOINT_ADDRESS,\n  ERC20_APPROVAL_AMOUNT,\n  MULTISEND_ADDR,\n} from \"../constants.js\";\nimport {\n  AccountNotConnected,\n  IncorrectCallDataForTokenPaymaster,\n} from \"../errors.js\";\nimport type { ZeroDevProvider } from \"../provider.js\";\nimport {\n  getGasTokenAddress,\n  type UserOperationCallDataWithDelegate,\n} from \"../utils.js\";\nimport { Paymaster } from \"./base.js\";\nimport {\n  type PaymasterAndBundlerProviders,\n  type PaymasterConfig,\n} from \"./types.js\";\nimport { getChainId } from \"../api/index.js\";\nimport { MultiSendAbi } from \"../abis/MultiSendAbi.js\";\n\nexport function isBatchUserOperationCallData(\n  data: any\n): data is BatchUserOperationCallData {\n  return data && Array.isArray(data);\n}\nexport class TokenPaymaster extends Paymaster {\n  constructor(\n    provider: ZeroDevProvider,\n    protected paymasterConfig: PaymasterConfig<\"TOKEN_PAYMASTER\">\n  ) {\n    super(provider);\n  }\n  async getPaymasterAddress(\n    paymasterProvider?: PaymasterAndBundlerProviders\n  ): Promise<Hex | undefined> {\n    const chainId = await getChainId(this.provider.getProjectId());\n\n    try {\n      const { data: paymasterResp } = await axios.post(\n        `${PAYMASTER_URL}/getPaymasterAddress`,\n        {\n          chainId,\n          entryPointAddress: ENTRYPOINT_ADDRESS,\n          paymasterProvider,\n        },\n        { headers: { \"Content-Type\": \"application/json\" } }\n      );\n      return paymasterResp as Hex;\n    } catch (e) {\n      console.log(e);\n      return undefined;\n    }\n  }\n  async decodeMainCallFromCallData(\n    kernelAddress: PromiseOrValue<string>,\n    callData: PromiseOrValue<BytesLike>\n  ): Promise<\n    | UserOperationCallData\n    | BatchUserOperationCallData\n    | UserOperationCallDataWithDelegate\n    | undefined\n  > {\n    let data: Hex = \"0x\";\n    if (callData instanceof Promise) {\n      const _data = await callData;\n      if (_data instanceof Uint8Array) {\n        data = toHex(_data);\n      } else {\n        data = _data as Hex;\n      }\n    } else if (callData instanceof Uint8Array) {\n      data = toHex(callData);\n    } else {\n      data = callData as Hex;\n    }\n\n    try {\n      const { functionName, args } = decodeFunctionData({\n        abi: KernelAccountAbi,\n        data: data,\n      });\n      if (functionName === \"execute\") {\n        const [target, value, data] = args;\n        let msFuntionName;\n        try {\n          ({ functionName: msFuntionName } = decodeFunctionData({\n            abi: MultiSendAbi,\n            data,\n          }));\n        } catch (error) {}\n        let mainCall:\n          | UserOperationCallData\n          | UserOperationCallDataWithDelegate = {\n          target,\n          value: value ?? 0n,\n          data,\n        };\n        if (msFuntionName === \"multiSend\") {\n          mainCall = {\n            ...mainCall,\n            target: MULTISEND_ADDR,\n            delegateCall: true,\n            data,\n          };\n        }\n        return mainCall;\n      } else if (functionName === \"executeBatch\") {\n        const [txs] = args;\n        return txs.map((tx) => ({\n          target: tx.to,\n          value: tx.value ?? 0n,\n          data: tx.data,\n        }));\n      }\n    } catch (error) {\n      return {\n        target: (kernelAddress instanceof Promise\n          ? await kernelAddress\n          : kernelAddress) as Hex,\n        data,\n        value: 0n,\n        delegateCall: true,\n      };\n    }\n    return;\n  }\n\n  async getERC20UserOp<\n    T extends UserOperationCallData | BatchUserOperationCallData\n  >(\n    struct: UserOperationStruct,\n    mainCall: T,\n    gasTokenAddress: Hex,\n    paymasterAddress: Hex\n  ): Promise<UserOperationStruct | undefined> {\n    try {\n      const approveData: UserOperationCallData = {\n        target: gasTokenAddress,\n        value: BigInt(0),\n        data: encodeFunctionData({\n          abi: ERC20Abi,\n          functionName: \"approve\",\n          args: [paymasterAddress, ERC20_APPROVAL_AMOUNT[gasTokenAddress]],\n        }),\n      };\n      if (!this.provider.account) {\n        throw AccountNotConnected;\n      }\n\n      let calls: BatchUserOperationCallData;\n\n      if (isBatchUserOperationCallData(mainCall)) {\n        calls = [approveData, ...mainCall];\n      } else {\n        calls = [approveData, mainCall];\n      }\n      const erc20CallData = await this.provider.account.encodeBatchExecute(\n        calls\n      );\n      return {\n        ...struct,\n        callData: erc20CallData,\n        callGasLimit: await this.provider.rpcClient.estimateGas({\n          account: ENTRYPOINT_ADDRESS,\n          to: await this.provider.getAddress(),\n          data: erc20CallData,\n        }),\n        signature: await this.provider\n          .getAccount()\n          .getValidator()\n          .getDynamicDummySignature(\n            (await struct.sender) as Hex,\n            erc20CallData\n          ),\n      };\n    } catch (error) {\n      return;\n    }\n  }\n\n  async getPaymasterResponse(\n    struct: UserOperationStruct,\n    paymasterProvider?: PaymasterAndBundlerProviders,\n    shouldOverrideFee?: boolean,\n    shouldConsume?: boolean\n  ): Promise<UserOperationStruct | undefined> {\n    const mainCall = await this.decodeMainCallFromCallData(\n      struct.sender,\n      struct.callData\n    );\n    if (!mainCall) {\n      throw IncorrectCallDataForTokenPaymaster;\n    }\n    const chainId = await getChainId(this.provider.getProjectId());\n    if (!chainId) {\n      throw new Error(\"ChainId not found\");\n    }\n    const gasTokenAddress = getGasTokenAddress(\n      this.paymasterConfig.gasToken,\n      chainId\n    );\n    let paymasterAddress = await this.getPaymasterAddress(paymasterProvider);\n    if (\n      gasTokenAddress !== undefined &&\n      paymasterAddress !== undefined &&\n      isAddress(paymasterAddress)\n    ) {\n      const erc20UserOp = await this.getERC20UserOp(\n        struct,\n        mainCall,\n        gasTokenAddress,\n        paymasterAddress\n      );\n      if (!erc20UserOp) {\n        return;\n      }\n      const paymasterResp = await this.signUserOp({\n        userOp: struct,\n        callData: struct.callData,\n        gasTokenAddress,\n        erc20UserOp,\n        erc20CallData: erc20UserOp.callData,\n        paymasterProvider,\n        shouldOverrideFee,\n        shouldConsume,\n      });\n      return paymasterResp;\n    }\n    return;\n  }\n}\n"]}