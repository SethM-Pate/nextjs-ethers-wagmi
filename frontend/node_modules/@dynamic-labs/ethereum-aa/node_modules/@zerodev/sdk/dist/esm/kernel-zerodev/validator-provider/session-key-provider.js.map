{"version":3,"file":"session-key-provider.js","sourceRoot":"","sources":["../../../../src/kernel-zerodev/validator-provider/session-key-provider.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  ValidatorProvider,\n  type ExtendedValidatorProviderParams,\n  type ValidatorProviderParams,\n} from \"./base.js\";\nimport {\n  SessionKeyValidator,\n  type SessionKeyParams,\n  type SessionKeyValidatorParams,\n} from \"../validator/session-key-validator.js\";\nimport {\n  LocalAccountSigner,\n  type Hex,\n  type SmartAccountSigner,\n} from \"@alchemy/aa-core\";\nimport { getChainId } from \"../api/index.js\";\nimport { polygonMumbai } from \"viem/chains\";\nimport { SESSION_KEY_VALIDATOR_ADDRESS } from \"../constants.js\";\nimport { base64ToBytes, bytesToBase64, getChain } from \"../utils.js\";\nimport type { RequiredProps, WithRequired } from \"../types.js\";\nimport type { KernelBaseValidatorParams } from \"../validator/base.js\";\n\nexport type PrefillSessionData = {\n  sessionKeyParams: SessionKeyParams &\n    WithRequired<SessionKeyParams, \"sessionPrivateKey\">;\n};\n\nexport type SessionKeyProviderParams = PrefillSessionData &\n  ValidatorProviderParams<SessionKeyValidatorParams> &\n  Partial<SessionKeyValidatorParams> &\n  RequiredProps<KernelBaseValidatorParams>;\n\nexport class SessionKeyProvider extends ValidatorProvider<\n  SessionKeyValidator,\n  SessionKeyValidatorParams\n> {\n  constructor(\n    params: ExtendedValidatorProviderParams<SessionKeyValidatorParams>\n  ) {\n    const chain =\n      typeof params.opts?.providerConfig?.chain === \"number\"\n        ? getChain(params.opts.providerConfig.chain)\n        : params.opts?.providerConfig?.chain ?? polygonMumbai;\n    const validator = new SessionKeyValidator({\n      projectId: params.projectId,\n      sessionKey: params.sessionKey,\n      sessionKeyData: params.sessionKeyData,\n      chain,\n      rpcUrl: params.opts?.providerConfig?.rpcUrl,\n      validatorAddress:\n        params.opts?.validatorConfig?.validatorAddress ??\n        SESSION_KEY_VALIDATOR_ADDRESS,\n      ...params.opts?.validatorConfig,\n    });\n    super(\n      {\n        ...params,\n        opts: {\n          ...params.opts,\n          providerConfig: { ...params.opts?.providerConfig, chain },\n        },\n      },\n      validator\n    );\n  }\n\n  public static async init(\n    params: ExtendedValidatorProviderParams<SessionKeyValidatorParams>\n  ): Promise<SessionKeyProvider> {\n    const chainId = await getChainId(params.projectId);\n    if (!chainId) {\n      throw new Error(\"ChainId not found\");\n    }\n    const chain = getChain(chainId);\n    const instance = new SessionKeyProvider({\n      ...params,\n      opts: {\n        ...params.opts,\n        providerConfig: {\n          chain,\n          ...params.opts?.providerConfig,\n        },\n      },\n    });\n    return instance;\n  }\n\n  public static async fromSessionKeyParams(\n    params: SessionKeyProviderParams,\n    signer?: SmartAccountSigner\n  ) {\n    let sessionKey = signer;\n\n    if (!sessionKey) {\n      sessionKey = LocalAccountSigner.privateKeyToAccountSigner(\n        params.sessionKeyParams.sessionPrivateKey\n      );\n    }\n    return await SessionKeyProvider.init({\n      ...params,\n      sessionKey,\n      sessionKeyData: params.sessionKeyParams.sessionKeyData,\n      opts: {\n        ...params.opts,\n        accountConfig: {\n          ...params.opts?.accountConfig,\n          accountAddress: params.sessionKeyParams.accountAddress,\n          initCode: params.sessionKeyParams.initCode,\n        },\n        validatorConfig: {\n          ...params.opts?.validatorConfig,\n          executor: params.sessionKeyParams.executor,\n          selector: params.sessionKeyParams.selector,\n          enableSignature: params.sessionKeyParams.enableSignature,\n        },\n      },\n    });\n  }\n\n  async serializeSessionKeyParams(sessionPrivateKey?: Hex): Promise<string> {\n    await this.getAccount().approvePlugin();\n    let sessionKeyParams = this.getValidator().getSessionData();\n    const initCode = await this.getAccount().getInitCode();\n    const accountAddress = await this.getAddress();\n    if (!initCode) {\n      throw Error(\"initCode not set\");\n    }\n    sessionKeyParams = {\n      ...sessionKeyParams,\n      sessionPrivateKey,\n      initCode,\n      accountAddress,\n    };\n    const jsonString = JSON.stringify(sessionKeyParams);\n    const uint8Array = new TextEncoder().encode(jsonString);\n    const base64String = bytesToBase64(uint8Array);\n    return base64String;\n  }\n\n  public static deserializeSessionKeyParams(\n    sessionKeyParams: string\n  ): PrefillSessionData[\"sessionKeyParams\"] {\n    const uint8Array = base64ToBytes(sessionKeyParams);\n    const jsonString = new TextDecoder().decode(uint8Array);\n    return JSON.parse(jsonString) as PrefillSessionData[\"sessionKeyParams\"];\n  }\n\n  changeSessionKeyData = this.sendEnableUserOperation;\n\n  deleteSessionKey = this.sendDisableUserOperation;\n}\n"]}