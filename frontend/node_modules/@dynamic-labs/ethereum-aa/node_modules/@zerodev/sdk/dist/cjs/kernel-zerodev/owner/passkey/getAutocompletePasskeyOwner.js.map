{"version":3,"file":"getAutocompletePasskeyOwner.js","sourceRoot":"","sources":["../../../../../src/kernel-zerodev/owner/passkey/getAutocompletePasskeyOwner.ts"],"names":[],"mappings":";;;;;;AAAA,0DAAmE;AACnE,kDAA0B;AAE1B,yCAOoB;AACpB,qDAA6C;AAEtC,KAAK,UAAU,2BAA2B,CAAC,EAChD,SAAS,EACT,MAAM,GAAG,sBAAO,GAKjB;IACC,IAEE,CAAC,mBAAmB,EAAE,+BAA+B;QAErD,CAAC,mBAAmB,EAAE,+BAA+B,EAAE,EACvD;QACA,OAAO;KACR;IAED,IAAI,OAAO,MAAM,KAAK,WAAW,EAAE;QACjC,MAAM,SAAS,GAAG,IAAA,+BAAoB,GAAE,CAAC;QACzC,IAAI;YACF,IAAA,wBAAa,GAAE,CAAC;YAChB,MAAM,SAAS,GAAG,IAAI,CAAC,KAAK,CAC1B,MAAM,IAAA,+BAAoB,EAAC,IAAA,0BAAe,EAAC,SAAS,CAAC,EAAE;gBACrD,SAAS,EAAE,aAAa;gBACxB,SAAS,EAAE;oBACT,IAAI,EAAE,MAAM,CAAC,QAAQ,CAAC,QAAQ;oBAC9B,gBAAgB,EAAE,UAAU;iBAC7B;gBACD,MAAM,EAAE,0BAAe,CAAC,UAAU,CAAC,MAAM;aAC1C,CAAC,CACH,CAAC;YACF,MAAM,QAAQ,GAAG,MAAM,eAAK,CAAC,IAAI,CAC/B,GAAG,MAAM,aAAa,SAAS,YAAY,SAAS,CAAC,YAAY,EAAE,EACnE;gBACE,SAAS,EAAE,IAAA,0BAAe,EAAC,SAAS,CAAC;gBACrC,SAAS;aACV,CACF,CAAC;YACF,MAAM,EAAE,EAAE,EAAE,QAAQ,EAAE,OAAO,EAAE,GAAG,MAAM,QAAQ,CAAC,IAAI,CAAC;YACtD,OAAO,CAAC,GAAG,CAAC,OAAO,EAAE,EAAE,EAAE,QAAQ,EAAE,OAAO,CAAC,CAAC;YAC5C,MAAM,KAAK,GAAuB;gBAChC,UAAU,EAAE,KAAK,IAAI,EAAE,CAAC,OAAO;gBAC/B,WAAW,EAAE,CAAC,GAAG,EAAE,EAAE,CACnB,IAAA,sBAAW,EACT,GAAG,EACH,EAAE,EACF,QAAQ,EACR,SAAS,EACT,SAAS,CAAC,YAAY,EACtB,MAAM,CACP;gBACH,aAAa,EAAE,CAAC,MAA2B,EAAE,EAAE,CAC7C,IAAA,wBAAa,EACX,MAAM,EACN,EAAE,EACF,QAAQ,EACR,SAAS,EACT,SAAS,CAAC,YAAY,EACtB,MAAM,CACP;aACJ,CAAC;YACF,OAAO,KAAK,CAAC;SACd;QAAC,OAAO,CAAC,EAAE;YACV,OAAO,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;SAChB;KACF;IACD,OAAO;AACT,CAAC;AAnED,kEAmEC","sourcesContent":["import { getWebAuthnAssertion } from \"@turnkey/http/dist/webauthn\";\nimport axios from \"axios\";\nimport type { SignTypedDataParams, SmartAccountSigner } from \"@alchemy/aa-core\";\nimport {\n  abortController,\n  abortWebauthn,\n  base64UrlEncode,\n  generateRandomBuffer,\n  signMessage,\n  signTypedData,\n} from \"./utils.js\";\nimport { API_URL } from \"../../constants.js\";\n\nexport async function getAutocompletePasskeyOwner({\n  projectId,\n  apiUrl = API_URL,\n}: {\n  projectId: string;\n  name?: string;\n  apiUrl?: string;\n}): Promise<SmartAccountSigner | undefined> {\n  if (\n    //@ts-ignore\n    !PublicKeyCredential?.isConditionalMediationAvailable ||\n    //@ts-ignore\n    !PublicKeyCredential?.isConditionalMediationAvailable()\n  ) {\n    return;\n  }\n\n  if (typeof window !== \"undefined\") {\n    const challenge = generateRandomBuffer();\n    try {\n      abortWebauthn();\n      const assertion = JSON.parse(\n        await getWebAuthnAssertion(base64UrlEncode(challenge), {\n          mediation: \"conditional\",\n          publicKey: {\n            rpId: window.location.hostname,\n            userVerification: \"required\",\n          },\n          signal: abortController.controller.signal,\n        })\n      );\n      const response = await axios.post(\n        `${apiUrl}/projects/${projectId}/wallets/${assertion.credentialId}`,\n        {\n          challenge: base64UrlEncode(challenge),\n          assertion,\n        }\n      );\n      const { id, walletId, address } = await response.data;\n      console.log(\"owner\", id, walletId, address);\n      const owner: SmartAccountSigner = {\n        getAddress: async () => address,\n        signMessage: (msg) =>\n          signMessage(\n            msg,\n            id,\n            walletId,\n            projectId,\n            assertion.credentialId,\n            apiUrl\n          ),\n        signTypedData: (params: SignTypedDataParams) =>\n          signTypedData(\n            params,\n            id,\n            walletId,\n            projectId,\n            assertion.credentialId,\n            apiUrl\n          ),\n      };\n      return owner;\n    } catch (e) {\n      console.log(e);\n    }\n  }\n  return;\n}\n"]}