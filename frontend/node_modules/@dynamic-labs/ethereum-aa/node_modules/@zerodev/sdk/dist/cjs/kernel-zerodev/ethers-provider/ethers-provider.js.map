{"version":3,"file":"ethers-provider.js","sourceRoot":"","sources":["../../../../src/kernel-zerodev/ethers-provider/ethers-provider.ts"],"names":[],"mappings":";;;AAAA,8CAA6C;AAC7C,8CAQ0B;AAC1B,2DAA2D;AAC3D,wDAA2D;AAM3D,6DAAoE;AACpE,6DAAyE;AACzE,0CAAuC;AAEvC,MAAa,qBAEX,SAAQ,2BAAe;IAEvB,YAAY,aAAgB,EAAE,MAAqC;QACjE,KAAK,EAAE,CAAC;QAFD;;;;;WAA6C;QAkGtD;;;;mBAA0B,CAAC,SAG1B,EAAQ,EAAE;gBACT,IAAI,CAAC,eAAe,CAAC,uBAAuB,CAAC,SAAS,CAAC,CAAC;gBACxD,OAAO,IAAI,CAAC;YACd,CAAC;WAAC;QAEF;;;;mBAAmB,CAAC,QAAgC,EAAQ,EAAE;gBAC5D,IAAI,CAAC,eAAe,CAAC,gBAAgB,CAAC,QAAQ,CAAC,CAAC;gBAChD,OAAO,IAAI,CAAC;YACd,CAAC;WAAC;QAEF;;;;mBAAoB,CAAC,QAA2B,EAAQ,EAAE;gBACxD,IAAI,CAAC,eAAe,CAAC,iBAAiB,CAAC,QAAQ,CAAC,CAAC;gBACjD,OAAO,IAAI,CAAC;YACd,CAAC;WAAC;QAEF;;;;mBAAuB,CAAC,QAA6B,EAAQ,EAAE;gBAC7D,IAAI,CAAC,eAAe,CAAC,oBAAoB,CAAC,QAAQ,CAAC,CAAC;gBACpD,OAAO,IAAI,CAAC;YACd,CAAC;WAAC;QApHA,IAAI,eAAe,GAAG,MAAM,CAAC,eAAe,CAAC;QAC7C,MAAM,kBAAkB,GACtB,CAAC,MAAM,CAAC,YAAY,KAAK,SAAS,IAAI,MAAM,CAAC,YAAY,CAAC;YAC1D,eAAe,KAAK,QAAQ,CAAC;QAC/B,IACE,MAAM,CAAC,IAAI,EAAE,eAAe;YAC5B,MAAM,CAAC,IAAI,EAAE,eAAe,CAAC,MAAM,KAAK,iBAAiB;YACzD,kBAAkB,EAClB;YACA,eAAe,GAAG,SAAS,CAAC;SAC7B;QACD,IAAI,eAAe,GAAG,IAAI,6BAAkB,CAAC,aAAa,CAAC,CAAC;YAC1D,GAAG,MAAM;YACT,eAAe;SAChB,CAAC,CAAC;QACH,IAAI,kBAAkB,EAAE;YACtB,IAAI,eAAe,GAAG,MAAM,CAAC,IAAI,EAAE,eAAe,IAAI;gBACpD,MAAM,EAAE,qBAAqB;aAC9B,CAAC;YACF,eAAe,GAAG;gBAChB,GAAG,eAAe;gBAClB,iBAAiB,EACf,MAAM,CAAC,IAAI,EAAE,eAAe,EAAE,iBAAiB,IAAI,eAAe;aACrE,CAAC;YACF,eAAe,GAAG,IAAA,0CAA2B,EAC3C,eAAe,EACf,eAAe,CACe,CAAC;SAClC;QACD,IAAI,CAAC,eAAe,GAAG,eAAe,CAAC;IACzC,CAAC;IAEM,MAAM,CAAC,KAAK,CAAC,IAAI,CACtB,aAAgB,EAChB,MAAqC;QAErC,MAAM,OAAO,GAAG,MAAM,IAAA,qBAAU,EAAC,MAAM,CAAC,SAAS,CAAC,CAAC;QACnD,IAAI,CAAC,OAAO,EAAE;YACZ,MAAM,IAAI,KAAK,CAAC,mBAAmB,CAAC,CAAC;SACtC;QACD,MAAM,KAAK,GAAG,IAAA,mBAAQ,EAAC,OAAO,CAAC,CAAC;QAChC,MAAM,QAAQ,GAAG,IAAI,qBAAqB,CAAC,aAAa,EAAE;YACxD,GAAG,MAAM;YACT,IAAI,EAAE;gBACJ,GAAG,MAAM,CAAC,IAAI;gBACd,cAAc,EAAE;oBACd,KAAK;oBACL,GAAG,MAAM,CAAC,IAAI,EAAE,cAAc;iBAC/B;aACF;SACF,CAAC,CAAC;QAEH,OAAO,QAAQ,CAAC;IAClB,CAAC;IAED,kBAAkB;QAChB,OAAO,IAAI,CAAC,eAAe,CAAC;IAC9B,CAAC;IAUD,IAAI,CAAC,MAAc,EAAE,MAAa;QAChC,OAAO,IAAI,CAAC,eAAe,CAAC,OAAO,CAAC,EAAE,MAAM,EAAE,MAAM,EAAE,CAAC,CAAC;IAC1D,CAAC;IAQD,gBAAgB,CACd,EAAgE;QAEhE,IAAA,wBAAc,EACZ,IAAI,EACJ,iBAAiB,EACjB,IAAI,CAAC,eAAe,CAAC,OAAO,CAAC,EAAE,CAAgC,CAChE,CAAC;QACF,OAAO,IAAI,CAAC,gBAAgB,EAAE,CAAC;IACjC,CAAC;IAKD,gBAAgB;QACd,OAAO,IAAI,wCAAoB,CAAC,IAAI,CAAC,CAAC;IACxC,CAAC;IAyBD,sBAAsB;QACpB,OAAO,IAAI,CAAC,eAAe,CAAC,SAAS,CAAC;IACxC,CAAC;CACF;AA/HD,sDA+HC","sourcesContent":["import { getChainId } from \"../api/index.js\";\nimport {\n  BaseSmartContractAccount,\n  defineReadOnly,\n  type AccountMiddlewareFn,\n  type FeeDataMiddleware,\n  type GasEstimatorMiddleware,\n  type PaymasterAndDataMiddleware,\n  type PublicErc4337Client,\n} from \"@alchemy/aa-core\";\nimport { ZeroDevAccountSigner } from \"./account-signer.js\";\nimport { JsonRpcProvider } from \"@ethersproject/providers\";\nimport type { SupportedValidators } from \"../validator/types.js\";\nimport type {\n  ValidatorProviderParamsMap,\n  ValidatorProviderTypeMap,\n} from \"../validator-provider/types.js\";\nimport { ValidatorProviders } from \"../validator-provider/index.js\";\nimport { withZeroDevPaymasterAndData } from \"../middleware/paymaster.js\";\nimport { getChain } from \"../utils.js\";\n\nexport class ZeroDevEthersProvider<\n  V extends SupportedValidators\n> extends JsonRpcProvider {\n  readonly accountProvider: ValidatorProviderTypeMap[V];\n  constructor(validatorType: V, params: ValidatorProviderParamsMap[V]) {\n    super();\n    let bundlerProvider = params.bundlerProvider;\n    const shouldUsePaymaster =\n      (params.usePaymaster === undefined || params.usePaymaster) &&\n      bundlerProvider !== \"GELATO\";\n    if (\n      params.opts?.paymasterConfig &&\n      params.opts?.paymasterConfig.policy === \"TOKEN_PAYMASTER\" &&\n      shouldUsePaymaster\n    ) {\n      bundlerProvider = \"STACKUP\";\n    }\n    let accountProvider = new ValidatorProviders[validatorType]({\n      ...params,\n      bundlerProvider,\n    });\n    if (shouldUsePaymaster) {\n      let paymasterConfig = params.opts?.paymasterConfig ?? {\n        policy: \"VERIFYING_PAYMASTER\",\n      };\n      paymasterConfig = {\n        ...paymasterConfig,\n        paymasterProvider:\n          params.opts?.paymasterConfig?.paymasterProvider ?? bundlerProvider,\n      };\n      accountProvider = withZeroDevPaymasterAndData(\n        accountProvider,\n        paymasterConfig\n      ) as ValidatorProviderTypeMap[V];\n    }\n    this.accountProvider = accountProvider;\n  }\n\n  public static async init<V extends SupportedValidators>(\n    validatorType: V,\n    params: ValidatorProviderParamsMap[V]\n  ): Promise<ZeroDevEthersProvider<V>> {\n    const chainId = await getChainId(params.projectId);\n    if (!chainId) {\n      throw new Error(\"ChainId not found\");\n    }\n    const chain = getChain(chainId);\n    const instance = new ZeroDevEthersProvider(validatorType, {\n      ...params,\n      opts: {\n        ...params.opts,\n        providerConfig: {\n          chain,\n          ...params.opts?.providerConfig,\n        },\n      },\n    });\n\n    return instance;\n  }\n\n  getAccountProvider(): ValidatorProviderTypeMap[V] {\n    return this.accountProvider;\n  }\n\n  /**\n   * Rewrites the send method to use the account provider's EIP-1193\n   * compliant request method\n   *\n   * @param method - the RPC method to call\n   * @param params - the params required by the RPC method\n   * @returns the result of the RPC call\n   */\n  send(method: string, params: any[]): Promise<any> {\n    return this.accountProvider.request({ method, params });\n  }\n\n  /**\n   * Connects the Provider to an Account and returns a Signer\n   *\n   * @param fn - a function that takes the account provider's rpcClient and returns a BaseSmartContractAccount\n   * @returns an {@link ZeroDevAccountSigner} that can be used to sign and send user operations\n   */\n  connectToAccount(\n    fn: (rpcClient: PublicErc4337Client) => BaseSmartContractAccount\n  ): ZeroDevAccountSigner<V> {\n    defineReadOnly(\n      this,\n      \"accountProvider\",\n      this.accountProvider.connect(fn) as ValidatorProviderTypeMap[V]\n    );\n    return this.getAccountSigner();\n  }\n\n  /**\n   * @returns an {@link ZeroDevAccountSigner} using this as the underlying provider\n   */\n  getAccountSigner(): ZeroDevAccountSigner<V> {\n    return new ZeroDevAccountSigner(this);\n  }\n\n  withPaymasterMiddleware = (overrides: {\n    dummyPaymasterDataMiddleware?: PaymasterAndDataMiddleware;\n    paymasterDataMiddleware?: PaymasterAndDataMiddleware;\n  }): this => {\n    this.accountProvider.withPaymasterMiddleware(overrides);\n    return this;\n  };\n\n  withGasEstimator = (override: GasEstimatorMiddleware): this => {\n    this.accountProvider.withGasEstimator(override);\n    return this;\n  };\n\n  withFeeDataGetter = (override: FeeDataMiddleware): this => {\n    this.accountProvider.withFeeDataGetter(override);\n    return this;\n  };\n\n  withCustomMiddleware = (override: AccountMiddlewareFn): this => {\n    this.accountProvider.withCustomMiddleware(override);\n    return this;\n  };\n\n  getPublicErc4337Client(): PublicErc4337Client {\n    return this.accountProvider.rpcClient;\n  }\n}\n"]}