import { ValidatorProvider, } from "./base.js";
import { SessionKeyValidator, } from "../validator/session-key-validator.js";
import { LocalAccountSigner, } from "@alchemy/aa-core";
import { getChainId } from "../api/index.js";
import { polygonMumbai } from "viem/chains";
import { SESSION_KEY_VALIDATOR_ADDRESS } from "../constants.js";
import { base64ToBytes, bytesToBase64, getChain } from "../utils.js";
export class SessionKeyProvider extends ValidatorProvider {
    constructor(params) {
        const chain = typeof params.opts?.providerConfig?.chain === "number"
            ? getChain(params.opts.providerConfig.chain)
            : params.opts?.providerConfig?.chain ?? polygonMumbai;
        const validator = new SessionKeyValidator({
            projectId: params.projectId,
            sessionKey: params.sessionKey,
            sessionKeyData: params.sessionKeyData,
            chain,
            rpcUrl: params.opts?.providerConfig?.rpcUrl,
            validatorAddress: params.opts?.validatorConfig?.validatorAddress ??
                SESSION_KEY_VALIDATOR_ADDRESS,
            ...params.opts?.validatorConfig,
        });
        super({
            ...params,
            opts: {
                ...params.opts,
                providerConfig: { ...params.opts?.providerConfig, chain },
            },
        }, validator);
        Object.defineProperty(this, "changeSessionKeyData", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: this.sendEnableUserOperation
        });
        Object.defineProperty(this, "deleteSessionKey", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: this.sendDisableUserOperation
        });
    }
    static async init(params) {
        const chainId = await getChainId(params.projectId);
        if (!chainId) {
            throw new Error("ChainId not found");
        }
        const chain = getChain(chainId);
        const instance = new SessionKeyProvider({
            ...params,
            opts: {
                ...params.opts,
                providerConfig: {
                    chain,
                    ...params.opts?.providerConfig,
                },
            },
        });
        return instance;
    }
    static async fromSessionKeyParams(params, signer) {
        let sessionKey = signer;
        if (!sessionKey) {
            sessionKey = LocalAccountSigner.privateKeyToAccountSigner(params.sessionKeyParams.sessionPrivateKey);
        }
        return await SessionKeyProvider.init({
            ...params,
            sessionKey,
            sessionKeyData: params.sessionKeyParams.sessionKeyData,
            opts: {
                ...params.opts,
                accountConfig: {
                    ...params.opts?.accountConfig,
                    accountAddress: params.sessionKeyParams.accountAddress,
                    initCode: params.sessionKeyParams.initCode,
                },
                validatorConfig: {
                    ...params.opts?.validatorConfig,
                    executor: params.sessionKeyParams.executor,
                    selector: params.sessionKeyParams.selector,
                    enableSignature: params.sessionKeyParams.enableSignature,
                },
            },
        });
    }
    async serializeSessionKeyParams(sessionPrivateKey) {
        await this.getAccount().approvePlugin();
        let sessionKeyParams = this.getValidator().getSessionData();
        const initCode = await this.getAccount().getInitCode();
        const accountAddress = await this.getAddress();
        if (!initCode) {
            throw Error("initCode not set");
        }
        sessionKeyParams = {
            ...sessionKeyParams,
            sessionPrivateKey,
            initCode,
            accountAddress,
        };
        const jsonString = JSON.stringify(sessionKeyParams);
        const uint8Array = new TextEncoder().encode(jsonString);
        const base64String = bytesToBase64(uint8Array);
        return base64String;
    }
    static deserializeSessionKeyParams(sessionKeyParams) {
        const uint8Array = base64ToBytes(sessionKeyParams);
        const jsonString = new TextDecoder().decode(uint8Array);
        return JSON.parse(jsonString);
    }
}
//# sourceMappingURL=session-key-provider.js.map