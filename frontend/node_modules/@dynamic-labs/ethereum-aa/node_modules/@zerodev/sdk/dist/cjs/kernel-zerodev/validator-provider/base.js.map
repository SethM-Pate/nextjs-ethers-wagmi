{"version":3,"file":"base.js","sourceRoot":"","sources":["../../../../src/kernel-zerodev/validator-provider/base.ts"],"names":[],"mappings":";;;AACA,gDAA6E;AAU7E,8CAIuB;AACvB,wCAA4C;AAC5C,6DAAyE;AA8BzE,MAAsB,iBAGpB,SAAQ,6BAAe;IAKvB,YACE,MAA0C,EAC1C,SAA8B;QAE9B,IAAI,eAAe,GAAG,MAAM,CAAC,eAAe,CAAC;QAC7C,MAAM,kBAAkB,GACtB,CAAC,MAAM,CAAC,YAAY,KAAK,SAAS,IAAI,MAAM,CAAC,YAAY,CAAC;YAC1D,eAAe,KAAK,QAAQ,CAAC;QAC/B,IACE,MAAM,CAAC,IAAI,EAAE,eAAe;YAC5B,MAAM,CAAC,IAAI,EAAE,eAAe,CAAC,MAAM,KAAK,iBAAiB;YACzD,kBAAkB,EAClB;YACA,eAAe,GAAG,SAAS,CAAC;SAC7B;QACD,KAAK,CAAC;YACJ,GAAG,MAAM,CAAC,IAAI,EAAE,cAAc;YAC9B,KAAK,EAAE,MAAM,CAAC,IAAI,EAAE,cAAc,EAAE,KAAK,IAAI,sBAAa;YAC1D,MAAM,EAAE,MAAM,CAAC,IAAI,EAAE,cAAc,EAAE,MAAM;YAC3C,SAAS,EAAE,MAAM,CAAC,SAAS;YAC3B,eAAe;SAChB,CAAC,CAAC;QAzBK;;;;;WAGR;QA8DF;;;;mBAAe,GAAM,EAAE;gBACrB,IAAI,CAAC,IAAA,4BAAe,EAAC,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,SAAS,EAAE;oBAC7D,MAAM,IAAI,KAAK,CACb,wFAAwF,CACzF,CAAC;iBACH;gBACD,OAAO,IAAI,CAAC,OAAO,CAAC,YAAY,EAAkB,CAAC;YACrD,CAAC;WAAC;QAEF;;;;mBAAuB,KAAK,EAAE,UAAe,EAAgB,EAAE;gBAC7D,IAAI,CAAC,IAAA,4BAAe,EAAC,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,SAAS,EAAE;oBAC7D,MAAM,IAAI,KAAK,CACb,wFAAwF,CACzF,CAAC;iBACH;gBACD,OAAO,MAAM,IAAI,CAAC,OAAO,CAAC,SAAS,CAAC,YAAY,CAAC,UAAU,CAAC,CAAC;YAC/D,CAAC;WAAC;QAEF;;;;mBAAwB,KAAK,EAAE,cAAmB,IAAI,EAAgB,EAAE;gBACtE,IAAI,CAAC,IAAA,4BAAe,EAAC,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,SAAS,EAAE;oBAC7D,MAAM,IAAI,KAAK,CACb,wFAAwF,CACzF,CAAC;iBACH;gBACD,OAAO,MAAM,IAAI,CAAC,OAAO,CAAC,SAAS,CAAC,aAAa,CAAC,WAAW,CAAC,CAAC;YACjE,CAAC;WAAC;QAEF;;;;mBAA0B,KAAK,EAC7B,UAAe,EACmB,EAAE;gBACpC,MAAM,iBAAiB,GAAG,MAAM,IAAI,CAAC,oBAAoB,CAAC,UAAU,CAAC,CAAC;gBACtE,IAAI,CAAC,IAAA,4BAAe,EAAC,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,SAAS,EAAE;oBAC7D,MAAM,IAAI,KAAK,CACb,wFAAwF,CACzF,CAAC;iBACH;gBAED,OAAO,MAAM,IAAI,CAAC,iBAAiB,CAAC;oBAClC,MAAM,EAAE,IAAI,CAAC,OAAO,CAAC,SAAS,CAAC,gBAAgB;oBAC/C,IAAI,EAAE,iBAAiB;iBACxB,CAAC,CAAC;YACL,CAAC;WAAC;QAEF;;;;mBAA2B,KAAK,EAC9B,cAAmB,IAAI,EACW,EAAE;gBACpC,MAAM,kBAAkB,GAAG,MAAM,IAAI,CAAC,qBAAqB,CAAC,WAAW,CAAC,CAAC;gBACzE,IAAI,CAAC,IAAA,4BAAe,EAAC,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,SAAS,EAAE;oBAC7D,MAAM,IAAI,KAAK,CACb,wFAAwF,CACzF,CAAC;iBACH;gBACD,IAAI,CAAC,IAAI,CAAC,eAAe,EAAE;oBACzB,MAAM,KAAK,CAAC,yCAAyC,CAAC,CAAC;iBACxD;gBAED,OAAO,MAAM,IAAI,CAAC,eAAe,CAAC,iBAAiB,CAAC;oBAClD,MAAM,EAAE,IAAI,CAAC,OAAO,CAAC,SAAS,CAAC,gBAAgB;oBAC/C,IAAI,EAAE,kBAAkB;iBACzB,CAAC,CAAC;YACL,CAAC;WAAC;QAnGA,IAAI,CAAC,eAAe,GAAG,MAAM,CAAC,eAAe,CAAC;QAC9C,IACE,CAAC,OAAO,MAAM,CAAC,IAAI,EAAE,cAAc,EAAE,KAAK,KAAK,QAAQ;YACrD,OAAO,MAAM,CAAC,eAAe,EAAE,KAAK,KAAK,QAAQ;YACjD,MAAM,CAAC,IAAI,EAAE,cAAc,EAAE,KAAK,KAAK,MAAM,CAAC,eAAe,EAAE,KAAK,CAAC;YACvE,CAAC,OAAO,MAAM,CAAC,IAAI,EAAE,cAAc,EAAE,KAAK,KAAK,QAAQ;gBACrD,OAAO,MAAM,CAAC,eAAe,EAAE,KAAK,KAAK,QAAQ;gBACjD,MAAM,CAAC,IAAI,EAAE,cAAc,EAAE,KAAK,CAAC,EAAE;oBACnC,MAAM,CAAC,eAAe,EAAE,KAAK,CAAC,EAAE,CAAC,EACrC;YACA,MAAM,IAAI,KAAK,CACb,mFAAmF,CACpF,CAAC;SACH;QACD,IAAI,CAAC,OAAO,CACV,GAAG,EAAE,CACH,IAAI,uCAA0B,CAAC;YAC7B,SAAS,EAAE,MAAM,CAAC,SAAS;YAC3B,SAAS;YACT,gBAAgB,EAAE,MAAM,CAAC,eAAe,EAAE,YAAY,EAAE;YACxD,SAAS,EAAE,IAAI,CAAC,SAAS;YACzB,eAAe;YACf,KAAK,EAAE,MAAM,CAAC,eAAe,EAAE,UAAU,EAAE,CAAC,QAAQ,EAAE;YACtD,GAAG,MAAM,CAAC,IAAI,EAAE,aAAa;SAC9B,CAAC,CACL,CAAC;QACF,IAAI,kBAAkB,EAAE;YACtB,IAAI,eAAe,GAAG,MAAM,CAAC,IAAI,EAAE,eAAe,IAAI;gBACpD,MAAM,EAAE,qBAAqB;aAC9B,CAAC;YACF,eAAe,GAAG;gBAChB,GAAG,eAAe;gBAClB,iBAAiB,EACf,MAAM,CAAC,IAAI,EAAE,eAAe,EAAE,iBAAiB,IAAI,eAAe;aACrE,CAAC;YACF,IAAA,0CAA2B,EAAC,IAAI,EAAE,eAAe,CAAC,CAAC;SACpD;IACH,CAAC;CA+DF;AAlID,8CAkIC","sourcesContent":["import { type Hex, type SendUserOperationResult } from \"@alchemy/aa-core\";\nimport { ZeroDevProvider, type ZeroDevProviderConfig } from \"../provider.js\";\nimport type {\n  KernelBaseValidator,\n  KernelBaseValidatorParams,\n} from \"../validator/base.js\";\nimport type {\n  PaymasterAndBundlerProviders,\n  PaymasterConfig,\n  PaymasterPolicy,\n} from \"../paymaster/types.js\";\nimport {\n  KernelSmartContractAccount,\n  type KernelSmartAccountParams,\n  isKernelAccount,\n} from \"../account.js\";\nimport { polygonMumbai } from \"viem/chains\";\nimport { withZeroDevPaymasterAndData } from \"../middleware/paymaster.js\";\nimport type { RequiredProps } from \"../types.js\";\n\nexport type ValidatorProviderParamsOpts<P extends KernelBaseValidatorParams> = {\n  paymasterConfig?: PaymasterConfig<PaymasterPolicy>;\n  providerConfig?: Partial<ZeroDevProviderConfig>;\n  accountConfig?: Omit<\n    KernelSmartAccountParams,\n    keyof ExtendedValidatorProviderParams<P>\n  >;\n  validatorConfig?: Omit<P, keyof ExtendedValidatorProviderParams<P>>;\n};\n\nexport interface ValidatorProviderParams<P extends KernelBaseValidatorParams> {\n  projectId: string;\n  bundlerProvider?: PaymasterAndBundlerProviders;\n  opts?: ValidatorProviderParamsOpts<P>;\n  usePaymaster?: boolean;\n  defaultProvider?: ValidatorProvider<\n    KernelBaseValidator,\n    KernelBaseValidatorParams\n  >;\n}\n\nexport type ExtendedValidatorProviderParams<\n  P extends KernelBaseValidatorParams\n> = ValidatorProviderParams<P> & RequiredProps<P>;\n\n// A simple facade abstraction for validator related provider operations\n// Needs to be implemented for each validator plugin\nexport abstract class ValidatorProvider<\n  V extends KernelBaseValidator,\n  P extends KernelBaseValidatorParams\n> extends ZeroDevProvider {\n  protected defaultProvider?: ValidatorProvider<\n    KernelBaseValidator,\n    KernelBaseValidatorParams\n  >;\n  constructor(\n    params: ExtendedValidatorProviderParams<P>,\n    validator: KernelBaseValidator\n  ) {\n    let bundlerProvider = params.bundlerProvider;\n    const shouldUsePaymaster =\n      (params.usePaymaster === undefined || params.usePaymaster) &&\n      bundlerProvider !== \"GELATO\";\n    if (\n      params.opts?.paymasterConfig &&\n      params.opts?.paymasterConfig.policy === \"TOKEN_PAYMASTER\" &&\n      shouldUsePaymaster\n    ) {\n      bundlerProvider = \"STACKUP\";\n    }\n    super({\n      ...params.opts?.providerConfig,\n      chain: params.opts?.providerConfig?.chain ?? polygonMumbai,\n      rpcUrl: params.opts?.providerConfig?.rpcUrl,\n      projectId: params.projectId,\n      bundlerProvider,\n    });\n    this.defaultProvider = params.defaultProvider;\n    if (\n      (typeof params.opts?.providerConfig?.chain === \"number\" &&\n        typeof params.defaultProvider?.chain === \"number\" &&\n        params.opts?.providerConfig?.chain !== params.defaultProvider?.chain) ||\n      (typeof params.opts?.providerConfig?.chain === \"object\" &&\n        typeof params.defaultProvider?.chain === \"object\" &&\n        params.opts?.providerConfig?.chain.id !==\n          params.defaultProvider?.chain.id)\n    ) {\n      throw new Error(\n        \"chainId mismatch between default provider and current provider - check projectIds\"\n      );\n    }\n    this.connect(\n      () =>\n        new KernelSmartContractAccount({\n          projectId: params.projectId,\n          validator,\n          defaultValidator: params.defaultProvider?.getValidator(),\n          rpcClient: this.rpcClient,\n          bundlerProvider,\n          index: params.defaultProvider?.getAccount().getIndex(),\n          ...params.opts?.accountConfig,\n        })\n    );\n    if (shouldUsePaymaster) {\n      let paymasterConfig = params.opts?.paymasterConfig ?? {\n        policy: \"VERIFYING_PAYMASTER\",\n      };\n      paymasterConfig = {\n        ...paymasterConfig,\n        paymasterProvider:\n          params.opts?.paymasterConfig?.paymasterProvider ?? bundlerProvider,\n      };\n      withZeroDevPaymasterAndData(this, paymasterConfig);\n    }\n  }\n\n  getValidator = (): V => {\n    if (!isKernelAccount(this.account) || !this.account.validator) {\n      throw new Error(\n        \"ValidatorProvider: account with validator is not set, did you call all connects first?\"\n      );\n    }\n    return this.account.getValidator() as unknown as V;\n  };\n\n  getEncodedEnableData = async (enableData: Hex): Promise<Hex> => {\n    if (!isKernelAccount(this.account) || !this.account.validator) {\n      throw new Error(\n        \"ValidatorProvider: account with validator is not set, did you call all connects first?\"\n      );\n    }\n    return await this.account.validator.encodeEnable(enableData);\n  };\n\n  getEncodedDisableData = async (disableData: Hex = \"0x\"): Promise<Hex> => {\n    if (!isKernelAccount(this.account) || !this.account.validator) {\n      throw new Error(\n        \"ValidatorProvider: account with validator is not set, did you call all connects first?\"\n      );\n    }\n    return await this.account.validator.encodeDisable(disableData);\n  };\n\n  sendEnableUserOperation = async (\n    enableData: Hex\n  ): Promise<SendUserOperationResult> => {\n    const encodedEnableData = await this.getEncodedEnableData(enableData);\n    if (!isKernelAccount(this.account) || !this.account.validator) {\n      throw new Error(\n        \"ValidatorProvider: account with validator is not set, did you call all connects first?\"\n      );\n    }\n\n    return await this.sendUserOperation({\n      target: this.account.validator.validatorAddress,\n      data: encodedEnableData,\n    });\n  };\n\n  sendDisableUserOperation = async (\n    disableData: Hex = \"0x\"\n  ): Promise<SendUserOperationResult> => {\n    const encodedDisableData = await this.getEncodedDisableData(disableData);\n    if (!isKernelAccount(this.account) || !this.account.validator) {\n      throw new Error(\n        \"ValidatorProvider: account with validator is not set, did you call all connects first?\"\n      );\n    }\n    if (!this.defaultProvider) {\n      throw Error(\"Default Validator provider unintialized\");\n    }\n\n    return await this.defaultProvider.sendUserOperation({\n      target: this.account.validator.validatorAddress,\n      data: encodedDisableData,\n    });\n  };\n}\n"]}