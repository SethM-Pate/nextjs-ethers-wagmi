{"version":3,"file":"getPasskeyOwner.js","sourceRoot":"","sources":["../../../../../src/kernel-zerodev/owner/passkey/getPasskeyOwner.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,oBAAoB,EAAE,MAAM,6BAA6B,CAAC;AACnE,OAAO,KAAK,MAAM,OAAO,CAAC;AAE1B,OAAO,EACL,aAAa,EACb,eAAe,EACf,oBAAoB,EACpB,cAAc,EACd,WAAW,EACX,aAAa,GACd,MAAM,YAAY,CAAC;AACpB,OAAO,EAAE,OAAO,EAAE,MAAM,oBAAoB,CAAC;AAE7C,MAAM,CAAC,KAAK,UAAU,eAAe,CAAC,EACpC,SAAS,EACT,IAAI,EACJ,MAAM,GAAG,OAAO,EAChB,eAAe,GAAG,KAAK,GAMxB;IACC,IAAI,OAAO,MAAM,KAAK,WAAW,EAAE;QACjC,MAAM,SAAS,GAAG,oBAAoB,EAAE,CAAC;QACzC,IAAI;YACF,aAAa,EAAE,CAAC;YAChB,MAAM,SAAS,GAAG,IAAI,CAAC,KAAK,CAC1B,MAAM,oBAAoB,CAAC,eAAe,CAAC,SAAS,CAAC,EAAE;gBACrD,SAAS,EAAE;oBACT,IAAI,EAAE,MAAM,CAAC,QAAQ,CAAC,QAAQ;oBAC9B,gBAAgB,EAAE,UAAU;oBAC5B,gBAAgB,EAAE,eAAe;wBAC/B,CAAC,CAAC,MAAM,cAAc,CAAC,SAAS,EAAE,IAAI,CAAC;wBACvC,CAAC,CAAC,SAAS;iBACd;aACF,CAAC,CACH,CAAC;YACF,MAAM,QAAQ,GAAG,MAAM,KAAK,CAAC,IAAI,CAC/B,GAAG,MAAM,aAAa,SAAS,YAAY,SAAS,CAAC,YAAY,EAAE,EACnE;gBACE,SAAS,EAAE,eAAe,CAAC,SAAS,CAAC;gBACrC,SAAS;aACV,CACF,CAAC;YACF,MAAM,EAAE,EAAE,EAAE,QAAQ,EAAE,OAAO,EAAE,GAAG,MAAM,QAAQ,CAAC,IAAI,CAAC;YACtD,MAAM,KAAK,GAAuB;gBAChC,UAAU,EAAE,KAAK,IAAI,EAAE,CAAC,OAAO;gBAC/B,WAAW,EAAE,CAAC,GAAG,EAAE,EAAE,CACnB,WAAW,CACT,GAAG,EACH,EAAE,EACF,QAAQ,EACR,SAAS,EACT,SAAS,CAAC,YAAY,EACtB,MAAM,CACP;gBACH,aAAa,EAAE,CAAC,MAA2B,EAAE,EAAE,CAC7C,aAAa,CACX,MAAM,EACN,EAAE,EACF,QAAQ,EACR,SAAS,EACT,SAAS,CAAC,YAAY,EACtB,MAAM,CACP;aACJ,CAAC;YACF,OAAO,KAAK,CAAC;SACd;QAAC,OAAO,CAAC,EAAE;YACV,OAAO,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;SAChB;KACF;IACD,OAAO;AACT,CAAC","sourcesContent":["import { getWebAuthnAssertion } from \"@turnkey/http/dist/webauthn\";\nimport axios from \"axios\";\nimport type { SignTypedDataParams, SmartAccountSigner } from \"@alchemy/aa-core\";\nimport {\n  abortWebauthn,\n  base64UrlEncode,\n  generateRandomBuffer,\n  getCredentials,\n  signMessage,\n  signTypedData,\n} from \"./utils.js\";\nimport { API_URL } from \"../../constants.js\";\n\nexport async function getPasskeyOwner({\n  projectId,\n  name,\n  apiUrl = API_URL,\n  withCredentials = false,\n}: {\n  projectId: string;\n  name?: string;\n  apiUrl?: string;\n  withCredentials?: boolean;\n}): Promise<SmartAccountSigner | undefined> {\n  if (typeof window !== \"undefined\") {\n    const challenge = generateRandomBuffer();\n    try {\n      abortWebauthn();\n      const assertion = JSON.parse(\n        await getWebAuthnAssertion(base64UrlEncode(challenge), {\n          publicKey: {\n            rpId: window.location.hostname,\n            userVerification: \"required\",\n            allowCredentials: withCredentials\n              ? await getCredentials(projectId, name)\n              : undefined,\n          },\n        })\n      );\n      const response = await axios.post(\n        `${apiUrl}/projects/${projectId}/wallets/${assertion.credentialId}`,\n        {\n          challenge: base64UrlEncode(challenge),\n          assertion,\n        }\n      );\n      const { id, walletId, address } = await response.data;\n      const owner: SmartAccountSigner = {\n        getAddress: async () => address,\n        signMessage: (msg) =>\n          signMessage(\n            msg,\n            id,\n            walletId,\n            projectId,\n            assertion.credentialId,\n            apiUrl\n          ),\n        signTypedData: (params: SignTypedDataParams) =>\n          signTypedData(\n            params,\n            id,\n            walletId,\n            projectId,\n            assertion.credentialId,\n            apiUrl\n          ),\n      };\n      return owner;\n    } catch (e) {\n      console.log(e);\n    }\n  }\n  return;\n}\n"]}