import type { ZeroDevProvider } from "../provider.js";
import { type UserOperationStruct, type BigNumberish } from "@alchemy/aa-core";
import { BaseError } from "viem";
import { type PaymasterAndBundlerProviders } from "../paymaster/types.js";
export declare class Eip1559FeesNotSupportedError extends BaseError {
    name: string;
    constructor();
}
export declare const withZeroDevGasEstimator: (provider: ZeroDevProvider) => ZeroDevProvider;
export declare const estimateCreationGas: (provider: ZeroDevProvider, initCode?: string) => Promise<bigint>;
export declare const getPreVerificationGas: (userOp: Partial<UserOperationStruct>) => Promise<number>;
export declare const GAS_PRICE_RPC_METHODS_BY_BUNDLER: {
    [K in PaymasterAndBundlerProviders]: string;
};
export declare const eip1559GasPrice: (provider: ZeroDevProvider) => Promise<{
    maxFeePerGas: bigint;
    maxPriorityFeePerGas: bigint;
}>;
interface FeeData {
    maxFeePerGas: BigNumberish | null;
    maxPriorityFeePerGas: BigNumberish | null;
}
export declare const getFeeData: (provider: ZeroDevProvider) => Promise<FeeData>;
export {};
//# sourceMappingURL=gas-estimator.d.ts.map