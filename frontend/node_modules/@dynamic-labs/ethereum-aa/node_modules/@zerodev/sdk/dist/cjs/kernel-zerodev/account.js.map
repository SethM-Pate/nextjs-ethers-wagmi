{"version":3,"file":"account.js","sourceRoot":"","sources":["../../../src/kernel-zerodev/account.ts"],"names":[],"mappings":"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","sourcesContent":["import type { Address } from \"abitype\";\nimport {\n  concatHex,\n  encodeFunctionData,\n  type FallbackTransport,\n  hashMessage,\n  type Hex,\n  toBytes,\n  type Transport,\n} from \"viem\";\nimport { KernelBaseValidator } from \"./validator/base.js\";\nimport { KernelAccountAbi } from \"./abis/KernelAccountAbi.js\";\nimport { KernelFactoryAbi } from \"./abis/KernelFactoryAbi.js\";\nimport {\n  type BaseSmartAccountParams,\n  BaseSmartContractAccount,\n  type BatchUserOperationCallData,\n  type UserOperationRequest,\n  defineReadOnly,\n  type SignTypedDataParams,\n  wrapWith6492,\n} from \"@alchemy/aa-core\";\nimport {\n  BUNDLER_URL,\n  ENTRYPOINT_ADDRESS,\n  KERNEL_FACTORY_ADDRESS,\n  KERNEL_IMPL_ADDRESS,\n  MULTISEND_ADDR,\n} from \"./constants.js\";\nimport { encodeMultiSend, getChain } from \"./utils.js\";\nimport { MultiSendAbi } from \"./abis/MultiSendAbi.js\";\nimport { polygonMumbai } from \"viem/chains\";\nimport { getChainId } from \"./api/index.js\";\nimport { createZeroDevPublicErc4337Client } from \"./client/create-client.js\";\nimport type { PaymasterAndBundlerProviders } from \"./paymaster/types.js\";\n\nexport enum DeploymentState {\n  UNDEFINED = \"0x0\",\n  NOT_DEPLOYED = \"0x1\",\n  DEPLOYED = \"0x2\",\n}\nexport interface KernelSmartAccountParams<\n  TTransport extends Transport | FallbackTransport = Transport\n> extends Partial<BaseSmartAccountParams<TTransport>> {\n  projectId: string;\n  factoryAddress?: Address;\n  index?: bigint;\n  validator?: KernelBaseValidator;\n  bundlerProvider?: PaymasterAndBundlerProviders;\n  defaultValidator?: KernelBaseValidator;\n  initCode?: Hex;\n}\n\nexport function isKernelAccount(\n  account: any\n): account is KernelSmartContractAccount {\n  return account && account.connectValidator !== undefined;\n}\n\nexport class KernelSmartContractAccount<\n  TTransport extends Transport | FallbackTransport = Transport\n> extends BaseSmartContractAccount<TTransport> {\n  private readonly factoryAddress: Address;\n  private readonly index: bigint;\n  private initCode?: Hex;\n  validator?: KernelBaseValidator;\n  defaultValidator?: KernelBaseValidator;\n\n  constructor(params: KernelSmartAccountParams) {\n    super({\n      ...params,\n      entryPointAddress: params.entryPointAddress ?? ENTRYPOINT_ADDRESS,\n      chain: params.chain ?? polygonMumbai,\n      rpcClient: params.rpcClient ?? BUNDLER_URL,\n    });\n    this.index = params.index ?? 0n;\n    this.factoryAddress = params.factoryAddress ?? KERNEL_FACTORY_ADDRESS;\n    this.validator = params.validator;\n    this.defaultValidator = params.defaultValidator;\n    this.initCode = params.initCode;\n  }\n\n  public static async init(\n    params: KernelSmartAccountParams\n  ): Promise<KernelSmartContractAccount> {\n    const chainId = await getChainId(params.projectId);\n    if (!chainId) {\n      throw new Error(\"ChainId not found\");\n    }\n    const chain = getChain(chainId);\n    const rpcClient =\n      typeof params.rpcClient === \"string\"\n        ? createZeroDevPublicErc4337Client({\n            chain,\n            rpcUrl: params.rpcClient,\n            bundlerRpcUrl: params.rpcClient ?? BUNDLER_URL,\n            projectId: params.projectId,\n            bundlerProvider: params.bundlerProvider,\n          })\n        : params.rpcClient;\n    const instance = new KernelSmartContractAccount({\n      ...params,\n      chain,\n      rpcClient,\n    });\n    return instance;\n  }\n\n  connectValidator(validator: KernelBaseValidator): this {\n    defineReadOnly(this, \"validator\", validator);\n    return this;\n  }\n\n  getValidator(): KernelBaseValidator {\n    if (!this.validator) {\n      throw new Error(\"Validator not connected\");\n    }\n    return this.validator;\n  }\n\n  getDummySignature(): Hex {\n    return \"0x00000000870fe151d548a1c527c3804866fab30abf28ed17b79d5fc5149f19ca0819fefc3c57f3da4fdf9b10fab3f2f3dca536467ae44943b9dbb8433efe7760ddd72aaa1c\";\n  }\n\n  async getInitCode(): Promise<Hex> {\n    if (this.deploymentState === DeploymentState.DEPLOYED) {\n      return \"0x\";\n    }\n    const contractCode = await this.rpcProvider.getContractCode(\n      await this.getAddress()\n    );\n\n    if ((contractCode?.length ?? 0) > 2) {\n      this.deploymentState = DeploymentState.DEPLOYED;\n      return \"0x\";\n    } else {\n      this.deploymentState = DeploymentState.NOT_DEPLOYED;\n    }\n\n    return this.initCode ?? this.getAccountInitCode();\n  }\n\n  getIndex(): bigint {\n    return this.index;\n  }\n\n  async approvePlugin() {\n    if (!this.validator) {\n      throw new Error(\"Validator not connected\");\n    }\n    if (this.defaultValidator && !this.validator.getEnableSignature()) {\n      const { executor, selector, validAfter, validUntil } =\n        this.validator.getPluginValidatorData();\n      const enableSig = await this.defaultValidator.approveExecutor(\n        await this.getAddress(),\n        selector,\n        executor,\n        validUntil,\n        validAfter,\n        this.validator\n      );\n      this.validator.setEnableSignature(enableSig);\n    }\n  }\n\n  async encodeExecute(target: Hex, value: bigint, data: Hex): Promise<Hex> {\n    if (!this.validator) {\n      throw new Error(\"Validator not connected\");\n    }\n    if (\n      target.toLowerCase() === (await this.getAddress()).toLowerCase() &&\n      this.validator.shouldDelegateViaFallback()\n    ) {\n      return data;\n    } else {\n      return this.encodeExecuteAction(target, value, data, 0);\n    }\n  }\n\n  async encodeBatchExecute(\n    _txs: BatchUserOperationCallData\n  ): Promise<`0x${string}`> {\n    const kernelImplAddr = await this.getKernelImplementationAddess();\n    const initCode = await this.getInitCode();\n    // [TODO] - Remove this check once the kernel implementation is updated\n    // Also, remove the check for the hardcoded kernel implementation address\n    const shouldUseMultiSend =\n      kernelImplAddr?.toLowerCase() !== KERNEL_IMPL_ADDRESS.toLowerCase() &&\n      kernelImplAddr?.toLowerCase() !==\n        \"0x8dD4DBB54d8A8Cf0DE6F9CCC4609470A30EfF18C\".toLowerCase() &&\n      kernelImplAddr?.toLowerCase() !==\n        \"0xd3f582f6b4814e989ee8e96bc3175320b5a540ab\".toLowerCase() &&\n      initCode === \"0x\";\n    if (shouldUseMultiSend) {\n      const multiSendCalldata = encodeFunctionData({\n        abi: MultiSendAbi,\n        functionName: \"multiSend\",\n        args: [encodeMultiSend(_txs)],\n      });\n      return await this.encodeExecuteDelegate(\n        MULTISEND_ADDR,\n        BigInt(0),\n        multiSendCalldata\n      );\n    }\n    return await this.encodeExecuteBatchAction(_txs);\n  }\n\n  async encodeExecuteDelegate(\n    target: Hex,\n    value: bigint,\n    data: Hex\n  ): Promise<Hex> {\n    return this.encodeExecuteAction(target, value, data, 1);\n  }\n\n  async encodeSetExection() {\n    if (!this.validator) {\n      throw new Error(\"Validator not connected\");\n    }\n    const { executor, selector, validAfter, validUntil } =\n      await this.validator.getPluginValidatorData();\n    const enableData = await this.validator.getEnableData();\n    return encodeFunctionData({\n      abi: KernelAccountAbi,\n      functionName: \"setExecution\",\n      args: [\n        selector,\n        executor,\n        this.validator.validatorAddress,\n        validUntil,\n        validAfter,\n        enableData,\n      ],\n    });\n  }\n\n  async encodeUgradeTo() {\n    return encodeFunctionData({\n      abi: KernelAccountAbi,\n      functionName: \"upgradeTo\",\n      args: [KERNEL_IMPL_ADDRESS],\n    });\n  }\n\n  async getKernelImplementationAddess(): Promise<Hex | undefined> {\n    try {\n      const strgAddr = await this.rpcProvider.getStorageAt({\n        address: await this.getAddress(),\n        slot: \"0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc\",\n      });\n      return strgAddr ? ((\"0x\" + strgAddr.slice(26)) as Hex) : strgAddr;\n    } catch (error) {\n      return;\n    }\n  }\n\n  async signMessageWith6492(msg: string | Uint8Array): Promise<Hex> {\n    try {\n      if (!this.validator) {\n        throw new Error(\"Validator not connected\");\n      }\n      const formattedMessage = typeof msg === \"string\" ? toBytes(msg) : msg;\n      let signature = await this.validator.signMessage(\n        toBytes(hashMessage({ raw: formattedMessage }))\n      );\n      // If the account is undeployed, use ERC-6492\n      if (!(await this.isAccountDeployed())) {\n        signature = wrapWith6492({\n          factoryAddress: this.factoryAddress,\n          initCode: await this.getFactoryInitCode(),\n          signature,\n        });\n      }\n\n      return signature;\n    } catch (err: any) {\n      console.error(\"Got Error - \", err.message);\n      throw new Error(\"Message Signing with EIP6492 failed\");\n    }\n  }\n\n  async signTypedDataWith6492(params: SignTypedDataParams): Promise<Hex> {\n    try {\n      if (!this.validator) {\n        throw new Error(\"Validator not connected\");\n      }\n      let signature = await this.validator.signTypedData(params);\n      // If the account is undeployed, use ERC-6492\n      if (!(await this.isAccountDeployed())) {\n        signature = wrapWith6492({\n          factoryAddress: this.factoryAddress,\n          initCode: await this.getFactoryInitCode(),\n          signature,\n        });\n      }\n\n      return signature;\n    } catch (err: any) {\n      console.error(\"Got Error - \", err.message);\n      throw new Error(\"Message Signing with EIP6492 failed\");\n    }\n  }\n\n  async signMessage(msg: Uint8Array | string): Promise<Hex> {\n    if (!this.validator) {\n      throw new Error(\"Validator not connected\");\n    }\n    const formattedMessage = typeof msg === \"string\" ? toBytes(msg) : msg;\n    return await this.validator.signMessage(formattedMessage);\n  }\n\n  async signTypedData(params: SignTypedDataParams): Promise<Hex> {\n    if (!this.validator) {\n      throw new Error(\"Validator not connected\");\n    }\n    return await this.validator.signTypedData(params);\n  }\n\n  signUserOp(userOp: UserOperationRequest): Promise<Hex> {\n    if (!this.validator) {\n      throw new Error(\"Validator not connected\");\n    }\n    return this.validator.signUserOp(userOp);\n  }\n\n  protected encodeExecuteAction(\n    target: Hex,\n    value: bigint,\n    data: Hex,\n    code: number\n  ): Hex {\n    return encodeFunctionData({\n      abi: KernelAccountAbi,\n      functionName: \"execute\",\n      args: [target, value, data, code],\n    });\n  }\n\n  protected encodeExecuteBatchAction(_txs: BatchUserOperationCallData): Hex {\n    return encodeFunctionData({\n      abi: KernelAccountAbi,\n      functionName: \"executeBatch\",\n      args: [\n        _txs.map((tx) => ({\n          to: tx.target,\n          value: tx.value ?? 0n,\n          data: tx.data,\n        })),\n      ],\n    });\n  }\n\n  protected async getAccountInitCode(): Promise<Hex> {\n    return concatHex([this.factoryAddress, await this.getFactoryInitCode()]);\n  }\n\n  async getNonce(): Promise<bigint> {\n    if (!(await this.isAccountDeployed())) {\n      return 0n;\n    }\n    if (!this.validator) {\n      throw Error(\"Validator unintialized\");\n    }\n    const address = await this.getAddress();\n    const key = this.validator.getNonceKey();\n    return this.entryPoint.read.getNonce([address, key]);\n  }\n\n  protected async getFactoryInitCode(): Promise<Hex> {\n    const validator = this.defaultValidator ?? this.validator;\n    if (!validator) {\n      throw new Error(\"Validator not connected\");\n    }\n    try {\n      return encodeFunctionData({\n        abi: KernelFactoryAbi,\n        functionName: \"createAccount\",\n        args: [\n          KERNEL_IMPL_ADDRESS,\n          encodeFunctionData({\n            abi: KernelAccountAbi,\n            functionName: \"initialize\",\n            args: [validator.getAddress(), await validator.getEnableData()],\n          }),\n          this.index,\n        ],\n      });\n    } catch (err: any) {\n      console.error(\"err occurred:\", err.message);\n      throw new Error(\"Factory Code generation failed\");\n    }\n  }\n}\n"]}