import { createPublicErc4337FromClient, } from "@alchemy/aa-core";
import { http, createPublicClient, custom } from "viem";
import { BUNDLER_URL, CHAIN_ID_TO_NODE } from "../constants.js";
function isMethodInErc4337RpcSchema(variable) {
    return [
        "eth_sendUserOperation",
        "eth_estimateUserOperationGas",
        "eth_getUserOperationReceipt",
        "eth_getUserOperationByHash",
        "eth_supportedEntryPoints",
        "eth_maxPriorityFeePerGas",
        "rundler_maxPriorityFeePerGas",
        "pimlico_getUserOperationGasPrice",
    ].includes(variable);
}
export const createZeroDevPublicErc4337Client = ({ chain, rpcUrl, bundlerRpcUrl, projectId, bundlerProvider, }) => {
    const erc4337Transport = http(bundlerRpcUrl ?? BUNDLER_URL, {
        fetchOptions: {
            headers: bundlerRpcUrl === BUNDLER_URL ? { projectId, bundlerProvider } : {},
        },
        name: "Connected bundler network",
        key: "connected-bundler-network",
        retryCount: 0,
        timeout: 35000,
    });
    const publicTransport = http(rpcUrl ?? CHAIN_ID_TO_NODE[chain.id]);
    let client = createPublicErc4337FromClient(createPublicClient({
        chain,
        transport: custom({
            async request({ method, params }) {
                let response;
                if (isMethodInErc4337RpcSchema(method)) {
                    response = await erc4337Transport({ chain }).request({
                        method,
                        params,
                    });
                }
                else {
                    response = await publicTransport({ chain }).request({
                        method,
                        params,
                    });
                }
                return response;
            },
        }),
    }));
    return client;
};
//# sourceMappingURL=create-client.js.map