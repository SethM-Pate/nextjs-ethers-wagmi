import { ValidatorProvider, type ExtendedValidatorProviderParams, type ValidatorProviderParams } from "./base.js";
import { SessionKeyValidator, type SessionKeyParams, type SessionKeyValidatorParams } from "../validator/session-key-validator.js";
import { type Hex, type SmartAccountSigner } from "@alchemy/aa-core";
import type { RequiredProps, WithRequired } from "../types.js";
import type { KernelBaseValidatorParams } from "../validator/base.js";
export type PrefillSessionData = {
    sessionKeyParams: SessionKeyParams & WithRequired<SessionKeyParams, "sessionPrivateKey">;
};
export type SessionKeyProviderParams = PrefillSessionData & ValidatorProviderParams<SessionKeyValidatorParams> & Partial<SessionKeyValidatorParams> & RequiredProps<KernelBaseValidatorParams>;
export declare class SessionKeyProvider extends ValidatorProvider<SessionKeyValidator, SessionKeyValidatorParams> {
    constructor(params: ExtendedValidatorProviderParams<SessionKeyValidatorParams>);
    static init(params: ExtendedValidatorProviderParams<SessionKeyValidatorParams>): Promise<SessionKeyProvider>;
    static fromSessionKeyParams(params: SessionKeyProviderParams, signer?: SmartAccountSigner): Promise<SessionKeyProvider>;
    serializeSessionKeyParams(sessionPrivateKey?: Hex): Promise<string>;
    static deserializeSessionKeyParams(sessionKeyParams: string): PrefillSessionData["sessionKeyParams"];
    changeSessionKeyData: (enableData: `0x${string}`) => Promise<import("@alchemy/aa-core").SendUserOperationResult>;
    deleteSessionKey: (disableData?: `0x${string}`) => Promise<import("@alchemy/aa-core").SendUserOperationResult>;
}
