import type { SignTypedDataParams } from "@alchemy/aa-core";
export declare const abortController: {
    controller: AbortController;
};
export declare function abortWebauthn(): void;
export declare const publicKey = "public-key";
export declare const es256 = -7;
export declare const generateRandomBuffer: () => ArrayBuffer;
export declare const base64UrlEncode: (challenge: ArrayBuffer) => string;
export declare const signMessageImplementation: (msg: string, id: string, walletId: string, projectId: string, credentialId: string, apiUrl?: string) => Promise<`0x${string}`>;
export declare const signMessage: (msg: string | Uint8Array, id: string, walletId: string, projectId: string, credentialId: string, apiUrl?: string) => Promise<`0x${string}`>;
export declare const signTypedData: (params: SignTypedDataParams, id: string, walletId: string, projectId: string, credentialId: string, apiUrl?: string) => Promise<`0x${string}`>;
export declare const getCredentials: (projectId: string, name?: string, apiUrl?: string) => Promise<any>;
export declare function base64URLStringToBuffer(base64URLString: string): ArrayBuffer;
//# sourceMappingURL=utils.d.ts.map