"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.KillSwitchValidator = void 0;
const aa_core_1 = require("@alchemy/aa-core");
const base_js_1 = require("./base.js");
const viem_1 = require("viem");
const KillSwitchValidatorAbi_js_1 = require("../abis/KillSwitchValidatorAbi.js");
const index_js_1 = require("../api/index.js");
const constants_js_1 = require("../constants.js");
const KernelAccountAbi_js_1 = require("../abis/KernelAccountAbi.js");
const utils_js_1 = require("../utils.js");
class KillSwitchValidator extends base_js_1.KernelBaseValidator {
    constructor(params) {
        super(params);
        Object.defineProperty(this, "guardian", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "delaySeconds", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.guardian = params.guardian;
        this.delaySeconds = params.delaySeconds;
        this.mode = params.mode ?? base_js_1.ValidatorMode.plugin;
    }
    static async init(params) {
        const chainId = await (0, index_js_1.getChainId)(params.projectId);
        if (!chainId) {
            throw new Error("ChainId not found");
        }
        const chain = (0, utils_js_1.getChain)(chainId);
        const instance = new KillSwitchValidator({ ...params, chain });
        return instance;
    }
    async signer() {
        return await Promise.resolve(this.guardian);
    }
    async getEnableData() {
        return await (await this.signer()).getAddress();
    }
    getPausedUntil() {
        return Math.floor(Date.now() / 1000) + this.delaySeconds;
    }
    encodeEnable(newGuardian) {
        return (0, viem_1.encodeFunctionData)({
            abi: KillSwitchValidatorAbi_js_1.KillSwitchValidatorAbi,
            functionName: "enable",
            args: [newGuardian],
        });
    }
    encodeDisable(disableData = "0x") {
        return (0, viem_1.encodeFunctionData)({
            abi: KillSwitchValidatorAbi_js_1.KillSwitchValidatorAbi,
            functionName: "disable",
            args: [disableData],
        });
    }
    async isPluginEnabled(kernelAccountAddress, selector) {
        if (!this.publicClient) {
            throw new Error("Validator uninitialized: PublicClient missing");
        }
        const kernel = (0, viem_1.getContract)({
            abi: KernelAccountAbi_js_1.KernelAccountAbi,
            address: kernelAccountAddress,
            publicClient: this.publicClient,
        });
        const execDetail = await kernel.read.getExecution([selector]);
        const enableData = await this.publicClient.readContract({
            abi: KillSwitchValidatorAbi_js_1.KillSwitchValidatorAbi,
            address: this.validatorAddress,
            functionName: "killSwitchValidatorStorage",
            args: [kernelAccountAddress],
        });
        const pausedUntil = Math.floor(Date.now() / 1000) + this.delaySeconds;
        return (execDetail.validator.toLowerCase() ===
            this.validatorAddress.toLowerCase() &&
            enableData[0] === (await this.getEnableData()) &&
            enableData[3] === (await kernel.read.getDisabledMode()) &&
            enableData[2] === pausedUntil &&
            enableData[1].toLowerCase() ===
                (await kernel.read.getDefaultValidator()).toLowerCase());
    }
    async getDummyUserOpSignature() {
        if (this.mode === base_js_1.ValidatorMode.sudo) {
            return constants_js_1.DUMMY_ECDSA_SIG;
        }
        return (0, viem_1.concatHex)([(0, viem_1.pad)("0xffffffffffff", { size: 6 }), constants_js_1.DUMMY_ECDSA_SIG]);
    }
    async signMessage(message) {
        return await this.guardian.signMessage(message);
    }
    async signTypedData(params) {
        return (0, utils_js_1.fixSignedData)(await this.guardian.signTypedData(params));
    }
    async signUserOp(userOp) {
        const pausedUntil = this.getPausedUntil();
        if (!this.chain) {
            throw new Error("Validator uninitialized");
        }
        const hash = (0, aa_core_1.getUserOperationHash)({
            ...userOp,
            signature: "0x",
        }, this.entryPointAddress, BigInt(this.chain.id));
        if (this.mode === base_js_1.ValidatorMode.sudo) {
            const formattedMessage = typeof hash === "string" ? (0, viem_1.toBytes)(hash) : hash;
            return await this.guardian.signMessage(formattedMessage);
        }
        const extendedHash = (0, viem_1.keccak256)((0, viem_1.concat)([(0, viem_1.pad)((0, viem_1.toHex)(pausedUntil), { size: 6 }), hash]));
        const signature = (0, viem_1.concat)([
            (0, viem_1.pad)((0, viem_1.toHex)(pausedUntil), { size: 6 }),
            await this.guardian.signMessage((0, viem_1.toBytes)(extendedHash)),
        ]);
        return signature;
    }
}
exports.KillSwitchValidator = KillSwitchValidator;
//# sourceMappingURL=kill-switch-validator.js.map