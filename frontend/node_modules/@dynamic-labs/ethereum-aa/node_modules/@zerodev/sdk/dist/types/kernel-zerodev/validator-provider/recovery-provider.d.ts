import { ValidatorProvider, type ExtendedValidatorProviderParams } from "./base.js";
import { RecoveryValidator, type RecoveryConfig, type RecoveryValidatorParams } from "../validator/recovery-validator.js";
import { type Address, type SendUserOperationResult } from "@alchemy/aa-core";
import { type Hex, type TransactionReceipt } from "viem";
export interface RecoveryProviderParams extends ExtendedValidatorProviderParams<RecoveryValidatorParams> {
    recoveryId?: string;
    enableData?: Hex;
}
export declare class RecoveryProvider extends ValidatorProvider<RecoveryValidator, RecoveryValidatorParams> {
    recoveryId?: string;
    enableData?: Hex;
    constructor(params: RecoveryProviderParams);
    static init(params: RecoveryProviderParams): Promise<RecoveryProvider>;
    getDefaultValidator(): Promise<Address>;
    encodeCalldataAndNonce(enableData: Hex): Promise<Hex>;
    enableRecovery(): Promise<SendUserOperationResult>;
    renewRecovery(): Promise<SendUserOperationResult>;
    initiateRecovery(enableData: Hex): Promise<string>;
    serializeRecoveryConfig(): string;
    static deserializeRecoveryConfig(recoveryConfig: string): RecoveryConfig;
    approveRecovery(enableData?: Hex): Promise<TransactionReceipt>;
    signRecovery(enableData?: Hex): Promise<void>;
    approveRecoveryWithSig(enableData?: Hex, sigs?: Hex): Promise<TransactionReceipt>;
    cancelRecovery(enableData?: Hex): Promise<SendUserOperationResult>;
    submitRecovery(enableData?: Hex): Promise<SendUserOperationResult>;
    getApproval(enableData?: Hex): Promise<readonly [bigint, boolean]>;
    deleteRecoveryData: (disableData?: `0x${string}`) => Promise<SendUserOperationResult>;
}
//# sourceMappingURL=recovery-provider.d.ts.map