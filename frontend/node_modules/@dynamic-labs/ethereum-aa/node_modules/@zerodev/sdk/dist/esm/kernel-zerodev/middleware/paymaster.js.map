{"version":3,"file":"paymaster.js","sourceRoot":"","sources":["../../../../src/kernel-zerodev/middleware/paymaster.ts"],"names":[],"mappings":"AAAA,OAAO,EAAsC,MAAM,kBAAkB,CAAC;AAEtE,OAAO,EAAE,UAAU,EAAE,MAAM,uBAAuB,CAAC;AAEnD,OAAO,EAAE,UAAU,EAAE,MAAM,OAAO,CAAC;AAEnC,MAAM,CAAC,MAAM,2BAA2B,GAAG,CACzC,QAAkB,EAClB,eAAiD,EACvC,EAAE;IACZ,QAAQ,CAAC,uBAAuB,CAC9B,iCAAiC,CAAC,QAAQ,EAAE,eAAe,CAAC,CAC7D,CAAC;IAEF,OAAO,QAAQ,CAAC;AAClB,CAAC,CAAC;AAEF,MAAM,CAAC,MAAM,iCAAiC,GAAG,CAI/C,QAAkB,EAClB,eAAmC,EAG9B,EAAE;IACP,OAAO;QACL,4BAA4B,EAAE,KAAK,EAAE,MAAM,EAAE,EAAE;YAC7C,MAAM,CAAC,gBAAgB;gBACrB,8aAA8a,CAAC;YACjb,OAAO,MAAM,CAAC;QAChB,CAAC;QACD,uBAAuB,EAAE,KAAK,EAAE,MAAM,EAAE,EAAE;YACxC,MAAM,kBAAkB,GAAG,MAAM,CAAC,QAAQ,CAAC,CAAC;YAC5C,MAAM,oBAAoB,GAAG,MAAM,CAAC,SAAS,CAAC,CAAC;YAC/C,MAAM,YAAY,GAAG,MAAM,CAAC,OAAO,CAAC,CAAC;YACrC,MAAM,SAAS,GAAG,IAAI,UAAU,CAAC,eAAe,CAAC,MAAM,CAAC,CACtD,QAAQ,EACR,eAAe,CAChB,CAAC;YACF,IAAI,aAAa,CAAC;YAClB,IAAI;gBACF,aAAa,GAAG,MAAM,SAAS,CAAC,oBAAoB,CAClD;oBACE,GAAG,MAAM;oBACT,kBAAkB;oBAClB,oBAAoB;oBACpB,YAAY;iBACb,EACD,eAAe,CAAC,iBAAiB,EACjC,KAAK,EACL,QAAQ,CAAC,aAAa,EAAE,CACzB,CAAC;aACH;YAAC,OAAO,KAAU,EAAE;gBACnB,OAAO,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;gBACrB,IAAI,eAAe,CAAC,4BAA4B,EAAE;oBAChD,IAAI,KAAK,YAAY,UAAU;wBAC7B,MAAM,KAAK,CAAC,KAAK,CAAC,QAAQ,EAAE,IAAI,CAAC,OAAO,CAAC,CAAC;;wBACvC,MAAM,KAAK,CAAC;iBAClB;aACF;YACD,IACE,eAAe,CAAC,4BAA4B;gBAC5C,CAAC,CAAC,aAAa;oBACb,CAAC,aAAa,CAAC,gBAAgB;oBAC/B,aAAa,CAAC,gBAAgB,KAAK,IAAI,CAAC,EAC1C;gBACA,MAAM,IAAI,KAAK,CAAC,8BAA8B,CAAC,CAAC;aACjD;YACD,IACE,CAAC,aAAa;gBACd,CAAC,aAAa,CAAC,gBAAgB;gBAC/B,aAAa,CAAC,gBAAgB,KAAK,IAAI,EACvC;gBACA,OAAO;oBACL,GAAG,MAAM;oBACT,gBAAgB,EAAE,IAAI;iBACvB,CAAC;aACH;YACD,OAAO;gBACL,GAAG,MAAM;gBACT,GAAG,aAAa;aACjB,CAAC;QACJ,CAAC;KACF,CAAC;AACJ,CAAC,CAAC","sourcesContent":["import { type ConnectedSmartAccountProvider } from \"@alchemy/aa-core\";\nimport type { ZeroDevProvider } from \"../provider.js\";\nimport { Paymasters } from \"../paymaster/index.js\";\nimport type { PaymasterConfig, PaymasterPolicy } from \"../paymaster/types.js\";\nimport { AxiosError } from \"axios\";\n\nexport const withZeroDevPaymasterAndData = <Provider extends ZeroDevProvider>(\n  provider: Provider,\n  paymasterConfig: PaymasterConfig<PaymasterPolicy>\n): Provider => {\n  provider.withPaymasterMiddleware(\n    zeroDevPaymasterAndDataMiddleware(provider, paymasterConfig)\n  );\n\n  return provider;\n};\n\nexport const zeroDevPaymasterAndDataMiddleware = <\n  Provider extends ZeroDevProvider,\n  P extends PaymasterPolicy\n>(\n  provider: Provider,\n  paymasterConfig: PaymasterConfig<P>\n): Parameters<\n  ConnectedSmartAccountProvider[\"withPaymasterMiddleware\"]\n>[\"0\"] => {\n  return {\n    dummyPaymasterDataMiddleware: async (struct) => {\n      struct.paymasterAndData =\n        \"0xe93eca6595fe94091dc1af46aac2a8b5d79907700000000000000000000000000000000000000000000000000000000064ee5cd9000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000fffffffffffffffffffffffffffffff0000000000000000000000000000000007aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa1c\";\n      return struct;\n    },\n    paymasterDataMiddleware: async (struct) => {\n      const preVerificationGas = BigInt(\"100000\");\n      const verificationGasLimit = BigInt(\"1000000\");\n      const callGasLimit = BigInt(\"55000\");\n      const paymaster = new Paymasters[paymasterConfig.policy](\n        provider,\n        paymasterConfig\n      );\n      let paymasterResp;\n      try {\n        paymasterResp = await paymaster.getPaymasterResponse(\n          {\n            ...struct,\n            preVerificationGas,\n            verificationGasLimit,\n            callGasLimit,\n          },\n          paymasterConfig.paymasterProvider,\n          false,\n          provider.shouldConsume()\n        );\n      } catch (error: any) {\n        console.error(error);\n        if (paymasterConfig.onlySendSponsoredTransaction) {\n          if (error instanceof AxiosError)\n            throw Error(error.response?.data.message);\n          else throw error;\n        }\n      }\n      if (\n        paymasterConfig.onlySendSponsoredTransaction &&\n        (!paymasterResp ||\n          !paymasterResp.paymasterAndData ||\n          paymasterResp.paymasterAndData === \"0x\")\n      ) {\n        throw new Error(\"Transaction is not sponsored\");\n      }\n      if (\n        !paymasterResp ||\n        !paymasterResp.paymasterAndData ||\n        paymasterResp.paymasterAndData === \"0x\"\n      ) {\n        return {\n          ...struct,\n          paymasterAndData: \"0x\",\n        };\n      }\n      return {\n        ...struct,\n        ...paymasterResp,\n      };\n    },\n  };\n};\n"]}