"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Paymaster = void 0;
const aa_core_1 = require("@alchemy/aa-core");
const axios_1 = __importDefault(require("axios"));
const constants_js_1 = require("../constants.js");
const ERC4337_utils_js_1 = require("../utils/ERC4337-utils.js");
const index_js_1 = require("../api/index.js");
class Paymaster {
    constructor(provider) {
        Object.defineProperty(this, "provider", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: provider
        });
    }
    async signUserOp({ userOp, callData, gasTokenAddress, erc20UserOp, erc20CallData, paymasterProvider, shouldOverrideFee = false, shouldConsume = true, }) {
        const hexifiedUserOp = (0, aa_core_1.deepHexlify)(await (0, aa_core_1.resolveProperties)(userOp));
        let resolvedERC20UserOp;
        let hexifiedERC20UserOp;
        if (erc20UserOp) {
            resolvedERC20UserOp = await (0, aa_core_1.resolveProperties)(erc20UserOp);
            hexifiedERC20UserOp = (0, ERC4337_utils_js_1.hexifyUserOp)(resolvedERC20UserOp);
        }
        const chainId = await (0, index_js_1.getChainId)(this.provider.getProjectId());
        if (!chainId)
            throw new Error("ChainId not found");
        let requestBodyParams = Object.fromEntries(Object.entries({
            projectId: this.provider.getProjectId(),
            chainId,
            userOp: hexifiedUserOp,
            entryPointAddress: constants_js_1.ENTRYPOINT_ADDRESS,
            callData: callData instanceof Promise ? await callData : callData,
            gasTokenData: gasTokenAddress && hexifiedERC20UserOp && erc20CallData
                ? {
                    tokenAddress: gasTokenAddress,
                    erc20UserOp: hexifiedERC20UserOp,
                    erc20CallData: erc20CallData instanceof Promise
                        ? await erc20CallData
                        : erc20CallData,
                }
                : undefined,
            tokenAddress: gasTokenAddress,
            erc20UserOp: hexifiedERC20UserOp,
            erc20CallData: erc20CallData instanceof Promise
                ? await erc20CallData
                : erc20CallData,
            paymasterProvider,
            shouldOverrideFee,
            shouldConsume,
        }).filter(([_, value]) => value !== undefined));
        const { data: paymasterResp } = await axios_1.default.post(`${constants_js_1.PAYMASTER_URL}/getPaymasterAndData`, {
            ...requestBodyParams,
        }, { headers: { "Content-Type": "application/json" } });
        return paymasterResp;
    }
}
exports.Paymaster = Paymaster;
//# sourceMappingURL=base.js.map