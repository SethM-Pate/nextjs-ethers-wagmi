{"version":3,"file":"provider.js","sourceRoot":"","sources":["../../../src/kernel-zerodev/provider.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  fromHex,\n  type Address,\n  type Chain,\n  type Hash,\n  type Hex,\n  type HttpTransport,\n  type RpcTransactionRequest,\n  getAbiItem,\n} from \"viem\";\nimport {\n  deepHexlify,\n  resolveProperties,\n  type SmartAccountProviderOpts,\n  type UserOperationCallData,\n  type BatchUserOperationCallData,\n  type SendUserOperationResult,\n  asyncPipe,\n  noOpMiddleware,\n  type UserOperationStruct,\n  type BytesLike,\n  SmartAccountProvider,\n  type AccountMiddlewareFn,\n  type UserOperationOverrides,\n  EntryPointAbi,\n} from \"@alchemy/aa-core\";\nimport {\n  BUNDLER_URL,\n  DEFAULT_SEND_TX_MAX_RETRIES,\n  DEFAULT_SEND_TX_RETRY_INTERVAL_MS,\n  ENTRYPOINT_ADDRESS,\n  minPriorityFeePerBidDefaults,\n} from \"./constants.js\";\nimport { KernelSmartContractAccount, isKernelAccount } from \"./account.js\";\nimport { withZeroDevGasEstimator } from \"./middleware/gas-estimator.js\";\nimport { isValidRequest } from \"./utils/ERC4337-utils.js\";\nimport { InvalidOperation } from \"./errors.js\";\nimport { withZeroDevPaymasterAndData } from \"./middleware/paymaster.js\";\nimport { createZeroDevPublicErc4337Client } from \"./client/create-client.js\";\nimport type {\n  PaymasterAndBundlerProviders,\n  PaymasterConfig,\n  PaymasterPolicy,\n} from \"./paymaster/types.js\";\nimport { getChain } from \"./utils.js\";\n\nexport type FeeOptions = {\n  maxFeePerGasBufferPercentage?: number;\n  maxPriorityFeePerGasBufferPercentage?: number;\n};\nexport type ZeroDevProviderConfig = {\n  projectId: string;\n  chain: Chain | number;\n  entryPointAddress?: Address;\n  rpcUrl?: string;\n  bundlerRpcUrl?: string;\n  account?: KernelSmartContractAccount;\n  bundlerProvider?: PaymasterAndBundlerProviders;\n  opts?: SmartAccountProviderOpts & {\n    sendTxMaxRetries?: number;\n    sendTxRetryIntervalMs?: number;\n    feeOptions?: FeeOptions;\n  };\n};\n\nexport enum Operation {\n  Call = 0,\n  DelegateCall = 1,\n}\n\ntype UserOpDataOperationTypes<T> = T extends UserOperationCallData\n  ? Operation.Call | Operation.DelegateCall\n  : T extends BatchUserOperationCallData\n  ? Operation.Call\n  : never;\n\nexport class ZeroDevProvider extends SmartAccountProvider<HttpTransport> {\n  protected projectId: string;\n  protected sendTxMaxRetries: number;\n  protected sendTxRetryIntervalMs: number;\n  readonly bundlerProvider?: PaymasterAndBundlerProviders;\n  private _txMaxRetries: number;\n  private _txRetryIntervalMs: number;\n  private _shouldConsume: boolean = true;\n  public feeOptions: Required<FeeOptions>;\n\n  constructor({\n    projectId,\n    chain,\n    entryPointAddress = ENTRYPOINT_ADDRESS,\n    rpcUrl,\n    bundlerRpcUrl = BUNDLER_URL,\n    account,\n    bundlerProvider,\n    opts,\n  }: ZeroDevProviderConfig) {\n    const _chain = typeof chain === \"number\" ? getChain(chain) : chain;\n    const rpcClient = createZeroDevPublicErc4337Client({\n      chain: _chain,\n      rpcUrl,\n      bundlerRpcUrl,\n      projectId,\n      bundlerProvider,\n    });\n\n    super(rpcClient, entryPointAddress, _chain, account, {\n      ...opts,\n      txMaxRetries: opts?.txMaxRetries ?? 20,\n      txRetryIntervalMs: opts?.txRetryIntervalMs ?? 10000,\n      minPriorityFeePerBid:\n        opts?.minPriorityFeePerBid ??\n        minPriorityFeePerBidDefaults.get(_chain.id),\n    });\n\n    this.feeOptions = {\n      maxFeePerGasBufferPercentage:\n        opts?.feeOptions?.maxFeePerGasBufferPercentage ?? 0,\n      maxPriorityFeePerGasBufferPercentage:\n        opts?.feeOptions?.maxPriorityFeePerGasBufferPercentage ?? 13,\n    };\n    this._txMaxRetries = opts?.txMaxRetries ?? 20;\n    this._txRetryIntervalMs = opts?.txRetryIntervalMs ?? 5000;\n    this.bundlerProvider = bundlerProvider;\n    this.projectId = projectId;\n    this.sendTxMaxRetries =\n      opts?.sendTxMaxRetries ?? DEFAULT_SEND_TX_MAX_RETRIES;\n    this.sendTxRetryIntervalMs =\n      opts?.sendTxRetryIntervalMs ?? DEFAULT_SEND_TX_RETRY_INTERVAL_MS;\n\n    withZeroDevGasEstimator(this);\n  }\n\n  getProjectId = (): string => this.projectId;\n\n  shouldConsume = (): boolean => this._shouldConsume;\n\n  sendTransaction = async (\n    request: RpcTransactionRequest,\n    operation: UserOpDataOperationTypes<UserOperationCallData> = Operation.Call\n  ): Promise<Hash> => {\n    if (!request.to) {\n      throw new Error(\"transaction is missing to address\");\n    }\n\n    const overrides: UserOperationOverrides = {};\n    if (request.maxFeePerGas) {\n      overrides.maxFeePerGas = request.maxFeePerGas;\n    }\n    if (request.maxPriorityFeePerGas) {\n      overrides.maxPriorityFeePerGas = request.maxPriorityFeePerGas;\n    }\n\n    const { hash } = await this.sendUserOperation(\n      {\n        target: request.to,\n        data: request.data ?? \"0x\",\n        value: request.value ? fromHex(request.value, \"bigint\") : 0n,\n      },\n      overrides,\n      operation\n    );\n\n    return await this.waitForUserOperationTransaction(hash as Hash);\n  };\n\n  buildUserOperation = async <\n    T extends UserOperationCallData | BatchUserOperationCallData\n  >(\n    data: T,\n    overrides?: UserOperationOverrides,\n    operation: UserOpDataOperationTypes<T> = Operation.Call as UserOpDataOperationTypes<T>\n  ): Promise<UserOperationStruct> => {\n    this._shouldConsume = false;\n    if (!isKernelAccount(this.account)) {\n      throw new Error(\"account not connected!\");\n    }\n    if (!this.account.validator) {\n      throw new Error(\"validator not connected!\");\n    }\n\n    let callData: BytesLike = \"0x\";\n\n    if (Array.isArray(data)) {\n      if (operation === Operation.Call) {\n        callData = await this.account.encodeBatchExecute(data);\n      } else {\n        throw InvalidOperation;\n      }\n    } else if (isKernelAccount(this.account)) {\n      if (operation === Operation.DelegateCall) {\n        callData = await this.account.encodeExecuteDelegate(\n          data.target,\n          data.value ?? 0n,\n          data.data\n        );\n      } else if (operation === Operation.Call) {\n        callData = await this.account.encodeExecute(\n          data.target,\n          data.value ?? 0n,\n          data.data\n        );\n      } else {\n        throw InvalidOperation;\n      }\n    } else {\n      throw InvalidOperation;\n    }\n\n    const initCode = await this.account.getInitCode();\n    const nonce = await this.account.getNonce();\n    const result = await this._runMiddlewareStack(\n      {\n        initCode,\n        sender: this.getAddress(),\n        nonce,\n        callData,\n        signature: await this.account\n          .getValidator()\n          .getDynamicDummySignature(await this.getAddress(), callData as Hex),\n      } as UserOperationStruct,\n      overrides\n    );\n    this._shouldConsume = true;\n    return result;\n  };\n\n  private _runMiddlewareStack = async (\n    uo: UserOperationStruct,\n    overrides?: UserOperationOverrides\n  ): Promise<UserOperationStruct> => {\n    const result = await asyncPipe(\n      this.dummyPaymasterDataMiddleware,\n      this.feeDataGetter,\n      this.paymasterDataMiddleware,\n      this.gasEstimator,\n      this.customMiddleware ?? noOpMiddleware,\n      async (struct) => ({ ...struct, ...overrides })\n    )(uo);\n\n    return deepHexlify(await resolveProperties<UserOperationStruct>(result));\n  };\n\n  sendUserOperation = async <\n    T extends UserOperationCallData | BatchUserOperationCallData\n  >(\n    data: T,\n    overrides?: UserOperationOverrides,\n    operation: UserOpDataOperationTypes<T> = Operation.Call as UserOpDataOperationTypes<T>\n  ): Promise<SendUserOperationResult> => {\n    if (!this._shouldConsume)\n      throw new Error(\n        \"Cannot send user operation while building user operation\"\n      );\n    if (!isKernelAccount(this.account)) {\n      throw new Error(\"account not connected!\");\n    }\n    if (!this.account.validator) {\n      throw new Error(\"validator not connected!\");\n    }\n\n    let callData: BytesLike = \"0x\";\n\n    if (Array.isArray(data)) {\n      if (operation === Operation.Call) {\n        callData = await this.account.encodeBatchExecute(data);\n      } else {\n        throw InvalidOperation;\n      }\n    } else if (isKernelAccount(this.account)) {\n      if (operation === Operation.DelegateCall) {\n        callData = await this.account.encodeExecuteDelegate(\n          data.target,\n          data.value ?? 0n,\n          data.data\n        );\n      } else if (operation === Operation.Call) {\n        callData = await this.account.encodeExecute(\n          data.target,\n          data.value ?? 0n,\n          data.data\n        );\n      } else {\n        throw InvalidOperation;\n      }\n    } else {\n      throw InvalidOperation;\n    }\n\n    const initCode = await this.account.getInitCode();\n    let hash: string = \"\";\n    let i = 0;\n    const nonce = await this.account.getNonce();\n    let uoStruct: UserOperationStruct;\n    let request: UserOperationStruct;\n    let maxFeePerGas, maxPriorityFeePerGas;\n    do {\n      uoStruct = await asyncPipe(\n        this.dummyPaymasterDataMiddleware,\n        this.feeDataGetter,\n        this.paymasterDataMiddleware,\n        this.gasEstimator,\n        this.customMiddleware ?? noOpMiddleware,\n        async (struct) => ({ ...struct, ...overrides })\n      )({\n        initCode,\n        sender: this.getAddress(),\n        nonce,\n        callData,\n        signature: await this.account\n          .getValidator()\n          .getDynamicDummySignature(await this.getAddress(), callData as Hex),\n        maxFeePerGas,\n        maxPriorityFeePerGas,\n      } as UserOperationStruct);\n      request = deepHexlify(await resolveProperties(uoStruct));\n\n      if (!isValidRequest(request)) {\n        // this pretty prints the uo\n        throw new Error(\n          `Request is missing parameters. All properties on UserOperationStruct must be set. uo: ${JSON.stringify(\n            request,\n            null,\n            2\n          )}`\n        );\n      }\n\n      await this.account.approvePlugin();\n\n      request.signature = await this.account.validator.getSignature(request);\n      try {\n        hash = await this.rpcClient.sendUserOperation(\n          request,\n          this.entryPointAddress\n        );\n      } catch (error: any) {\n        if (this.isReplacementOpError(error) && i++ < this.sendTxMaxRetries) {\n          maxFeePerGas = (BigInt(request.maxFeePerGas) * 113n) / 100n;\n          maxPriorityFeePerGas =\n            (BigInt(request.maxPriorityFeePerGas) * 113n) / 100n;\n\n          console.log(\n            `After ${\n              this.sendTxRetryIntervalMs / 60000\n            } minutes, resending tx with Increased Gas fees: maxFeePerGas: ${maxFeePerGas}, maxPriorityFeePerGas: ${maxPriorityFeePerGas}`\n          );\n          await new Promise((resolve) =>\n            setTimeout(resolve, this.sendTxRetryIntervalMs)\n          );\n          continue;\n        }\n        throw this.unwrapError(error);\n      }\n    } while (hash === \"\");\n\n    return {\n      hash,\n      request,\n    };\n  };\n\n  isReplacementOpError(errorIn: any): boolean {\n    if (errorIn.cause != null) {\n      const failedOpMessage: string | undefined = errorIn?.cause?.message;\n      return (\n        (failedOpMessage?.includes(\n          \"replacement op must increase maxFeePerGas and MaxPriorityFeePerGas\"\n        ) ||\n          failedOpMessage?.match(/.*replacement.*underpriced.*/) !== null) ??\n        false\n      );\n    }\n    return false;\n  }\n\n  unwrapError(errorIn: any): Error {\n    if (errorIn?.cause != null) {\n      let paymasterInfo: string = \"\";\n      let failedOpMessage: string | undefined = errorIn?.cause?.message;\n      if (failedOpMessage?.includes(\"FailedOp\") === true) {\n        // TODO: better error extraction methods will be needed\n        const matched = failedOpMessage.match(/FailedOp\\((.*)\\)/);\n        if (matched != null) {\n          const split = matched[1].split(\",\");\n          paymasterInfo = `(paymaster address: ${split[1]})`;\n          failedOpMessage = split[2];\n        }\n      }\n      const error = new Error(\n        `The bundler has failed to include UserOperation in a batch: ${failedOpMessage} ${paymasterInfo}`\n      );\n      error.stack = errorIn.stack;\n      return error;\n    }\n    return errorIn;\n  }\n\n  waitForUserOperationTransaction = async (hash: Hash): Promise<Hash> => {\n    let blockNumber = await this.rpcClient.getBlockNumber();\n    for (let i = 0; i < this._txMaxRetries; i++) {\n      if (this.bundlerProvider === \"GELATO\") {\n        const receipt = await this.getUserOperationReceipt(\n          hash as `0x${string}`\n        )\n          // TODO: should maybe log the error?\n          .catch(() => null);\n        if (receipt) {\n          return this.getTransaction(receipt.receipt.transactionHash).then(\n            (x) => x.hash\n          );\n        }\n      } else {\n        const logs = await this.rpcClient.getLogs({\n          address: ENTRYPOINT_ADDRESS,\n          event: getAbiItem({ abi: EntryPointAbi, name: \"UserOperationEvent\" }),\n          args: { userOpHash: hash },\n          fromBlock: blockNumber - 100n,\n        });\n        if (logs.length) {\n          return logs[0].transactionHash;\n        }\n      }\n      await new Promise((resolve) =>\n        setTimeout(resolve, this._txRetryIntervalMs)\n      );\n    }\n\n    throw new Error(\"Failed to find transaction for User Operation\");\n  };\n\n  getAccount: () => KernelSmartContractAccount = () => {\n    if (!isKernelAccount(this.account)) {\n      throw new Error(\"account not connected!\");\n    }\n    return this.account;\n  };\n\n  dummyPaymasterDataMiddleware: AccountMiddlewareFn = async (\n    struct: UserOperationStruct\n  ): Promise<UserOperationStruct> => {\n    struct.paymasterAndData = \"0x\";\n    return struct;\n  };\n\n  withZeroDevPaymasterAndData(config: PaymasterConfig<PaymasterPolicy>) {\n    if (!this.isConnected()) {\n      throw new Error(\n        \"ZeroDevProvider: account is not set, did you call `connect` first?\"\n      );\n    }\n\n    return withZeroDevPaymasterAndData(this, config);\n  }\n\n  request: (args: { method: string; params?: any[] }) => Promise<any> = async (\n    args\n  ) => {\n    const { method, params } = args;\n    switch (method) {\n      case \"eth_chainId\":\n        return this.chain.id;\n      case \"eth_sendTransaction\":\n        const [tx] = params as [RpcTransactionRequest];\n        return this.sendTransaction(tx);\n      case \"eth_signTypedData_v4\":\n        //@ts-expect-error\n        return this.signTypedData(JSON.parse(params[1]));\n      case \"personal_sign\":\n        if (!this.account) {\n          throw new Error(\"account not connected!\");\n        }\n        const [data, address] = params!;\n        if (address.toLowerCase() !== (await this.getAddress()).toLowerCase()) {\n          throw new Error(\n            \"cannot sign for address that is not the current account\"\n          );\n        }\n        // @ts-ignore\n        return this.account.signMessageWith6492(data);\n      default:\n        // @ts-ignore\n        return this.rpcClient.request(args);\n    }\n  };\n}\n"]}