{"version":3,"file":"recovery-provider.js","sourceRoot":"","sources":["../../../../src/kernel-zerodev/validator-provider/recovery-provider.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  ValidatorProvider,\n  type ExtendedValidatorProviderParams,\n} from \"./base.js\";\nimport {\n  RecoveryValidator,\n  type RecoveryConfig,\n  type RecoveryValidatorParams,\n} from \"../validator/recovery-validator.js\";\nimport { type Address, type SendUserOperationResult } from \"@alchemy/aa-core\";\nimport {\n  getChainId,\n  getRecoveryData,\n  postRecoveryData,\n  setSignatures,\n} from \"../api/index.js\";\nimport { polygonMumbai } from \"viem/chains\";\nimport { CHAIN_ID_TO_NODE, RECOVERY_VALIDATOR_ADDRESS } from \"../constants.js\";\nimport {\n  encodeAbiParameters,\n  encodeFunctionData,\n  parseAbiParameters,\n  type Hex,\n  keccak256,\n  publicActions,\n  type TransactionReceipt,\n  createPublicClient,\n  http,\n  decodeAbiParameters,\n} from \"viem\";\nimport { RecoveryActionAbi } from \"../abis/RecoveryActionAbi.js\";\nimport { KernelAccountAbi } from \"../abis/KernelAccountAbi.js\";\nimport { WeightedValidatorAbi } from \"../abis/WeightedValidatorAbi.js\";\nimport { base64ToBytes, bytesToBase64, getChain } from \"../utils.js\";\n\nexport interface RecoveryProviderParams\n  extends ExtendedValidatorProviderParams<RecoveryValidatorParams> {\n  recoveryId?: string;\n  enableData?: Hex;\n}\n\nexport class RecoveryProvider extends ValidatorProvider<\n  RecoveryValidator,\n  RecoveryValidatorParams\n> {\n  recoveryId?: string;\n  enableData?: Hex;\n  constructor(params: RecoveryProviderParams) {\n    const chain =\n      typeof params.opts?.providerConfig?.chain === \"number\"\n        ? getChain(params.opts.providerConfig.chain)\n        : params.opts?.providerConfig?.chain ?? polygonMumbai;\n    const validator = new RecoveryValidator({\n      projectId: params.projectId,\n      chain,\n      recoveryId: params.recoveryId,\n      validatorAddress:\n        params.opts?.validatorConfig?.validatorAddress ??\n        RECOVERY_VALIDATOR_ADDRESS,\n      ...params.opts?.validatorConfig,\n    });\n    super(\n      {\n        ...params,\n        opts: {\n          ...params.opts,\n          providerConfig: { ...params.opts?.providerConfig, chain },\n        },\n      },\n      validator\n    );\n    this.recoveryId = params.recoveryId;\n    this.enableData = params.enableData;\n  }\n\n  public static async init(\n    params: RecoveryProviderParams\n  ): Promise<RecoveryProvider> {\n    const chainId = await getChainId(params.projectId);\n    if (!chainId) {\n      throw new Error(\"ChainId not found\");\n    }\n    const chain = getChain(chainId);\n    let accountAddress,\n      enableData,\n      signatures,\n      serializedRecoveryConfig,\n      recoveryConfig;\n    if (params.recoveryId) {\n      ({\n        scwAddress: accountAddress,\n        enableData,\n        recoveryConfig: serializedRecoveryConfig,\n        signatures,\n      } = await getRecoveryData(params.recoveryId));\n      recoveryConfig = RecoveryProvider.deserializeRecoveryConfig(\n        serializedRecoveryConfig\n      );\n    } else if (\n      params.opts?.accountConfig?.accountAddress &&\n      (!params.opts?.validatorConfig?.guardians ||\n        !Object.entries(params.opts?.validatorConfig?.guardians).length ||\n        params.opts.validatorConfig.threshold === undefined)\n    ) {\n      const publicClient = createPublicClient({\n        transport: http(\n          params.opts.providerConfig?.rpcUrl ??\n            CHAIN_ID_TO_NODE[chain?.id ?? polygonMumbai.id]\n        ),\n        chain: chain ?? polygonMumbai,\n      });\n      recoveryConfig = await RecoveryValidator.fetchRecoveryConfigFromContract(\n        params.opts?.accountConfig?.accountAddress,\n        publicClient\n      );\n    }\n    const instance = new RecoveryProvider({\n      enableData,\n      ...params,\n      opts: {\n        ...params.opts,\n        providerConfig: {\n          chain,\n          ...params.opts?.providerConfig,\n        },\n        accountConfig: {\n          accountAddress,\n          ...params.opts?.accountConfig,\n        },\n        validatorConfig: {\n          signatures,\n          ...recoveryConfig,\n          ...params.opts?.validatorConfig,\n        },\n      },\n    });\n    return instance;\n  }\n\n  async getDefaultValidator(): Promise<Address> {\n    const publicClient = this.getValidator().getPublicClient();\n    const kernelAccountAddress = await this.getAddress();\n    return await publicClient.readContract({\n      abi: KernelAccountAbi,\n      address: kernelAccountAddress,\n      functionName: \"getDefaultValidator\",\n    });\n  }\n\n  async encodeCalldataAndNonce(enableData: Hex): Promise<Hex> {\n    const defaultValidatorAddress = await this.getDefaultValidator();\n    const callData = encodeFunctionData({\n      abi: RecoveryActionAbi,\n      functionName: \"doRecovery\",\n      args: [defaultValidatorAddress, enableData],\n    });\n    const sender = await this.getAddress();\n    const nonce = await (await this.getAccount()).getNonce();\n    const encodedCallDataAndNonce = encodeAbiParameters(\n      parseAbiParameters(\"address sender, bytes calldata, uint256 nonce\"),\n      [sender, callData, nonce]\n    );\n    return keccak256(encodedCallDataAndNonce);\n  }\n\n  async enableRecovery(): Promise<SendUserOperationResult> {\n    if (!this.defaultProvider) {\n      throw Error(\"DefaultProvider uninitilised\");\n    }\n    const { selector } = await this.getValidator().getPluginValidatorData();\n    const kernelAccountAddress = await this.defaultProvider.getAddress();\n    const encodedSetExecData = await this.getAccount().encodeSetExection();\n    if (\n      await this.getValidator().isPluginEnabled(kernelAccountAddress, selector)\n    ) {\n      throw Error(\"Plugin already enabled\");\n    }\n    return await this.defaultProvider.sendUserOperation({\n      target: kernelAccountAddress,\n      data: encodedSetExecData,\n    });\n  }\n\n  async renewRecovery(): Promise<SendUserOperationResult> {\n    if (!this.defaultProvider) {\n      throw Error(\"DefaultProvider uninitilised\");\n    }\n    const enableData = await this.getValidator().getEnableData();\n    const [guardians, weights, threshold, delay] = decodeAbiParameters(\n      parseAbiParameters(\n        \"address[] guardians, uint24[] weights, uint24 threshold, uint48 delay\"\n      ),\n      enableData\n    );\n    const encodedRenewData = await this.getValidator().encodeRenew(\n      [...guardians],\n      [...weights],\n      threshold,\n      delay\n    );\n    return await this.defaultProvider.sendUserOperation({\n      target: this.getValidator().validatorAddress,\n      data: encodedRenewData,\n    });\n  }\n\n  async initiateRecovery(enableData: Hex): Promise<string> {\n    const serializedConfig = this.serializeRecoveryConfig();\n    const recoveryId = await postRecoveryData(\n      enableData,\n      await this.getAddress(),\n      serializedConfig\n    );\n    console.log(recoveryId);\n    this.enableData = enableData;\n    if (!recoveryId) {\n      throw Error(\"Unable to generate the recoveryId\");\n    }\n    return recoveryId;\n  }\n\n  serializeRecoveryConfig(): string {\n    let recoveryConfig = this.getValidator().getRecoveryConfig();\n    const jsonString = JSON.stringify(recoveryConfig);\n    const uint8Array = new TextEncoder().encode(jsonString);\n    const base64String = bytesToBase64(uint8Array);\n    return base64String;\n  }\n\n  public static deserializeRecoveryConfig(\n    recoveryConfig: string\n  ): RecoveryConfig {\n    const uint8Array = base64ToBytes(recoveryConfig);\n    const jsonString = new TextDecoder().decode(uint8Array);\n    return JSON.parse(jsonString) as RecoveryConfig;\n  }\n\n  async approveRecovery(enableData?: Hex): Promise<TransactionReceipt> {\n    const fetchedEnableData = enableData ?? this.enableData;\n    if (!fetchedEnableData) {\n      throw Error(\"Unable to fetch enable data for Recovery\");\n    }\n    const kernelAccountAddress = await this.getAddress();\n    const callDataAndNonceHash = await this.encodeCalldataAndNonce(\n      fetchedEnableData\n    );\n    const validator = this.getValidator();\n    if (!validator.walletClient) {\n      throw Error(\"WalletClient uninitialized\");\n    }\n    const walletClient = validator.walletClient.extend(publicActions);\n    let account;\n    if (walletClient.account) {\n      account = walletClient.account;\n    } else {\n      [account] = await walletClient.requestAddresses();\n    }\n    const hash = await walletClient.sendTransaction({\n      account,\n      to: validator.getAddress(),\n      data: validator.encodeApprove(\n        callDataAndNonceHash!,\n        kernelAccountAddress!\n      ),\n    });\n    return await walletClient.waitForTransactionReceipt({\n      hash,\n      timeout: 180000, // 3 minutes\n    });\n  }\n\n  async signRecovery(enableData?: Hex) {\n    try {\n      if (!this.recoveryId) {\n        throw Error(\"RecoveryId not set\");\n      }\n      const fetchedEnableData = enableData ?? this.enableData;\n      if (!fetchedEnableData) {\n        throw Error(\"Unable to fetch enable data for Recovery\");\n      }\n      const callDataAndNonceHash = await this.encodeCalldataAndNonce(\n        fetchedEnableData\n      );\n      const sig = await this.getValidator().signRecoveryHash(\n        callDataAndNonceHash\n      );\n      const { result, data } = await setSignatures(this.recoveryId, sig);\n      if (result !== \"success\") {\n        throw Error(\"Failed to save the signatures\");\n      }\n      this.getValidator().setRecoverySignatures(data.signatures);\n    } catch (error) {\n      console.log(error);\n    }\n  }\n\n  async approveRecoveryWithSig(\n    enableData?: Hex,\n    sigs?: Hex\n  ): Promise<TransactionReceipt> {\n    const fetchedEnableData = enableData ?? this.enableData;\n    if (!fetchedEnableData) {\n      throw Error(\"Unable to fetch enable data for Recovery\");\n    }\n    const signatures =\n      sigs ?? (await this.getValidator().getRecoverySignatures());\n    if (!signatures) {\n      throw Error(\"Signatures are not set\");\n    }\n    const kernelAccountAddress = await this.getAddress();\n    const callDataAndNonceHash = await this.encodeCalldataAndNonce(\n      fetchedEnableData\n    );\n    const validator = this.getValidator();\n    if (!validator.walletClient) {\n      throw Error(\"WalletClient uninitilized\");\n    }\n    const walletClient = validator.walletClient.extend(publicActions);\n    let account;\n    if (walletClient.account) {\n      account = walletClient.account;\n    } else {\n      [account] = await walletClient.requestAddresses();\n    }\n    const hash = await walletClient.sendTransaction({\n      account,\n      to: validator.getAddress(),\n      data: validator.encodeApproveWithSig(\n        callDataAndNonceHash,\n        kernelAccountAddress,\n        sigs!\n      ),\n    });\n    return await walletClient.waitForTransactionReceipt({ hash });\n  }\n\n  async cancelRecovery(enableData?: Hex): Promise<SendUserOperationResult> {\n    const fetchedEnableData = enableData ?? this.enableData;\n    if (!fetchedEnableData) {\n      throw Error(\"Unable to fetch enable data for Recovery\");\n    }\n    if (!this.defaultProvider) {\n      throw Error(\"DefaultProvider uninitilised\");\n    }\n    const callDataAndNonceHash = await this.encodeCalldataAndNonce(\n      fetchedEnableData\n    );\n    const encodedVetoData = await this.getValidator().encodeVeto(\n      callDataAndNonceHash\n    );\n\n    return await this.defaultProvider.sendUserOperation({\n      target: this.getValidator().validatorAddress,\n      data: encodedVetoData,\n    });\n  }\n\n  async submitRecovery(enableData?: Hex): Promise<SendUserOperationResult> {\n    const fetchedEnableData = enableData ?? this.enableData;\n    if (!fetchedEnableData) {\n      throw Error(\"Unable to fetch enable data for Recovery\");\n    }\n    const defaultValidatorAddress = await this.getDefaultValidator();\n    const encodedRecoveryActionData =\n      await this.getValidator().encodeRecoveryAction(\n        fetchedEnableData,\n        defaultValidatorAddress\n      );\n\n    return await this.sendUserOperation({\n      target: await this.getAddress(),\n      data: encodedRecoveryActionData,\n    });\n  }\n\n  async getApproval(enableData?: Hex): Promise<readonly [bigint, boolean]> {\n    const fetchedEnableData = enableData ?? this.enableData;\n    if (!fetchedEnableData) {\n      throw Error(\"Unable to fetch enable data for Recovery\");\n    }\n\n    const callDataAndNonceHash = await this.encodeCalldataAndNonce(\n      fetchedEnableData\n    );\n\n    const publicClient = this.getValidator().getPublicClient();\n    const kernelAccountAddress = await this.getAddress();\n    return await publicClient.readContract({\n      abi: WeightedValidatorAbi,\n      address: RECOVERY_VALIDATOR_ADDRESS,\n      functionName: \"getApproval\",\n      args: [kernelAccountAddress, callDataAndNonceHash],\n    });\n  }\n\n  // [TODO]\n  //   changeGuardian = this.sendEnableUserOperation;\n\n  deleteRecoveryData = this.sendDisableUserOperation;\n}\n"]}