import { type BytesLike, type PromiseOrValue, type UserOperationStruct } from "@alchemy/aa-core";
import type { ZeroDevProvider } from "../provider.js";
import type { PaymasterAndBundlerProviders } from "./types.js";
export declare abstract class Paymaster {
    protected provider: ZeroDevProvider;
    constructor(provider: ZeroDevProvider);
    abstract getPaymasterResponse(struct: UserOperationStruct, paymasterProvider?: PaymasterAndBundlerProviders, shouldOverrideFee?: boolean, shouldConsume?: boolean): Promise<UserOperationStruct | undefined>;
    protected signUserOp({ userOp, callData, gasTokenAddress, erc20UserOp, erc20CallData, paymasterProvider, shouldOverrideFee, shouldConsume, }: {
        userOp: UserOperationStruct;
        callData?: PromiseOrValue<BytesLike>;
        gasTokenAddress?: string;
        erc20UserOp?: Partial<UserOperationStruct>;
        erc20CallData?: PromiseOrValue<BytesLike>;
        paymasterProvider?: PaymasterAndBundlerProviders;
        shouldOverrideFee?: boolean;
        shouldConsume?: boolean;
    }): Promise<any>;
}
