{"version":3,"file":"getRPCProviderOwner.js","sourceRoot":"","sources":["../../../../src/kernel-zerodev/owner/getRPCProviderOwner.ts"],"names":[],"mappings":";;;AACA,wDAA+E;AAC/E,0CAA4C;AAI5C,SAAgB,mBAAmB,CAAC,YAAiB;IACnD,MAAM,QAAQ,GAAG,IAAI,wBAAY,CAAC,YAAgC,CAAC,CAAC;IACpE,MAAM,MAAM,GAAG,QAAQ,CAAC,SAAS,EAAE,CAAC;IAEpC,OAAO;QACL,UAAU,EAAE,KAAK,IAAI,EAAE,CACrB,OAAO,CAAC,OAAO,CAAC,CAAC,MAAM,MAAM,CAAC,UAAU,EAAE,CAAkB,CAAC;QAC/D,WAAW,EAAE,KAAK,EAAE,GAAwB,EAAE,EAAE,CAC9C,CAAC,MAAM,MAAM,CAAC,WAAW,CAAC,GAAG,CAAC,CAAkB;QAClD,aAAa,EAAE,KAAK,EAAE,MAA2B,EAAE,EAAE;YACnD,OAAO,IAAA,wBAAa,EAClB,CAAC,MAAM,MAAM,CAAC,cAAc,CAC1B,MAAM,CAAC,MAAO,EACd,MAAM,CAAC,KAAoD,EAC3D,MAAM,CAAC,OAAO,CACf,CAAQ,CACV,CAAC;QACJ,CAAC;KACF,CAAC;AACJ,CAAC;AAnBD,kDAmBC","sourcesContent":["import type { SignTypedDataParams, SmartAccountSigner } from \"@alchemy/aa-core\";\nimport { Web3Provider, type ExternalProvider } from \"@ethersproject/providers\";\nimport { fixSignedData } from \"../utils.js\";\nimport type { Hex } from \"viem\";\nimport { type TypedDataField } from \"@ethersproject/abstract-signer\";\n\nexport function getRPCProviderOwner(web3Provider: any): SmartAccountSigner {\n  const provider = new Web3Provider(web3Provider as ExternalProvider);\n  const signer = provider.getSigner();\n\n  return {\n    getAddress: async () =>\n      Promise.resolve((await signer.getAddress()) as `0x${string}`),\n    signMessage: async (msg: Uint8Array | string) =>\n      (await signer.signMessage(msg)) as `0x${string}`,\n    signTypedData: async (params: SignTypedDataParams) => {\n      return fixSignedData(\n        (await signer._signTypedData(\n          params.domain!,\n          params.types as unknown as Record<string, TypedDataField[]>,\n          params.message\n        )) as Hex\n      );\n    },\n  };\n}\n"]}