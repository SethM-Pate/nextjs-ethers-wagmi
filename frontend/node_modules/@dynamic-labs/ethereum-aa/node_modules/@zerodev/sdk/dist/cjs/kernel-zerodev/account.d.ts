import type { Address } from "abitype";
import { type FallbackTransport, type Hex, type Transport } from "viem";
import { KernelBaseValidator } from "./validator/base.js";
import { type BaseSmartAccountParams, BaseSmartContractAccount, type BatchUserOperationCallData, type UserOperationRequest, type SignTypedDataParams } from "@alchemy/aa-core";
import type { PaymasterAndBundlerProviders } from "./paymaster/types.js";
export declare enum DeploymentState {
    UNDEFINED = "0x0",
    NOT_DEPLOYED = "0x1",
    DEPLOYED = "0x2"
}
export interface KernelSmartAccountParams<TTransport extends Transport | FallbackTransport = Transport> extends Partial<BaseSmartAccountParams<TTransport>> {
    projectId: string;
    factoryAddress?: Address;
    index?: bigint;
    validator?: KernelBaseValidator;
    bundlerProvider?: PaymasterAndBundlerProviders;
    defaultValidator?: KernelBaseValidator;
    initCode?: Hex;
}
export declare function isKernelAccount(account: any): account is KernelSmartContractAccount;
export declare class KernelSmartContractAccount<TTransport extends Transport | FallbackTransport = Transport> extends BaseSmartContractAccount<TTransport> {
    private readonly factoryAddress;
    private readonly index;
    private initCode?;
    validator?: KernelBaseValidator;
    defaultValidator?: KernelBaseValidator;
    constructor(params: KernelSmartAccountParams);
    static init(params: KernelSmartAccountParams): Promise<KernelSmartContractAccount>;
    connectValidator(validator: KernelBaseValidator): this;
    getValidator(): KernelBaseValidator;
    getDummySignature(): Hex;
    getInitCode(): Promise<Hex>;
    getIndex(): bigint;
    approvePlugin(): Promise<void>;
    encodeExecute(target: Hex, value: bigint, data: Hex): Promise<Hex>;
    encodeBatchExecute(_txs: BatchUserOperationCallData): Promise<`0x${string}`>;
    encodeExecuteDelegate(target: Hex, value: bigint, data: Hex): Promise<Hex>;
    encodeSetExection(): Promise<`0x${string}`>;
    encodeUgradeTo(): Promise<`0x${string}`>;
    getKernelImplementationAddess(): Promise<Hex | undefined>;
    signMessageWith6492(msg: string | Uint8Array): Promise<Hex>;
    signTypedDataWith6492(params: SignTypedDataParams): Promise<Hex>;
    signMessage(msg: Uint8Array | string): Promise<Hex>;
    signTypedData(params: SignTypedDataParams): Promise<Hex>;
    signUserOp(userOp: UserOperationRequest): Promise<Hex>;
    protected encodeExecuteAction(target: Hex, value: bigint, data: Hex, code: number): Hex;
    protected encodeExecuteBatchAction(_txs: BatchUserOperationCallData): Hex;
    protected getAccountInitCode(): Promise<Hex>;
    getNonce(): Promise<bigint>;
    protected getFactoryInitCode(): Promise<Hex>;
}
