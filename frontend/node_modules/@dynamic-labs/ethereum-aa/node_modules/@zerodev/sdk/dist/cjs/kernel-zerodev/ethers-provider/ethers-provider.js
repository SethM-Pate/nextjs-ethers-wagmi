"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ZeroDevEthersProvider = void 0;
const index_js_1 = require("../api/index.js");
const aa_core_1 = require("@alchemy/aa-core");
const account_signer_js_1 = require("./account-signer.js");
const providers_1 = require("@ethersproject/providers");
const index_js_2 = require("../validator-provider/index.js");
const paymaster_js_1 = require("../middleware/paymaster.js");
const utils_js_1 = require("../utils.js");
class ZeroDevEthersProvider extends providers_1.JsonRpcProvider {
    constructor(validatorType, params) {
        super();
        Object.defineProperty(this, "accountProvider", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "withPaymasterMiddleware", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: (overrides) => {
                this.accountProvider.withPaymasterMiddleware(overrides);
                return this;
            }
        });
        Object.defineProperty(this, "withGasEstimator", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: (override) => {
                this.accountProvider.withGasEstimator(override);
                return this;
            }
        });
        Object.defineProperty(this, "withFeeDataGetter", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: (override) => {
                this.accountProvider.withFeeDataGetter(override);
                return this;
            }
        });
        Object.defineProperty(this, "withCustomMiddleware", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: (override) => {
                this.accountProvider.withCustomMiddleware(override);
                return this;
            }
        });
        let bundlerProvider = params.bundlerProvider;
        const shouldUsePaymaster = (params.usePaymaster === undefined || params.usePaymaster) &&
            bundlerProvider !== "GELATO";
        if (params.opts?.paymasterConfig &&
            params.opts?.paymasterConfig.policy === "TOKEN_PAYMASTER" &&
            shouldUsePaymaster) {
            bundlerProvider = "STACKUP";
        }
        let accountProvider = new index_js_2.ValidatorProviders[validatorType]({
            ...params,
            bundlerProvider,
        });
        if (shouldUsePaymaster) {
            let paymasterConfig = params.opts?.paymasterConfig ?? {
                policy: "VERIFYING_PAYMASTER",
            };
            paymasterConfig = {
                ...paymasterConfig,
                paymasterProvider: params.opts?.paymasterConfig?.paymasterProvider ?? bundlerProvider,
            };
            accountProvider = (0, paymaster_js_1.withZeroDevPaymasterAndData)(accountProvider, paymasterConfig);
        }
        this.accountProvider = accountProvider;
    }
    static async init(validatorType, params) {
        const chainId = await (0, index_js_1.getChainId)(params.projectId);
        if (!chainId) {
            throw new Error("ChainId not found");
        }
        const chain = (0, utils_js_1.getChain)(chainId);
        const instance = new ZeroDevEthersProvider(validatorType, {
            ...params,
            opts: {
                ...params.opts,
                providerConfig: {
                    chain,
                    ...params.opts?.providerConfig,
                },
            },
        });
        return instance;
    }
    getAccountProvider() {
        return this.accountProvider;
    }
    send(method, params) {
        return this.accountProvider.request({ method, params });
    }
    connectToAccount(fn) {
        (0, aa_core_1.defineReadOnly)(this, "accountProvider", this.accountProvider.connect(fn));
        return this.getAccountSigner();
    }
    getAccountSigner() {
        return new account_signer_js_1.ZeroDevAccountSigner(this);
    }
    getPublicErc4337Client() {
        return this.accountProvider.rpcClient;
    }
}
exports.ZeroDevEthersProvider = ZeroDevEthersProvider;
//# sourceMappingURL=ethers-provider.js.map