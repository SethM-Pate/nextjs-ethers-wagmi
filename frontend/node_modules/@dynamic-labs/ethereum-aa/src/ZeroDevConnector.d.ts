import { ECDSAProvider } from '@zerodev/sdk';
import { PublicClient, RpcTransactionRequest, WalletClient } from 'viem';
import { Provider, ProviderEnum } from '@dynamic-labs/sdk-api';
import { Chain, IAccountAbstractionWalletConnector, WalletConnector, WalletConnectorBase } from '@dynamic-labs/wallet-connector-core';
import { WalletBookSchema } from '@dynamic-labs/wallet-book';
import { EvmNetwork, GenericNetwork, WalletUiUtils } from '@dynamic-labs/types';
type ZeroDevConnectorProps = {
    apiProviders: {
        [key in ProviderEnum]?: Provider;
    };
    evmNetworks: GenericNetwork[];
    walletBook: WalletBookSchema;
    walletUiUtils: WalletUiUtils;
};
export declare class ZeroDevConnector extends WalletConnectorBase implements IAccountAbstractionWalletConnector {
    projectId: string;
    zeroDevProvider: ECDSAProvider | undefined;
    eoaConnector: WalletConnector | undefined;
    private providerWithSponsorship;
    connectedChain: Chain;
    supportedChains: Chain[];
    evmNetworks: EvmNetwork[];
    private isGasSponsorshipDisabled;
    isEmbeddedWallet: boolean;
    /**
     * Deferred promise that resolves when the ZeroDev provider is set.
     * This is used to make sure that the provider is set before any other method is called.
     * This is needed because the provider is set asynchronously.
     */
    private zeroDevProviderDeferredPromise;
    name: string;
    get key(): string;
    private _walletUiUtils;
    constructor(opts: ZeroDevConnectorProps);
    getEOAConnector(): WalletConnector | undefined;
    getAccountAbstractionProvider(): ECDSAProvider | undefined;
    setEoaConnector(connector: WalletConnector): Promise<void>;
    private checkIsProjectChainEnabled;
    private getProviderWithSponsorshipValidation;
    fetchPublicAddress(): Promise<string | undefined>;
    getConnectedAccounts(): Promise<string[]>;
    getNetwork(): Promise<number | undefined>;
    private getTransport;
    getWalletClient(chainId?: string): WalletClient | undefined;
    getPublicClient(): Promise<void | PublicClient | undefined>;
    getSigner(): Promise<WalletClient | undefined>;
    canSponsorTransactionGas(transaction: RpcTransactionRequest): Promise<boolean>;
    disableGasSponsorshipOnce(): void;
    getBalance(): Promise<string | undefined>;
    signMessage(messageToSign: string): Promise<string | undefined>;
}
export {};
