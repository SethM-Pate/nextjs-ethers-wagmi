'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var jsxRuntime = require('react/jsx-runtime');
var CaptchaVerifyUser = require('./CaptchaVerifyUser/CaptchaVerifyUser.cjs');
var CollectUserDataView = require('./CollectUserDataView/CollectUserDataView.cjs');
var CollectUserDataViewLoginWithEmail = require('./CollectUserDataViewLoginWithEmail/CollectUserDataViewLoginWithEmail.cjs');
var EmailConfirmationWaitingView = require('./EmailConfirmationWaitingView/EmailConfirmationWaitingView.cjs');
var EmailUpdate = require('./EmailUpdate/EmailUpdate.cjs');
var EmailVerification = require('./EmailVerification/EmailVerification.cjs');
var EmailWalletOTPVerificationView = require('./EmailWalletOTPVerificationView/EmailWalletOTPVerificationView.cjs');
var NetworkNotSupported = require('./NetworkNotSupported/NetworkNotSupported.cjs');
var NetworkNotSupportedSwitchManual = require('./NetworkNotSupportedSwitchManual/NetworkNotSupportedSwitchManual.cjs');
var NoQrNotInstalledView = require('./NoQrNotInstalledView/NoQrNotInstalledView.cjs');
var PendingConnectView = require('./PendingConnectView/PendingConnectView.cjs');
var PendingSignatureView = require('./PendingSignatureView/PendingSignatureView.cjs');
var QrCodeView = require('./QrCodeView/QrCodeView.cjs');
var SocialRedirectView = require('./SocialRedirectView/SocialRedirectView.cjs');
var WalletList = require('./WalletList/WalletList.cjs');
var NoAccess = require('./NoAccess/NoAccess.cjs');
var WalletSignSpinnerView = require('./WalletSignSpinnerView/WalletSignSpinnerView.cjs');
var WalletUsedView = require('./WalletUsedView/WalletUsedView.cjs');
var SocialWrongAccountView = require('./SocialWrongAccountView/SocialWrongAccountView.cjs');
var WalletGroupView = require('./WalletGroupView/WalletGroupView.cjs');
var WalletLockedView = require('./WalletLockedView/WalletLockedView.cjs');
var BridgeWelcomeView = require('./BridgeWelcomeView/BridgeWelcomeView.cjs');
var BridgeSummaryView = require('./BridgeSummaryView/BridgeSummaryView.cjs');
var BridgeNextWalletConnectionView = require('./BridgeNextWalletConnectionView/BridgeNextWalletConnectionView.cjs');
var AccountExistsView = require('./AccountExistsView/AccountExistsView.cjs');
var MergeUserAccountsView = require('./MergeUserAccountsView/MergeUserAccountsView.cjs');
var WalletCannotBeTransferredView = require('./WalletCannotBeTransferredView/WalletCannotBeTransferredView.cjs');
var LoginView = require('./LoginView/LoginView.cjs');
var PasskeyIntroView = require('./Passkey/PasskeyIntroView/PasskeyIntroView.cjs');
var PasskeyBundleRecovery = require('./Passkey/PasskeyRecovery/BundleValidation/PasskeyBundleRecovery.cjs');
var PasskeyCompleteRecovery = require('./Passkey/PasskeyRecovery/CompleteRecovery/PasskeyCompleteRecovery.cjs');
var PasskeyInitRecovery = require('./Passkey/PasskeyRecovery/InitRecovery/PasskeyInitRecovery.cjs');
var RenamePasskeyView = require('./Passkey/RenamePasskeyView/RenamePasskeyView.cjs');
var EmbeddedAuthChoice = require('./Passkey/EmbeddedAuthChoice/EmbeddedAuthChoice.cjs');
require('react-i18next');
require('react');
require('../events/dynamicEvents.cjs');
require('../../../_virtual/_tslib.cjs');
require('@dynamic-labs/utils');
require('../context/DynamicContext/DynamicContext.cjs');
require('@dynamic-labs/sdk-api');
require('../shared/logger.cjs');
require('@dynamic-labs/iconic');
require('@dynamic-labs/wallet-connector-core');
require('../context/ViewContext/ViewContext.cjs');
require('@dynamic-labs/wallet-book');
require('../utils/constants/colors.cjs');
require('../utils/constants/values.cjs');
require('../shared/utils/classes/storage/localStorage.cjs');
require('viem');
require('../shared/consts/index.cjs');
require('../context/CaptchaContext/CaptchaContext.cjs');
require('../context/ErrorContext/ErrorContext.cjs');
require('@dynamic-labs/multi-wallet');
require('viem/chains');
require('../context/AccessDeniedContext/AccessDeniedContext.cjs');
require('../context/AccountExistsContext/AccountExistsContext.cjs');
require('../config/ApiEndpoint.cjs');
require('../context/EmailVerificationContext/EmailVerificationContext.cjs');
require('react-dom');
require('../context/ThemeContext/ThemeContext.cjs');
require('@dynamic-labs/types');
require('yup');
require('../context/MockContext/MockContext.cjs');
require('../utils/hooks/useUserUpdateRequest/useUpdateUser/useUpdateUser.cjs');
require('../context/UserFieldEditorContext/UserFieldEditorContext.cjs');
require('@dynamic-labs/rpc-providers');
require('../context/UserWalletsContext/UserWalletsContext.cjs');
require('../components/Transition/ZoomTransition/ZoomTransition.cjs');
require('../components/Transition/SlideInUpTransition/SlideInUpTransition.cjs');
require('../components/Transition/OpacityTransition/OpacityTransition.cjs');
require('../components/ShadowDOM/ShadowDOM.cjs');
require('../components/OverlayCard/OverlayCard.context.cjs');
require('../context/FooterAnimationContext/index.cjs');
require('../context/SocialRedirectContext/SocialRedirectContext.cjs');
require('../context/WalletGroupContext/WalletGroupContext.cjs');
require('../widgets/DynamicWidget/components/DynamicWidgetHeader/DynamicWidgetHeader.cjs');
require('react-focus-lock');
require('../context/LoadingContext/LoadingContext.cjs');
require('../locale/locale.cjs');
require('../widgets/DynamicWidget/context/DynamicWidgetContext.cjs');
require('../components/UserProfile/parts/UserProfileField/components/VerifiedEmailIcon/VerifiedEmailIcon.cjs');
require('formik');
require('../components/IconButton/IconButton.cjs');
require('../components/Alert/Alert.cjs');
require('../components/PasskeyCreatedSuccessBanner/PasskeyCreatedSuccessBanner.cjs');
require('../context/PasskeyContext/PasskeyContext.cjs');
require('@dynamic-labs/viem-utils');
require('./TransactionConfirmationView/helpers/transactionErrorMessage.cjs');
require('../utils/hooks/useTransactionWithGasPrice/useTransactionWithGasPrice.cjs');
require('../widgets/DynamicWidget/views/ManagePasskeysWidgetView/PasskeyCard/PasskeyCard.cjs');
require('../components/InlineWidget/InlineWidget.cjs');
require('../components/IsBrowser/IsBrowser.cjs');
require('../components/MenuList/Dropdown/Dropdown.cjs');
require('../components/Popper/Popper/Popper.cjs');
require('../components/Popper/PopperContext/PopperContext.cjs');
require('qrcode');
var FarcasterConnectView = require('./FarcasterConnectView/FarcasterConnectView.cjs');
var EmbeddedRevealView = require('./EmbeddedReveal/EmbeddedRevealView/EmbeddedRevealView.cjs');
var SelectHardwareWalletView = require('./SelectHardwareWalletView/SelectHardwareWalletView.cjs');
var SelectWalletInWalletGroupView = require('./SelectWalletInWalletGroupView/SelectWalletInWalletGroupView.cjs');
var WalletRedirectView = require('./WalletRedirectView/WalletRedirectView.cjs');
var PasskeyNewDomainDetectedView = require('./Passkey/PasskeyNewDomainDetectedView/PasskeyNewDomainDetectedView.cjs');

const viewToComponentMap = {
    'account-exists': AccountExistsView.AccountExistsView,
    'bridge-next-wallet-connection': BridgeNextWalletConnectionView.BridgeNextWalletConnectionView,
    'bridge-summary': BridgeSummaryView.BridgeSummaryView,
    'bridge-welcome': BridgeWelcomeView.BridgeWelcomeView,
    captcha: CaptchaVerifyUser.CaptchaVerifyUser,
    'chainalysis-blocked-wallet': NoAccess.NoAccess,
    'collect-user-data': CollectUserDataView.CollectUserDataView,
    'collect-user-data-login-with-email': CollectUserDataViewLoginWithEmail.CollectUserDataViewLoginWithEmail,
    'email-wallet-otp-verification-view': EmailWalletOTPVerificationView.EmailWalletOTPVerificationView,
    'embedded-reveal-account-view': EmbeddedRevealView.EmbeddedRevealView,
    'embedded-reveal-view': EmbeddedRevealView.EmbeddedRevealView,
    'embedded-wallet-auth-choice': EmbeddedAuthChoice.EmbeddedAuthChoice,
    'farcaster-connect-view': FarcasterConnectView.FarcasterConnectView,
    'gate-blocked-wallet': NoAccess.NoAccess,
    'login-with-email-or-wallet': LoginView.LoginView,
    'login-with-email-or-wallet-full-wallet-list': LoginView.LoginView,
    'login-with-email-verification': EmailVerification.EmailVerification,
    'login-with-wallet-only': LoginView.LoginView,
    'merge-user-accounts': MergeUserAccountsView.MergeUserAccountsView,
    'multi-wallet-wallet-list': WalletList.WalletList,
    'network-not-supported': NetworkNotSupported.NetworkNotSupported,
    'network-not-supported-manual': NetworkNotSupportedSwitchManual.NetworkNotSupportedSwitchManual,
    'no-access': NoAccess.NoAccess,
    'no-qr-not-installed': NoQrNotInstalledView.NoQrNotInstalledView,
    'passkey-intro': PasskeyIntroView.PasskeyIntroView,
    'passkey-new-domain-detected': PasskeyNewDomainDetectedView.PasskeyNewDomainDetectedView,
    'passkey-recovery-bundle': PasskeyBundleRecovery.PasskeyBundleRecovery,
    'passkey-recovery-complete': PasskeyCompleteRecovery.PasskeyCompleteRecovery,
    'passkey-recovery-start': PasskeyInitRecovery.PasskeyInitRecovery,
    'pending-connect': PendingConnectView.PendingConnectView,
    'pending-signature': PendingSignatureView.PendingSignatureView,
    'pending-signature-without-back-button': PendingSignatureView.PendingSignatureView,
    'qr-code': QrCodeView.QrCodeView,
    'rename-passkey': RenamePasskeyView.RenamePasskeyView,
    'select-hardware-wallet': SelectHardwareWalletView.SelectHardwareWalletView,
    'select-wallet-in-wallet-group': SelectWalletInWalletGroupView.SelectWalletInWalletGroupView,
    'social-redirect-view': SocialRedirectView.SocialRedirectView,
    'social-wrong-account': SocialWrongAccountView.SocialWrongAccountView,
    'update-email': EmailUpdate.EmailUpdate,
    'verify-email': EmailVerification.EmailVerification,
    'wait-for-email-confirmation-view': EmailConfirmationWaitingView.EmailConfirmationWaitingView,
    'wallet-cannot-be-transferred': WalletCannotBeTransferredView.WalletCannotBeTransferredView,
    'wallet-connect-mobile-wallets-list': () => (jsxRuntime.jsx(WalletList.WalletList, { isWalletConnectList: true })),
    'wallet-group': WalletGroupView.WalletGroupView,
    'wallet-list': WalletList.WalletList,
    'wallet-locked-view': WalletLockedView.WalletLockedView,
    'wallet-redirect-view': WalletRedirectView.WalletRedirectView,
    'wallet-sign': WalletSignSpinnerView.WalletSignSpinnerView,
    'wallet-used': WalletUsedView.WalletUsedView,
};

exports.viewToComponentMap = viewToComponentMap;
