import { AuthenticatorType } from '@dynamic-labs/wallet-connector-core';
import { Duration, DynamicJwt, InitEmailAuthResponse, InitPasskeyRecoveryResponse } from '@dynamic-labs/sdk-api';
import { Wallet } from '../../../../shared';
export declare const initEmbeddedWalletSession: ({ authenticatorType, authToken, iframeContainer, iframeElementId, environmentId, userEmail, wallet, sessionExpiration, }: {
    authenticatorType: AuthenticatorType;
    authToken: string | undefined;
    iframeContainer: HTMLElement;
    iframeElementId: string;
    environmentId: string;
    userEmail: string;
    wallet: Wallet | null;
    sessionExpiration?: number;
}) => Promise<{
    decodedJwt: Omit<DynamicJwt, 'jwt'>;
    jwt: string;
} | undefined>;
export declare const passkeyRecoveryBundleValidation: ({ authToken, bundleInput, wallet, }: {
    authToken: string | undefined;
    bundleInput: string | undefined;
    wallet: Wallet | null;
}) => Promise<void>;
export declare const resentRecoveryEmail: ({ authenticatorType, authToken, environmentId, wallet, }: {
    authenticatorType: AuthenticatorType;
    authToken: string | undefined;
    environmentId: string;
    wallet: Wallet | null;
}) => Promise<InitPasskeyRecoveryResponse | InitEmailAuthResponse>;
export declare const completePasskeyRecovery: ({ authToken, userEmail, environmentId, wallet, }: {
    authToken: string | undefined;
    userEmail: string | undefined;
    environmentId: string;
    wallet: Wallet | null;
}) => Promise<{
    decodedJwt: Omit<DynamicJwt, "jwt">;
    jwt: string;
}>;
export declare const addNewPasskeyAuthenticator: ({ authToken, userEmail, environmentId, wallet, }: {
    authToken: string | undefined;
    userEmail: string | undefined;
    environmentId: string;
    wallet: Wallet | null;
}) => Promise<{
    decodedJwt: Omit<DynamicJwt, "jwt">;
    jwt: string;
}>;
export declare const canRestoreEmbeddedWalletSession: (sessionExpirationTime: Duration | undefined) => boolean;
export declare const restoreEmbeddedWalletSession: ({ authToken, iframeContainer, iframeElementId, wallet, sessionExpiration, }: {
    authToken: string | undefined;
    iframeContainer: HTMLElement;
    iframeElementId: string;
    wallet: Wallet | null;
    sessionExpiration?: number;
}) => Promise<boolean>;
