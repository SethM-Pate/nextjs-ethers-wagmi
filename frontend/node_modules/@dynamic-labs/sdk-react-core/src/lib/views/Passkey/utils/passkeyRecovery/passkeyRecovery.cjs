'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _tslib = require('../../../../../../_virtual/_tslib.cjs');
var walletConnectorCore = require('@dynamic-labs/wallet-connector-core');
var utils = require('@dynamic-labs/utils');
var api = require('../../../../data/api.cjs');
var decodeJwt = require('../../../../shared/utils/functions/decodeJwt/decodeJwt.cjs');
require('@dynamic-labs/iconic');
require('react/jsx-runtime');
require('../../../../context/ViewContext/ViewContext.cjs');
require('react');
require('../../../../shared/logger.cjs');
require('@dynamic-labs/wallet-book');
var localStorage$1 = require('../../../../utils/constants/localStorage.cjs');
require('../../../../utils/constants/colors.cjs');
require('../../../../utils/constants/values.cjs');
var localStorage = require('../../../../shared/utils/classes/storage/localStorage.cjs');
require('viem');
require('@dynamic-labs/sdk-api');
require('../../../../shared/consts/index.cjs');
var findEmbeddedWalletFromVerifiedCredentials = require('../../../../utils/functions/findEmbeddedWalletFromVerifiedCredentials/findEmbeddedWalletFromVerifiedCredentials.cjs');
require('@dynamic-labs/multi-wallet');
var removeElementById = require('../../../../utils/functions/removeElementById/removeElementById.cjs');
require('viem/chains');
var constants = require('../../PasskeyRecovery/constants.cjs');

const initEmbeddedWalletSession = (_a) => _tslib.__awaiter(void 0, [_a], void 0, function* ({ authenticatorType, authToken, iframeContainer, iframeElementId, environmentId, userEmail, wallet, sessionExpiration, }) {
    var _b;
    if (!authToken) {
        throw new utils.DynamicError('Auth token is not defined');
    }
    if (!(wallet === null || wallet === void 0 ? void 0 : wallet.connector) ||
        !(wallet === null || wallet === void 0 ? void 0 : wallet.id) ||
        !walletConnectorCore.isPasskeyWalletConnector(wallet === null || wallet === void 0 ? void 0 : wallet.connector)) {
        throw new utils.DynamicError('PasskeyWalletConnector not found');
    }
    const turnkeyRecoveryHandler = (_b = wallet.connector) === null || _b === void 0 ? void 0 : _b.getAuthenticatorHandler();
    if (authenticatorType === 'passkey' &&
        turnkeyRecoveryHandler.isSessionActive()) {
        return addNewPasskeyAuthenticator({
            authToken,
            environmentId,
            userEmail,
            wallet,
        });
    }
    const publicKey = yield turnkeyRecoveryHandler.initRecovery(authenticatorType, iframeContainer, iframeElementId, sessionExpiration);
    if (!publicKey) {
        throw new utils.DynamicError('Something went wrong');
    }
    const response = yield api.initEmbeddedWalletSession({
        authenticatorType,
        environmentId,
        publicKey,
        userJwt: authToken,
        walletId: wallet.id,
    });
    turnkeyRecoveryHandler.recoveryUserId =
        authenticatorType === 'passkey'
            ? response.turnkeyRecoveryUserId
            : response.turnkeyUserId;
    return;
});
const passkeyRecoveryBundleValidation = (_c) => _tslib.__awaiter(void 0, [_c], void 0, function* ({ authToken, bundleInput, wallet, }) {
    var _d, _e, _f, _g;
    if (!bundleInput) {
        throw new utils.DynamicError('Code must be informed');
    }
    if (!(wallet === null || wallet === void 0 ? void 0 : wallet.connector) ||
        !(wallet === null || wallet === void 0 ? void 0 : wallet.id) ||
        !walletConnectorCore.isPasskeyWalletConnector(wallet === null || wallet === void 0 ? void 0 : wallet.connector)) {
        throw new utils.DynamicError('PasskeyWalletConnector not found');
    }
    const decodedJwt = decodeJwt.decodeJwt(authToken);
    if (!decodedJwt) {
        throw new utils.DynamicError('User must be logged in with a valid token');
    }
    const organizationId = (_f = (_e = (_d = decodedJwt.verifiedCredentials) === null || _d === void 0 ? void 0 : _d.find(({ walletName }) => walletName === null || walletName === void 0 ? void 0 : walletName.startsWith('turnkey'))) === null || _e === void 0 ? void 0 : _e.walletProperties) === null || _f === void 0 ? void 0 : _f.turnkeySubOrganizationId;
    const turnkeyRecoveryHandler = (_g = wallet.connector) === null || _g === void 0 ? void 0 : _g.getAuthenticatorHandler();
    yield turnkeyRecoveryHandler.verifyRecoveryCode(bundleInput, organizationId);
    const sessionSettings = {
        createdAt: new Date().getTime(),
        emailCode: bundleInput,
        userId: turnkeyRecoveryHandler.recoveryUserId,
    };
    localStorage.LocalStorage.setToLS(localStorage$1.EMBEDDED_WALLET_SESSION_SETTINGS, sessionSettings);
});
const resentRecoveryEmail = (_h) => _tslib.__awaiter(void 0, [_h], void 0, function* ({ authenticatorType, authToken, environmentId, wallet, }) {
    var _j;
    if (!authToken) {
        throw new utils.DynamicError('Auth token is not defined');
    }
    if (!(wallet === null || wallet === void 0 ? void 0 : wallet.connector) ||
        !(wallet === null || wallet === void 0 ? void 0 : wallet.id) ||
        !walletConnectorCore.isPasskeyWalletConnector(wallet === null || wallet === void 0 ? void 0 : wallet.connector)) {
        throw new utils.DynamicError('PasskeyWalletConnector not found');
    }
    const publicKey = (_j = wallet.connector) === null || _j === void 0 ? void 0 : _j.getAuthenticatorHandler().publicKey;
    if (!publicKey) {
        throw new utils.DynamicError('Could not proceed with your request. Please restart the process.');
    }
    return api.initEmbeddedWalletSession({
        authenticatorType,
        environmentId,
        publicKey,
        userJwt: authToken,
        walletId: wallet === null || wallet === void 0 ? void 0 : wallet.id,
    });
});
const completePasskeyRecovery = (_k) => _tslib.__awaiter(void 0, [_k], void 0, function* ({ authToken, userEmail, environmentId, wallet, }) {
    var _l, _m, _o;
    if (!authToken) {
        throw new utils.DynamicError('User must be logged in');
    }
    let decodedJwt = decodeJwt.decodeJwt(authToken);
    if (!decodedJwt) {
        throw new utils.DynamicError('User must be logged in with a valid token');
    }
    if (!(wallet === null || wallet === void 0 ? void 0 : wallet.connector) ||
        !(wallet === null || wallet === void 0 ? void 0 : wallet.id) ||
        !walletConnectorCore.isPasskeyWalletConnector(wallet === null || wallet === void 0 ? void 0 : wallet.connector)) {
        throw new utils.DynamicError('PasskeyWalletConnector not found');
    }
    const connector = wallet.connector;
    connector.setEmail(userEmail);
    const organizationId = (_o = (_m = (_l = decodedJwt.verifiedCredentials) === null || _l === void 0 ? void 0 : _l.find(({ walletName }) => walletName === null || walletName === void 0 ? void 0 : walletName.startsWith('turnkey'))) === null || _m === void 0 ? void 0 : _m.walletProperties) === null || _o === void 0 ? void 0 : _o.turnkeySubOrganizationId;
    if (!organizationId) {
        throw new utils.DynamicError('Invalid token!');
    }
    const turnkeyRecoveryHandler = wallet.connector.getAuthenticatorHandler();
    const { attestation, challenge } = yield connector.getWebAuthnAttestation();
    // calls turnkey recovery api
    yield turnkeyRecoveryHandler.completeRecovery({
        attestation,
        challenge,
        organizationId,
    });
    // calls readcost recovery api
    const passkeyRecoveryResponse = yield api.completePasskeyRecovery({
        attestation: attestation,
        challenge,
        environmentId,
        userJwt: authToken,
        walletId: wallet === null || wallet === void 0 ? void 0 : wallet.id,
    });
    const { jwt } = passkeyRecoveryResponse;
    decodedJwt = decodeJwt.decodeJwt(jwt);
    if (decodedJwt === undefined) {
        throw new utils.DynamicError('Invalid token!');
    }
    const chain = connector.connectedChain;
    const embeddedWalletVerifiedCredential = findEmbeddedWalletFromVerifiedCredentials.findEmbeddedWalletFromVerifiedCredentials(jwt, chain);
    if (!embeddedWalletVerifiedCredential) {
        throw new utils.DynamicError('EmbeddedWalletVerifiedCredential not found');
    }
    connector.setVerifiedCredentials(decodedJwt.verifiedCredentials);
    // clear iframeStamper and its reference
    connector.getAuthenticatorHandler().clear();
    // deletes iframe container after usage
    removeElementById.removeElementById(constants.iframeElementId);
    return {
        decodedJwt,
        jwt,
    };
});
const addNewPasskeyAuthenticator = (_p) => _tslib.__awaiter(void 0, [_p], void 0, function* ({ authToken, userEmail, environmentId, wallet, }) {
    var _q, _r, _s;
    if (!authToken) {
        throw new utils.DynamicError('User must be logged in');
    }
    let decodedJwt = decodeJwt.decodeJwt(authToken);
    if (!decodedJwt) {
        throw new utils.DynamicError('User must be logged in with a valid token');
    }
    if (!(wallet === null || wallet === void 0 ? void 0 : wallet.connector) ||
        !(wallet === null || wallet === void 0 ? void 0 : wallet.id) ||
        !walletConnectorCore.isPasskeyWalletConnector(wallet === null || wallet === void 0 ? void 0 : wallet.connector)) {
        throw new utils.DynamicError('PasskeyWalletConnector not found');
    }
    const connector = wallet.connector;
    connector.setEmail(userEmail);
    const organizationId = (_s = (_r = (_q = decodedJwt.verifiedCredentials) === null || _q === void 0 ? void 0 : _q.find(({ walletName }) => walletName === null || walletName === void 0 ? void 0 : walletName.startsWith('turnkey'))) === null || _r === void 0 ? void 0 : _r.walletProperties) === null || _s === void 0 ? void 0 : _s.turnkeySubOrganizationId;
    if (!organizationId) {
        throw new utils.DynamicError('Invalid token!');
    }
    const turnkeyRecoveryHandler = wallet.connector.getAuthenticatorHandler();
    const { attestation, challenge } = yield connector.getWebAuthnAttestation();
    // calls turnkey create authenticator api
    yield turnkeyRecoveryHandler.addPasskeyAuthenticator({
        attestation,
        challenge,
        organizationId,
    });
    // calls readcost api to add new authenticator
    const passkeyRecoveryResponse = yield api.completePasskeyRecovery({
        attestation: attestation,
        challenge,
        environmentId,
        userJwt: authToken,
        walletId: wallet === null || wallet === void 0 ? void 0 : wallet.id,
    });
    const { jwt } = passkeyRecoveryResponse;
    decodedJwt = decodeJwt.decodeJwt(jwt);
    if (decodedJwt === undefined) {
        throw new utils.DynamicError('Invalid token!');
    }
    const chain = connector.connectedChain;
    const embeddedWalletVerifiedCredential = findEmbeddedWalletFromVerifiedCredentials.findEmbeddedWalletFromVerifiedCredentials(jwt, chain);
    if (!embeddedWalletVerifiedCredential) {
        throw new utils.DynamicError('EmbeddedWalletVerifiedCredential not found');
    }
    connector.setVerifiedCredentials(decodedJwt.verifiedCredentials);
    return {
        decodedJwt,
        jwt,
    };
});
const canRestoreEmbeddedWalletSession = (sessionExpirationTime) => {
    if (!(sessionExpirationTime === null || sessionExpirationTime === void 0 ? void 0 : sessionExpirationTime.amount)) {
        return false;
    }
    const sessionSettings = localStorage.LocalStorage.getFromLS(localStorage$1.EMBEDDED_WALLET_SESSION_SETTINGS);
    if (!sessionSettings) {
        return false;
    }
    const sessionExpiration = sessionExpirationTime.amount *
        (sessionExpirationTime.unit === 'minutes' ? 60 : 3600);
    const recoveryExpirationSeconds = (sessionSettings === null || sessionSettings === void 0 ? void 0 : sessionSettings.createdAt) + sessionExpiration * 1000;
    const expirationTime = new Date(recoveryExpirationSeconds);
    if (new Date() >= expirationTime) {
        localStorage.LocalStorage.removeFromLS(localStorage$1.EMBEDDED_WALLET_SESSION_SETTINGS);
        return false;
    }
    return true;
};
const restoreEmbeddedWalletSession = (_t) => _tslib.__awaiter(void 0, [_t], void 0, function* ({ authToken, iframeContainer, iframeElementId, wallet, sessionExpiration, }) {
    var _u, _v, _w, _x;
    if (!authToken) {
        throw new utils.DynamicError('Auth token is not defined');
    }
    const decodedJwt = decodeJwt.decodeJwt(authToken);
    if (!decodedJwt) {
        throw new utils.DynamicError('User must be logged in with a valid token');
    }
    if (!(wallet === null || wallet === void 0 ? void 0 : wallet.connector) ||
        !(wallet === null || wallet === void 0 ? void 0 : wallet.id) ||
        !walletConnectorCore.isPasskeyWalletConnector(wallet === null || wallet === void 0 ? void 0 : wallet.connector)) {
        throw new utils.DynamicError('PasskeyWalletConnector not found');
    }
    const sessionSettings = localStorage.LocalStorage.getFromLS(localStorage$1.EMBEDDED_WALLET_SESSION_SETTINGS);
    const turnkeyRecoveryHandler = (_u = wallet.connector) === null || _u === void 0 ? void 0 : _u.getAuthenticatorHandler();
    if (!sessionSettings || Boolean(turnkeyRecoveryHandler.recoveryUserId)) {
        return false;
    }
    const publicKey = yield turnkeyRecoveryHandler.initRecovery('email', iframeContainer, iframeElementId, sessionExpiration);
    if (!publicKey) {
        throw new utils.DynamicError('Could not open embedded wallet connection communication');
    }
    turnkeyRecoveryHandler.recoveryUserId = sessionSettings.userId;
    const organizationId = (_x = (_w = (_v = decodedJwt.verifiedCredentials) === null || _v === void 0 ? void 0 : _v.find(({ walletName }) => walletName === null || walletName === void 0 ? void 0 : walletName.startsWith('turnkey'))) === null || _w === void 0 ? void 0 : _w.walletProperties) === null || _x === void 0 ? void 0 : _x.turnkeySubOrganizationId;
    yield turnkeyRecoveryHandler.verifyRecoveryCode(sessionSettings.emailCode, organizationId);
    return true;
});

exports.addNewPasskeyAuthenticator = addNewPasskeyAuthenticator;
exports.canRestoreEmbeddedWalletSession = canRestoreEmbeddedWalletSession;
exports.completePasskeyRecovery = completePasskeyRecovery;
exports.initEmbeddedWalletSession = initEmbeddedWalletSession;
exports.passkeyRecoveryBundleValidation = passkeyRecoveryBundleValidation;
exports.resentRecoveryEmail = resentRecoveryEmail;
exports.restoreEmbeddedWalletSession = restoreEmbeddedWalletSession;
