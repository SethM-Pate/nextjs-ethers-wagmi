'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _tslib = require('../../../../_virtual/_tslib.cjs');
var jsxRuntime = require('react/jsx-runtime');
var React = require('react');
var utils = require('@dynamic-labs/utils');
require('../../events/dynamicEvents.cjs');
require('../DynamicContext/DynamicContext.cjs');
require('@dynamic-labs/sdk-api');
var logger = require('../../shared/logger.cjs');
require('@dynamic-labs/iconic');
require('@dynamic-labs/wallet-connector-core');
require('../ViewContext/ViewContext.cjs');
require('@dynamic-labs/wallet-book');
var localStorage = require('../../utils/constants/localStorage.cjs');
require('../../utils/constants/colors.cjs');
require('../../utils/constants/values.cjs');
require('../../shared/utils/classes/storage/localStorage.cjs');
require('viem');
var useLocalStorage = require('../../shared/utils/hooks/useLocalStorage/useLocalStorage.cjs');
require('../../shared/consts/index.cjs');
var useInternalDynamicContext = require('../DynamicContext/useDynamicContext/useInternalDynamicContext.cjs');
require('../CaptchaContext/CaptchaContext.cjs');
require('../ErrorContext/ErrorContext.cjs');
require('@dynamic-labs/multi-wallet');
var getAuthToken = require('../../utils/functions/getAuthToken/getAuthToken.cjs');
require('viem/chains');
require('../AccessDeniedContext/AccessDeniedContext.cjs');
require('../AccountExistsContext/AccountExistsContext.cjs');
var api = require('../../data/api.cjs');
require('../EmailVerificationContext/EmailVerificationContext.cjs');
require('react-dom');
var useEmbeddedWallet = require('../../utils/hooks/useEmbeddedWallet/useEmbeddedWallet.cjs');
require('../ThemeContext/ThemeContext.cjs');
var useIsTurnkeyWallet = require('../../utils/hooks/useIsTurnkeyWallet/useIsTurnkeyWallet.cjs');
var usePromise = require('../../utils/hooks/usePromise/usePromise.cjs');
require('@dynamic-labs/types');
require('yup');
require('react-i18next');
require('../MockContext/MockContext.cjs');
require('../../utils/hooks/useUserUpdateRequest/useUpdateUser/useUpdateUser.cjs');
require('../UserFieldEditorContext/UserFieldEditorContext.cjs');
require('@dynamic-labs/rpc-providers');
require('../UserWalletsContext/UserWalletsContext.cjs');
require('../../components/Alert/Alert.cjs');
require('../../components/ShadowDOM/ShadowDOM.cjs');
require('../../components/IconButton/IconButton.cjs');
require('../../components/InlineWidget/InlineWidget.cjs');
require('../../components/IsBrowser/IsBrowser.cjs');
require('../../components/MenuList/Dropdown/Dropdown.cjs');
require('../../components/Transition/ZoomTransition/ZoomTransition.cjs');
require('../../components/Transition/SlideInUpTransition/SlideInUpTransition.cjs');
require('../../components/Transition/OpacityTransition/OpacityTransition.cjs');
require('../../components/Popper/Popper/Popper.cjs');
require('../../components/Popper/PopperContext/PopperContext.cjs');
require('react-focus-lock');
require('qrcode');
require('formik');
require('../../locale/locale.cjs');
require('../../components/OverlayCard/OverlayCard.context.cjs');
require('../../components/PasskeyCreatedSuccessBanner/PasskeyCreatedSuccessBanner.cjs');
require('../../views/WalletList/WalletList.cjs');
require('@hcaptcha/react-hcaptcha');
require('../LoadingContext/LoadingContext.cjs');
require('../SocialRedirectContext/SocialRedirectContext.cjs');
require('../WalletGroupContext/WalletGroupContext.cjs');
require('../../widgets/DynamicBridgeWidget/views/WalletsView/components/SecondaryWallets/SecondaryWallets.cjs');
require('../FooterAnimationContext/index.cjs');
require('../../widgets/DynamicWidget/components/DynamicWidgetHeader/DynamicWidgetHeader.cjs');
require('../../widgets/DynamicWidget/context/DynamicWidgetContext.cjs');
require('../../components/UserProfile/parts/UserProfileField/components/VerifiedEmailIcon/VerifiedEmailIcon.cjs');
require('@dynamic-labs/viem-utils');
require('../../views/TransactionConfirmationView/helpers/transactionErrorMessage.cjs');
require('../../utils/hooks/useTransactionWithGasPrice/useTransactionWithGasPrice.cjs');
require('../../widgets/DynamicWidget/views/ManagePasskeysWidgetView/PasskeyCard/PasskeyCard.cjs');

const PasskeyContext = React.createContext(undefined);
const PasskeyContextProviderWithBrowser = ({ children, }) => {
    var _a, _b, _c, _d, _e, _f, _g, _h;
    const { userHasEmbeddedWallet } = useEmbeddedWallet.useEmbeddedWallet();
    const { isTurnkeyWalletWithoutAuthenticator } = useIsTurnkeyWallet.useIsTurnkeyWallet();
    const { environmentId, projectSettings } = useInternalDynamicContext.useInternalDynamicContext();
    // state for when passkey list needs to re-render
    const [passkeyEdited, setPasskeyEdited] = React.useState(false);
    // states to pass into rename passkey popup
    const [passkey, setPasskey] = React.useState(undefined);
    const [passkeyIcon, setPasskeyIcon] = React.useState(undefined);
    const [_showSecureAccountBanner, setShowSecureAccountBanner] = useLocalStorage.useLocalStorage(localStorage.EMBEDDED_WALLET_SECURE_BANNER, true);
    const showSecureAccountBanner = React.useMemo(() => {
        var _a, _b, _c, _d;
        const isPasskeyEnabled = Boolean((_d = (_c = (_b = (_a = projectSettings === null || projectSettings === void 0 ? void 0 : projectSettings.sdk) === null || _a === void 0 ? void 0 : _a.embeddedWallets) === null || _b === void 0 ? void 0 : _b.supportedSecurityMethods) === null || _c === void 0 ? void 0 : _c.passkey) === null || _d === void 0 ? void 0 : _d.isEnabled);
        return (_showSecureAccountBanner !== false &&
            isTurnkeyWalletWithoutAuthenticator &&
            isPasskeyEnabled);
    }, [
        isTurnkeyWalletWithoutAuthenticator,
        _showSecureAccountBanner,
        (_d = (_c = (_b = (_a = projectSettings === null || projectSettings === void 0 ? void 0 : projectSettings.sdk) === null || _a === void 0 ? void 0 : _a.embeddedWallets) === null || _b === void 0 ? void 0 : _b.supportedSecurityMethods) === null || _c === void 0 ? void 0 : _c.passkey) === null || _d === void 0 ? void 0 : _d.isEnabled,
    ]);
    const showAlert = React.useCallback(() => {
        var _a, _b, _c, _d;
        const isPasskeyEnabled = Boolean((_d = (_c = (_b = (_a = projectSettings === null || projectSettings === void 0 ? void 0 : projectSettings.sdk) === null || _a === void 0 ? void 0 : _a.embeddedWallets) === null || _b === void 0 ? void 0 : _b.supportedSecurityMethods) === null || _c === void 0 ? void 0 : _c.passkey) === null || _d === void 0 ? void 0 : _d.isEnabled);
        return (!showSecureAccountBanner &&
            isTurnkeyWalletWithoutAuthenticator &&
            isPasskeyEnabled);
    }, [
        showSecureAccountBanner,
        isTurnkeyWalletWithoutAuthenticator,
        (_h = (_g = (_f = (_e = projectSettings === null || projectSettings === void 0 ? void 0 : projectSettings.sdk) === null || _e === void 0 ? void 0 : _e.embeddedWallets) === null || _f === void 0 ? void 0 : _f.supportedSecurityMethods) === null || _g === void 0 ? void 0 : _g.passkey) === null || _h === void 0 ? void 0 : _h.isEnabled,
    ]);
    const userJwt = getAuthToken.getAuthToken();
    // It fetches user passkeys if user has embedded wallet
    const getUserPasskeysResult = usePromise.usePromise(() => _tslib.__awaiter(void 0, void 0, void 0, function* () {
        const data = yield api.getUserPasskeys({
            environmentId: environmentId,
            userJwt: userJwt,
        });
        return data.passkeys;
    }), {
        deps: [environmentId, userJwt, userHasEmbeddedWallet(), passkeyEdited],
        enabled: Boolean(environmentId && userJwt && userHasEmbeddedWallet()),
    });
    // Returns true if user has passkeys for current origin
    const userHasPasskeysForCurrentOrigin = React.useMemo(() => {
        if (typeof window === 'undefined') {
            return false;
        }
        const { location: { hostname }, } = window;
        if (!getUserPasskeysResult.data)
            return false;
        return getUserPasskeysResult.data.some((passkey) => {
            if (!passkey.origin)
                return false;
            try {
                const passkeyHostname = new URL(passkey.origin).hostname;
                return passkeyHostname === utils.getTLD() || passkeyHostname === hostname;
            }
            catch (e) {
                logger.logger.error(e);
                return false;
            }
        });
    }, [getUserPasskeysResult.data]);
    // user has passkey configured, but not for current origin
    const userNeedsCrossDomainPasskey = !isTurnkeyWalletWithoutAuthenticator && !userHasPasskeysForCurrentOrigin;
    const value = React.useMemo(() => {
        var _a;
        return ({
            passkey,
            passkeyEdited,
            passkeyIcon,
            setPasskey,
            setPasskeyEdited,
            setPasskeyIcon,
            setShowSecureAccountBanner,
            showAlert,
            showSecureAccountBanner,
            userHasPasskeysForCurrentOrigin,
            userNeedsCrossDomainPasskey,
            userPasskeys: (_a = getUserPasskeysResult.data) !== null && _a !== void 0 ? _a : [],
            userPasskeysLoading: getUserPasskeysResult.isLoading,
        });
    }, [
        passkey,
        passkeyEdited,
        passkeyIcon,
        userHasPasskeysForCurrentOrigin,
        getUserPasskeysResult.data,
        getUserPasskeysResult.isLoading,
        isTurnkeyWalletWithoutAuthenticator,
        userNeedsCrossDomainPasskey,
        showAlert,
        setShowSecureAccountBanner,
        showSecureAccountBanner,
    ]);
    return (jsxRuntime.jsx(PasskeyContext.Provider, { value: value, children: children }));
};
// We need to export the context this way so it works with SSR (next.js)
const PasskeyContextProvider = ({ children, }) => (jsxRuntime.jsx(PasskeyContextProviderWithBrowser, { children: children }));
const usePasskeyContext = () => {
    const context = React.useContext(PasskeyContext);
    if (context === undefined) {
        throw new Error('usage of PasskeyContext not wrapped in `PasskeyContextProvider`.');
    }
    return context;
};

exports.PasskeyContext = PasskeyContext;
exports.PasskeyContextProvider = PasskeyContextProvider;
exports.usePasskeyContext = usePasskeyContext;
