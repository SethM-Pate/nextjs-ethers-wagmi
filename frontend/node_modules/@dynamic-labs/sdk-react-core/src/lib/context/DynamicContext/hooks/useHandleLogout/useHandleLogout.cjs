'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _tslib = require('../../../../../../_virtual/_tslib.cjs');
var React = require('react');
var api = require('../../../../data/api.cjs');
var dynamicEvents = require('../../../../events/dynamicEvents.cjs');
require('@dynamic-labs/sdk-api');
require('../../../../shared/logger.cjs');
require('@dynamic-labs/iconic');
require('@dynamic-labs/wallet-connector-core');
require('react/jsx-runtime');
require('../../../ViewContext/ViewContext.cjs');
require('@dynamic-labs/wallet-book');
var localStorage$1 = require('../../../../utils/constants/localStorage.cjs');
require('../../../../utils/constants/colors.cjs');
require('../../../../utils/constants/values.cjs');
var localStorage = require('../../../../shared/utils/classes/storage/localStorage.cjs');
require('viem');
require('@dynamic-labs/utils');
require('../../../../shared/consts/index.cjs');
require('@dynamic-labs/multi-wallet');
var getAuthToken = require('../../../../utils/functions/getAuthToken/getAuthToken.cjs');
require('viem/chains');
var useDynamicEvents = require('../../../../utils/hooks/events/useDynamicEvents/useDynamicEvents.cjs');
require('../../DynamicContext.cjs');
require('../../../CaptchaContext/CaptchaContext.cjs');
require('../../../ErrorContext/ErrorContext.cjs');
require('../../../AccessDeniedContext/AccessDeniedContext.cjs');
require('../../../AccountExistsContext/AccountExistsContext.cjs');
require('../../../EmailVerificationContext/EmailVerificationContext.cjs');
require('react-dom');
require('../../../ThemeContext/ThemeContext.cjs');
require('@dynamic-labs/types');
require('yup');
require('react-i18next');
require('../../../MockContext/MockContext.cjs');
require('../../../../utils/hooks/useUserUpdateRequest/useUpdateUser/useUpdateUser.cjs');
require('../../../UserFieldEditorContext/UserFieldEditorContext.cjs');
require('@dynamic-labs/rpc-providers');
require('../../../UserWalletsContext/UserWalletsContext.cjs');
require('../../../../components/Alert/Alert.cjs');
require('../../../../components/ShadowDOM/ShadowDOM.cjs');
require('../../../../components/IconButton/IconButton.cjs');
require('../../../../components/InlineWidget/InlineWidget.cjs');
require('../../../../components/IsBrowser/IsBrowser.cjs');
require('../../../../components/MenuList/Dropdown/Dropdown.cjs');
require('../../../../components/Transition/ZoomTransition/ZoomTransition.cjs');
require('../../../../components/Transition/SlideInUpTransition/SlideInUpTransition.cjs');
require('../../../../components/Transition/OpacityTransition/OpacityTransition.cjs');
require('../../../../components/Popper/Popper/Popper.cjs');
require('../../../../components/Popper/PopperContext/PopperContext.cjs');
require('react-focus-lock');
require('qrcode');
require('formik');
require('../../../../locale/locale.cjs');
require('../../../../components/OverlayCard/OverlayCard.context.cjs');
require('../../../../components/PasskeyCreatedSuccessBanner/PasskeyCreatedSuccessBanner.cjs');
require('../../../PasskeyContext/PasskeyContext.cjs');
require('../../../../views/WalletList/WalletList.cjs');
require('@hcaptcha/react-hcaptcha');
require('../../../LoadingContext/LoadingContext.cjs');
require('../../../SocialRedirectContext/SocialRedirectContext.cjs');
require('../../../WalletGroupContext/WalletGroupContext.cjs');
require('../../../../widgets/DynamicBridgeWidget/views/WalletsView/components/SecondaryWallets/SecondaryWallets.cjs');
require('../../../FooterAnimationContext/index.cjs');
require('../../../../widgets/DynamicWidget/components/DynamicWidgetHeader/DynamicWidgetHeader.cjs');
require('../../../../widgets/DynamicWidget/context/DynamicWidgetContext.cjs');
require('../../../../components/UserProfile/parts/UserProfileField/components/VerifiedEmailIcon/VerifiedEmailIcon.cjs');
require('@dynamic-labs/viem-utils');
require('../../../../views/TransactionConfirmationView/helpers/transactionErrorMessage.cjs');
require('../../../../utils/hooks/useTransactionWithGasPrice/useTransactionWithGasPrice.cjs');
require('../../../../widgets/DynamicWidget/views/ManagePasskeysWidgetView/PasskeyCard/PasskeyCard.cjs');

const useHandleLogout = (params) => {
    const paramsRef = React.useRef(params);
    paramsRef.current = params;
    const logout = React.useCallback(() => _tslib.__awaiter(void 0, void 0, void 0, function* () {
        const p = paramsRef.current;
        p.setSdkHasLoaded(false);
        p.clearAllWalletConnectSessions();
        p.setShowDynamicUserProfile(false);
        p.setShowBridgeWidget(false);
        p.resetLoginWithEmail();
        localStorage.LocalStorage.removeFromLS(localStorage$1.WALLET_PICKER_SEARCH_KEY);
        const jwt = getAuthToken.getAuthToken();
        if (jwt && p.user) {
            // do not await this async call - just fire and forget
            api.revokeSession({ environmentId: p.environmentId, sessionId: p.user.sessionId }, jwt);
        }
        // Necessary when user logs out in user data collection view
        // Dont require flag to be set though
        if (p.isVerificationInProgress)
            p.setIsVerificationInProgress(false);
        p.setLegacyIsVerifying(false);
        localStorage.LocalStorage.removeFromLS(localStorage$1.AUTH_TOKEN);
        p.setAuthMode(p.initialAuthenticationMode);
        p.setShowAuthFlow(false, {
            emitCancelAuth: false,
            ignoreIfIsEmbeddedWidget: false,
            initializeWalletConnect: false,
            performMultiWalletChecks: false,
        });
        p.setMultiWalletWidgetState('idle');
        p.removeLsSettings();
        p.handleRemoveLsNetworks();
        p.setOnboardingOnlyJwt(undefined);
        p.removeConnectedWalletsInfo();
        p.removeBridgeOnboardingCompleted();
        p.clearPrimaryWalletId();
        p.removeConnectedNameService();
        dynamicEvents.dynamicEvents.emit('logout');
        p.removeUser();
        yield Promise.all(p.walletConnectors.map((connector) => connector.endSession()));
        yield Promise.all(p.connectedWallets.map((connectedWallet) => connectedWallet.connector.endSession()));
    }), []);
    /** Allows triggering a logout from anywhere in the code */
    useDynamicEvents.useInternalDynamicEvents('triggerLogout', () => logout());
    return logout;
};

exports.useHandleLogout = useHandleLogout;
