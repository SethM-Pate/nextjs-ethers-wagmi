'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var useDynamicEvents = require('../../../../utils/hooks/events/useDynamicEvents/useDynamicEvents.cjs');
require('react');
require('../../../../../../_virtual/_tslib.cjs');
require('@dynamic-labs/utils');
require('../../DynamicContext.cjs');
require('@dynamic-labs/sdk-api');
require('../../../../shared/logger.cjs');
require('@dynamic-labs/iconic');
require('@dynamic-labs/wallet-connector-core');
require('react/jsx-runtime');
require('../../../ViewContext/ViewContext.cjs');
require('@dynamic-labs/wallet-book');
require('../../../../utils/constants/colors.cjs');
require('../../../../utils/constants/values.cjs');
require('../../../../shared/utils/classes/storage/localStorage.cjs');
require('viem');
require('../../../../shared/consts/index.cjs');
require('../../../CaptchaContext/CaptchaContext.cjs');
require('../../../ErrorContext/ErrorContext.cjs');
require('@dynamic-labs/multi-wallet');
require('viem/chains');
require('../../../AccessDeniedContext/AccessDeniedContext.cjs');
require('../../../AccountExistsContext/AccountExistsContext.cjs');
require('../../../../config/ApiEndpoint.cjs');
require('../../../EmailVerificationContext/EmailVerificationContext.cjs');
require('react-dom');
require('../../../../events/dynamicEvents.cjs');
require('../../../ThemeContext/ThemeContext.cjs');
require('@dynamic-labs/types');
require('yup');
require('react-i18next');
require('../../../MockContext/MockContext.cjs');
require('../../../../utils/hooks/useUserUpdateRequest/useUpdateUser/useUpdateUser.cjs');
require('../../../UserFieldEditorContext/UserFieldEditorContext.cjs');
require('@dynamic-labs/rpc-providers');
require('../../../UserWalletsContext/UserWalletsContext.cjs');
require('../../../../components/Alert/Alert.cjs');
require('../../../../components/ShadowDOM/ShadowDOM.cjs');
require('../../../../components/IconButton/IconButton.cjs');
require('../../../../components/InlineWidget/InlineWidget.cjs');
require('../../../../components/IsBrowser/IsBrowser.cjs');
require('../../../../components/MenuList/Dropdown/Dropdown.cjs');
require('../../../../components/Transition/ZoomTransition/ZoomTransition.cjs');
require('../../../../components/Transition/SlideInUpTransition/SlideInUpTransition.cjs');
require('../../../../components/Transition/OpacityTransition/OpacityTransition.cjs');
require('../../../../components/Popper/Popper/Popper.cjs');
require('../../../../components/Popper/PopperContext/PopperContext.cjs');
require('react-focus-lock');
require('qrcode');
require('formik');
require('../../../../locale/locale.cjs');
require('../../../../components/OverlayCard/OverlayCard.context.cjs');
require('../../../../components/PasskeyCreatedSuccessBanner/PasskeyCreatedSuccessBanner.cjs');
require('../../../PasskeyContext/PasskeyContext.cjs');
require('../../../../views/WalletList/WalletList.cjs');
require('@hcaptcha/react-hcaptcha');
require('../../../LoadingContext/LoadingContext.cjs');
require('../../../SocialRedirectContext/SocialRedirectContext.cjs');
require('../../../WalletGroupContext/WalletGroupContext.cjs');
require('../../../../widgets/DynamicBridgeWidget/views/WalletsView/components/SecondaryWallets/SecondaryWallets.cjs');
require('../../../FooterAnimationContext/index.cjs');
require('../../../../widgets/DynamicWidget/components/DynamicWidgetHeader/DynamicWidgetHeader.cjs');
require('../../../../widgets/DynamicWidget/context/DynamicWidgetContext.cjs');
require('../../../../components/UserProfile/parts/UserProfileField/components/VerifiedEmailIcon/VerifiedEmailIcon.cjs');
require('@dynamic-labs/viem-utils');
require('../../../../views/TransactionConfirmationView/helpers/transactionErrorMessage.cjs');
require('../../../../utils/hooks/useTransactionWithGasPrice/useTransactionWithGasPrice.cjs');
require('../../../../widgets/DynamicWidget/views/ManagePasskeysWidgetView/PasskeyCard/PasskeyCard.cjs');

/** Ties the customer callbacks to our events, such that our events will also trigger the callbacks */
const useTieCallbacksToEvents = ({ clientCallbacks, connectedWallets, user, setHasLoggedOut, }) => {
    useDynamicEvents.useInternalDynamicEvents('emailVerificationResult', (result, email) => {
        var _a, _b;
        if (result)
            (_a = clientCallbacks === null || clientCallbacks === void 0 ? void 0 : clientCallbacks.onEmailVerificationSuccess) === null || _a === void 0 ? void 0 : _a.call(clientCallbacks, email);
        else
            (_b = clientCallbacks === null || clientCallbacks === void 0 ? void 0 : clientCallbacks.onEmailVerificationFailure) === null || _b === void 0 ? void 0 : _b.call(clientCallbacks, email);
    });
    useDynamicEvents.useInternalDynamicEvents('authFlowCancelled', () => { var _a; return (_a = clientCallbacks === null || clientCallbacks === void 0 ? void 0 : clientCallbacks.onAuthFlowCancel) === null || _a === void 0 ? void 0 : _a.call(clientCallbacks); });
    useDynamicEvents.useInternalDynamicEvents('authFlowOpen', () => {
        var _a;
        (_a = clientCallbacks === null || clientCallbacks === void 0 ? void 0 : clientCallbacks.onAuthFlowOpen) === null || _a === void 0 ? void 0 : _a.call(clientCallbacks);
    });
    useDynamicEvents.useInternalDynamicEvents('authFlowClose', () => {
        var _a;
        (_a = clientCallbacks === null || clientCallbacks === void 0 ? void 0 : clientCallbacks.onAuthFlowClose) === null || _a === void 0 ? void 0 : _a.call(clientCallbacks);
    });
    useDynamicEvents.useInternalDynamicEvents('walletConnected', (wallet) => {
        var _a;
        (_a = clientCallbacks === null || clientCallbacks === void 0 ? void 0 : clientCallbacks.onConnect) === null || _a === void 0 ? void 0 : _a.call(clientCallbacks, { wallet, walletConnector: wallet.connector });
        setHasLoggedOut(false);
    });
    useDynamicEvents.useInternalDynamicEvents('logout', () => {
        var _a;
        if (clientCallbacks === null || clientCallbacks === void 0 ? void 0 : clientCallbacks.onDisconnect)
            for (const connectedWallet of connectedWallets) {
                clientCallbacks.onDisconnect({
                    wallet: connectedWallet,
                    walletConnector: connectedWallet === null || connectedWallet === void 0 ? void 0 : connectedWallet.connector,
                });
            }
        (_a = clientCallbacks === null || clientCallbacks === void 0 ? void 0 : clientCallbacks.onLogout) === null || _a === void 0 ? void 0 : _a.call(clientCallbacks, user);
    });
};

exports.useTieCallbacksToEvents = useTieCallbacksToEvents;
