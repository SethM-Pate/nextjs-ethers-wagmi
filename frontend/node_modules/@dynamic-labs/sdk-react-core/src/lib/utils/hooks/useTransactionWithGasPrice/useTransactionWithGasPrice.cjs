'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var React = require('react');
var useInterval = require('../useInterval/useInterval.cjs');
require('../../../events/dynamicEvents.cjs');
require('../../../../../_virtual/_tslib.cjs');
require('@dynamic-labs/utils');
require('../../../context/DynamicContext/DynamicContext.cjs');
require('@dynamic-labs/sdk-api');
require('../../../shared/logger.cjs');
require('@dynamic-labs/iconic');
require('@dynamic-labs/wallet-connector-core');
require('react/jsx-runtime');
require('../../../context/ViewContext/ViewContext.cjs');
require('@dynamic-labs/wallet-book');
require('../../constants/colors.cjs');
require('../../constants/values.cjs');
require('../../../shared/utils/classes/storage/localStorage.cjs');
require('viem');
require('../../../shared/consts/index.cjs');
require('../../../context/CaptchaContext/CaptchaContext.cjs');
require('../../../context/ErrorContext/ErrorContext.cjs');
require('@dynamic-labs/multi-wallet');
require('viem/chains');
require('../../../context/AccessDeniedContext/AccessDeniedContext.cjs');
require('../../../context/AccountExistsContext/AccountExistsContext.cjs');
require('../../../config/ApiEndpoint.cjs');
require('../../../context/EmailVerificationContext/EmailVerificationContext.cjs');
require('react-dom');
require('../../../context/ThemeContext/ThemeContext.cjs');
var usePromise = require('../usePromise/usePromise.cjs');
require('@dynamic-labs/types');
require('yup');
require('react-i18next');
require('../../../context/MockContext/MockContext.cjs');
require('../useUserUpdateRequest/useUpdateUser/useUpdateUser.cjs');
require('../../../context/UserFieldEditorContext/UserFieldEditorContext.cjs');
require('@dynamic-labs/rpc-providers');
require('../../../context/UserWalletsContext/UserWalletsContext.cjs');
require('../../../components/Alert/Alert.cjs');
require('../../../components/ShadowDOM/ShadowDOM.cjs');
require('../../../components/IconButton/IconButton.cjs');
require('../../../components/InlineWidget/InlineWidget.cjs');
require('../../../components/IsBrowser/IsBrowser.cjs');
require('../../../components/MenuList/Dropdown/Dropdown.cjs');
require('../../../components/Transition/ZoomTransition/ZoomTransition.cjs');
require('../../../components/Transition/SlideInUpTransition/SlideInUpTransition.cjs');
require('../../../components/Transition/OpacityTransition/OpacityTransition.cjs');
require('../../../components/Popper/Popper/Popper.cjs');
require('../../../components/Popper/PopperContext/PopperContext.cjs');
require('react-focus-lock');
require('qrcode');
require('formik');
require('../../../locale/locale.cjs');
require('../../../components/OverlayCard/OverlayCard.context.cjs');
require('../../../components/PasskeyCreatedSuccessBanner/PasskeyCreatedSuccessBanner.cjs');
require('../../../context/PasskeyContext/PasskeyContext.cjs');
require('../../../views/WalletList/WalletList.cjs');
require('@hcaptcha/react-hcaptcha');
require('../../../context/LoadingContext/LoadingContext.cjs');
require('../../../context/SocialRedirectContext/SocialRedirectContext.cjs');
require('../../../context/WalletGroupContext/WalletGroupContext.cjs');
require('../../../widgets/DynamicBridgeWidget/views/WalletsView/components/SecondaryWallets/SecondaryWallets.cjs');
require('../../../context/FooterAnimationContext/index.cjs');
require('../../../widgets/DynamicWidget/components/DynamicWidgetHeader/DynamicWidgetHeader.cjs');
require('../../../widgets/DynamicWidget/context/DynamicWidgetContext.cjs');
require('../../../components/UserProfile/parts/UserProfileField/components/VerifiedEmailIcon/VerifiedEmailIcon.cjs');
require('@dynamic-labs/viem-utils');
require('../../../views/TransactionConfirmationView/helpers/transactionErrorMessage.cjs');
require('../../../widgets/DynamicWidget/views/ManagePasskeysWidgetView/PasskeyCard/PasskeyCard.cjs');

/**
 * The interval to refresh the gas price in milliseconds.
 */
const REFRESH_INTERVAL = 20000;
/**
 * The multiplier to apply to the gas price.
 * This will define how aggressive the gas price will be.
 * This value should be between 1 and 2, where 1 is less aggressive and 2 is more aggressive.
 */
const gasMultiplier = BigInt(2);
/**
 * A React Hook that returns a transaction object with the gas price set to the current gas price from the provider.
 *
 * @param {Object} props - The properties for the hook.
 * @param {PublicClient} props.provider - The provider to use for getting the current gas price.
 * @param {TransactionRequest} props.transaction - The transaction object.
 *
 * @returns {TransactionRequest} A new transaction object with the gas price.
 *
 * @example
 * const updatedTransaction = useTransactionWithGasPrice({
 *   provider: myProvider,
 *   transaction: myTransaction,
 * });
 */
const useTransactionWithGasPrice = ({ provider, transaction, enabled = true, }) => {
    const isGasPriceDefinedInTransaction = Boolean(transaction.gasPrice);
    const isMaxFeePerGasDefinedInTransaction = Boolean(transaction.maxFeePerGas);
    const [estimationKey, setEstimationKey] = React.useState(0);
    const shouldApplyGasFee = isGasPriceDefinedInTransaction === false &&
        isMaxFeePerGasDefinedInTransaction === false &&
        enabled === true;
    const { data: feesPerGas } = usePromise.usePromise(() => provider.estimateFeesPerGas(), {
        deps: [estimationKey],
        enabled: shouldApplyGasFee,
    });
    /**
     * This interval triggers the refresh of the transaction gas fees every 20 seconds.
     */
    useInterval.useInterval(() => {
        setEstimationKey((estimationKey) => estimationKey + 1);
    }, REFRESH_INTERVAL);
    return React.useMemo(() => {
        if (!shouldApplyGasFee) {
            return transaction;
        }
        if (feesPerGas &&
            feesPerGas.maxFeePerGas &&
            feesPerGas.maxPriorityFeePerGas) {
            return Object.assign(Object.assign({}, transaction), { maxFeePerGas: feesPerGas.maxFeePerGas * gasMultiplier, maxPriorityFeePerGas: feesPerGas.maxPriorityFeePerGas * gasMultiplier });
        }
        return transaction;
    }, [feesPerGas, transaction, shouldApplyGasFee]);
};

exports.REFRESH_INTERVAL = REFRESH_INTERVAL;
exports.useTransactionWithGasPrice = useTransactionWithGasPrice;
