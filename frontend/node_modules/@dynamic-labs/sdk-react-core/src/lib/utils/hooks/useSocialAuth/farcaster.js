import { __awaiter } from '../../../../../_virtual/_tslib.js';
import { dynamicEvents } from '../../../events/dynamicEvents.js';
import '@dynamic-labs/sdk-api';
import { logger } from '../../../shared/logger.js';
import '@dynamic-labs/iconic';
import '@dynamic-labs/wallet-connector-core';
import 'react/jsx-runtime';
import '../../../context/ViewContext/ViewContext.js';
import 'react';
import '@dynamic-labs/wallet-book';
import '../../constants/colors.js';
import '../../constants/values.js';
import '../../../shared/utils/classes/storage/localStorage.js';
import 'viem';
import '@dynamic-labs/utils';
import '../../../shared/consts/index.js';

const CONNECT_URL = 'https://relay.farcaster.xyz/v1/channel';
const STATUS_URL = 'https://relay.farcaster.xyz/v1/channel/status';
const STATUS_TIMEOUT = 300000;
const STATUS_INTERVAL = 1000;
const connect = (connectRequest) => __awaiter(void 0, void 0, void 0, function* () {
    try {
        const response = yield fetch(CONNECT_URL, {
            body: JSON.stringify(connectRequest),
            headers: {
                'Content-Type': 'application/json',
            },
            method: 'POST',
        });
        if (!response.ok) {
            throw new Error(`HTTP error! status: ${response.status}`);
        }
        return yield response.json();
    }
    catch (error) {
        logger.error('Error connecting with farcaster:', error);
        return;
    }
});
const status = (connectStatusRequest) => __awaiter(void 0, void 0, void 0, function* () {
    try {
        const response = yield fetch(STATUS_URL, {
            headers: {
                Authorization: `Bearer ${connectStatusRequest.channelToken}`,
                'Content-Type': 'application/json',
            },
            method: 'GET',
        });
        if (!response.ok) {
            throw new Error(`HTTP error! status: ${response.status}`);
        }
        return yield response.json();
    }
    catch (error) {
        logger.error('Error fetching farcaster connect status:', error);
        return;
    }
});
const watchStatus = (connectStatusRequest_1, ...args_1) => __awaiter(void 0, [connectStatusRequest_1, ...args_1], void 0, function* (connectStatusRequest, { timeout = STATUS_TIMEOUT, interval = STATUS_INTERVAL } = {}) {
    const deadline = Date.now() + timeout;
    let shouldPoll = true;
    dynamicEvents.on('farcasterConnectCancelled', () => {
        shouldPoll = false;
    });
    while (shouldPoll && Date.now() < deadline) {
        const response = yield status(connectStatusRequest);
        if (!response) {
            return 'rejected';
        }
        if (response.state === 'completed') {
            return response;
        }
        yield new Promise((resolve) => setTimeout(resolve, STATUS_INTERVAL));
    }
    if (!shouldPoll) {
        return 'cancelled';
    }
    logger.error(`Polling farcaster connect status timed out after ${STATUS_TIMEOUT}ms`);
    return 'timeout';
});

export { connect, status, watchStatus };
