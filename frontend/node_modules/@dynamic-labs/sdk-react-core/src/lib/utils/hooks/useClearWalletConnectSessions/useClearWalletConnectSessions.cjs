'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var React = require('react');
require('@dynamic-labs/sdk-api');
require('../../../shared/logger.cjs');
require('@dynamic-labs/iconic');
require('@dynamic-labs/wallet-connector-core');
require('react/jsx-runtime');
require('../../../context/ViewContext/ViewContext.cjs');
require('@dynamic-labs/wallet-book');
var localStorage$2 = require('../../constants/localStorage.cjs');
require('../../constants/colors.cjs');
require('../../constants/values.cjs');
var localStorage$1 = require('../../../shared/utils/classes/storage/localStorage.cjs');
require('viem');
require('@dynamic-labs/utils');
require('../../../shared/consts/index.cjs');

const useClearWalletConnectSessions = ({ connectors }) => {
    const clearAllWalletConnectSessions = () => {
        if (typeof window === 'undefined')
            return;
        for (const key of localStorage$1.LocalStorage.getKeys()) {
            if (key.startsWith('walletconnect') ||
                key.startsWith('walletlink') ||
                key.startsWith('wc@2')) {
                localStorage.removeItem(key);
            }
        }
        // remove embedded wallet session iframe
        connectors === null || connectors === void 0 ? void 0 : connectors.forEach((connector) => {
            var _a, _b, _c;
            if ((_b = (_a = connector === null || connector === void 0 ? void 0 : connector.name) === null || _a === void 0 ? void 0 : _a.toLowerCase()) === null || _b === void 0 ? void 0 : _b.startsWith('turnkey')) {
                (_c = connector
                    .getAuthenticatorHandler()) === null || _c === void 0 ? void 0 : _c.clear();
                localStorage$1.LocalStorage.removeFromLS(localStorage$2.EMBEDDED_WALLET_SESSION_SETTINGS);
                localStorage$1.LocalStorage.removeFromLS(localStorage$2.EMBEDDED_WALLET_SECURE_BANNER);
            }
        });
    };
    // Clears orphaned wallet connect sessions
    React.useEffect(() => {
        if (typeof window === 'undefined')
            return;
        if (connectors.length === 0)
            return;
        const keys = new Set(connectors.map((connector) => connector.key));
        for (const key of localStorage$1.LocalStorage.getKeys()) {
            if (key.startsWith('walletconnect') &&
                !keys.has(key.replace('walletconnect-', ''))) {
                localStorage.removeItem(key);
            }
        }
    }, [connectors]);
    return { clearAllWalletConnectSessions };
};

exports.useClearWalletConnectSessions = useClearWalletConnectSessions;
