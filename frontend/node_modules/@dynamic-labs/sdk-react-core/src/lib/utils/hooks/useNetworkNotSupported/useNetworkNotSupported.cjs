'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var React = require('react');
var useWalletConnectorNetwork = require('../useWalletConnectorNetwork/useWalletConnectorNetwork.cjs');
require('@dynamic-labs/wallet-connector-core');
require('@dynamic-labs/sdk-api');
require('../../../shared/logger.cjs');
require('@dynamic-labs/iconic');
require('react/jsx-runtime');
require('../../../context/ViewContext/ViewContext.cjs');
require('@dynamic-labs/wallet-book');
require('../../constants/colors.cjs');
require('../../constants/values.cjs');
require('../../../shared/utils/classes/storage/localStorage.cjs');
require('viem');
require('@dynamic-labs/utils');
require('../../../shared/consts/index.cjs');
require('../../../../../_virtual/_tslib.cjs');
require('@dynamic-labs/multi-wallet');
var isSupportedNetwork = require('../../functions/isSupportedNetwork/isSupportedNetwork.cjs');
require('viem/chains');
var useConnectAndSign = require('../authenticationHooks/useConnectAndSign/useConnectAndSign.cjs');
require('../../../context/DynamicContext/DynamicContext.cjs');
require('../../../events/dynamicEvents.cjs');
require('react-dom');
require('../../../config/ApiEndpoint.cjs');
require('../../../context/ThemeContext/ThemeContext.cjs');
require('@dynamic-labs/types');
require('../../../context/ErrorContext/ErrorContext.cjs');
require('../../../context/AccountExistsContext/AccountExistsContext.cjs');
require('yup');
require('react-i18next');
require('../../../context/MockContext/MockContext.cjs');
require('../useUserUpdateRequest/useUpdateUser/useUpdateUser.cjs');
require('../../../context/UserFieldEditorContext/UserFieldEditorContext.cjs');
require('../../../context/AccessDeniedContext/AccessDeniedContext.cjs');
require('@dynamic-labs/rpc-providers');
require('../../../context/UserWalletsContext/UserWalletsContext.cjs');
require('../../../components/Alert/Alert.cjs');
require('../../../components/ShadowDOM/ShadowDOM.cjs');
require('../../../components/IconButton/IconButton.cjs');
require('../../../components/InlineWidget/InlineWidget.cjs');
require('../../../components/IsBrowser/IsBrowser.cjs');
require('../../../components/MenuList/Dropdown/Dropdown.cjs');
require('../../../components/Transition/ZoomTransition/ZoomTransition.cjs');
require('../../../components/Transition/SlideInUpTransition/SlideInUpTransition.cjs');
require('../../../components/Transition/OpacityTransition/OpacityTransition.cjs');
require('../../../components/Popper/Popper/Popper.cjs');
require('../../../components/Popper/PopperContext/PopperContext.cjs');
require('react-focus-lock');
require('qrcode');
require('formik');
require('../../../locale/locale.cjs');
require('../../../components/OverlayCard/OverlayCard.context.cjs');
require('../../../components/PasskeyCreatedSuccessBanner/PasskeyCreatedSuccessBanner.cjs');
require('../../../context/PasskeyContext/PasskeyContext.cjs');
require('../../../views/WalletList/WalletList.cjs');
require('../../../context/EmailVerificationContext/EmailVerificationContext.cjs');
require('@hcaptcha/react-hcaptcha');
require('../../../context/CaptchaContext/CaptchaContext.cjs');
require('../../../context/LoadingContext/LoadingContext.cjs');
require('../../../context/SocialRedirectContext/SocialRedirectContext.cjs');
require('../../../context/WalletGroupContext/WalletGroupContext.cjs');
require('../../../widgets/DynamicBridgeWidget/views/WalletsView/components/SecondaryWallets/SecondaryWallets.cjs');
require('../../../context/FooterAnimationContext/index.cjs');
require('../../../widgets/DynamicWidget/components/DynamicWidgetHeader/DynamicWidgetHeader.cjs');
require('../../../widgets/DynamicWidget/context/DynamicWidgetContext.cjs');
require('../../../components/UserProfile/parts/UserProfileField/components/VerifiedEmailIcon/VerifiedEmailIcon.cjs');
require('@dynamic-labs/viem-utils');
require('../../../views/TransactionConfirmationView/helpers/transactionErrorMessage.cjs');
require('../useTransactionWithGasPrice/useTransactionWithGasPrice.cjs');
require('../../../widgets/DynamicWidget/views/ManagePasskeysWidgetView/PasskeyCard/PasskeyCard.cjs');
var useInternalDynamicContext = require('../../../context/DynamicContext/useDynamicContext/useInternalDynamicContext.cjs');

const useNetworkNotSupported = () => {
    const { selectedWalletConnector: walletConnector, setShowAuthFlow, bridgeChainsToConnect, bridgeOnboardingCompleted, } = useInternalDynamicContext.useInternalDynamicContext();
    const { network: walletConnectorNetwork } = useWalletConnectorNetwork.useWalletConnectorNetwork(walletConnector);
    const finishConnectAndSign = useConnectAndSign.useConnectAndSign({
        shouldCallCallback: false,
        shouldUpdateWallets: Boolean(bridgeChainsToConnect === null || bridgeChainsToConnect === void 0 ? void 0 : bridgeChainsToConnect.length),
    });
    // Finishes auth flow when wallet switches to proper network
    React.useEffect(() => {
        if (!isSupportedNetwork.isSupportedNetwork({ network: walletConnectorNetwork, walletConnector })) {
            return;
        }
        finishConnectAndSign({
            walletConnector: walletConnector,
        });
        // there are two scenarios here, one in not connected state and the other one in connected state.
        // previously we were calling setShowAuthFlow(false) in useHandleWalletsToConnect.
        // now, we don't call it in network-not-supported view, so we need to handle that scenario and close modal here
        // this should be gone, once we're done with the useConnectAndSign hook refactor.
        // TODO: https://linear.app/dynamic-labs/issue/QNTM-117/break-useconnectandsign-hook-to-small-parts
        if (bridgeOnboardingCompleted) {
            setShowAuthFlow(false);
        }
    }, [walletConnectorNetwork, setShowAuthFlow, bridgeOnboardingCompleted]);
    return { currentNetwork: walletConnectorNetwork };
};

exports.useNetworkNotSupported = useNetworkNotSupported;
