'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _tslib = require('../../../../../_virtual/_tslib.cjs');
var dynamicEvents = require('../../../events/dynamicEvents.cjs');
require('@dynamic-labs/sdk-api');
var logger = require('../../../shared/logger.cjs');
require('@dynamic-labs/iconic');
require('@dynamic-labs/wallet-connector-core');
require('react/jsx-runtime');
require('../../../context/ViewContext/ViewContext.cjs');
require('react');
require('@dynamic-labs/wallet-book');
require('../../constants/colors.cjs');
require('../../constants/values.cjs');
require('../../../shared/utils/classes/storage/localStorage.cjs');
require('viem');
require('@dynamic-labs/utils');
require('../../../shared/consts/index.cjs');

const CONNECT_URL = 'https://relay.farcaster.xyz/v1/channel';
const STATUS_URL = 'https://relay.farcaster.xyz/v1/channel/status';
const STATUS_TIMEOUT = 300000;
const STATUS_INTERVAL = 1000;
const connect = (connectRequest) => _tslib.__awaiter(void 0, void 0, void 0, function* () {
    try {
        const response = yield fetch(CONNECT_URL, {
            body: JSON.stringify(connectRequest),
            headers: {
                'Content-Type': 'application/json',
            },
            method: 'POST',
        });
        if (!response.ok) {
            throw new Error(`HTTP error! status: ${response.status}`);
        }
        return yield response.json();
    }
    catch (error) {
        logger.logger.error('Error connecting with farcaster:', error);
        return;
    }
});
const status = (connectStatusRequest) => _tslib.__awaiter(void 0, void 0, void 0, function* () {
    try {
        const response = yield fetch(STATUS_URL, {
            headers: {
                Authorization: `Bearer ${connectStatusRequest.channelToken}`,
                'Content-Type': 'application/json',
            },
            method: 'GET',
        });
        if (!response.ok) {
            throw new Error(`HTTP error! status: ${response.status}`);
        }
        return yield response.json();
    }
    catch (error) {
        logger.logger.error('Error fetching farcaster connect status:', error);
        return;
    }
});
const watchStatus = (connectStatusRequest_1, ...args_1) => _tslib.__awaiter(void 0, [connectStatusRequest_1, ...args_1], void 0, function* (connectStatusRequest, { timeout = STATUS_TIMEOUT, interval = STATUS_INTERVAL } = {}) {
    const deadline = Date.now() + timeout;
    let shouldPoll = true;
    dynamicEvents.dynamicEvents.on('farcasterConnectCancelled', () => {
        shouldPoll = false;
    });
    while (shouldPoll && Date.now() < deadline) {
        const response = yield status(connectStatusRequest);
        if (!response) {
            return 'rejected';
        }
        if (response.state === 'completed') {
            return response;
        }
        yield new Promise((resolve) => setTimeout(resolve, STATUS_INTERVAL));
    }
    if (!shouldPoll) {
        return 'cancelled';
    }
    logger.logger.error(`Polling farcaster connect status timed out after ${STATUS_TIMEOUT}ms`);
    return 'timeout';
});

exports.connect = connect;
exports.status = status;
exports.watchStatus = watchStatus;
