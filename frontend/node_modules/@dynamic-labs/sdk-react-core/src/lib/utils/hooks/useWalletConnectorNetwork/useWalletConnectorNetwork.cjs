'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var React = require('react');
var usePromise = require('../usePromise/usePromise.cjs');
require('../../../events/dynamicEvents.cjs');
var useWalletConnectorEvent = require('../events/useWalletConnectorEvent/useWalletConnectorEvent.cjs');

/**
 * Sync wallet connector network.
 *
 * @param walletConnector - The WalletConnector instance to be used.
 *
 * @returns {{ network: string | number | undefined }} An object containing the current network state.
 *
 * @example
 * // Example of using the useWalletConnectorNetwork hook
 * const { network } = useWalletConnectorNetwork(walletConnector);
 *
 * // You can then use the 'network' state in your component
 * return <div>Current Network: {network}</div>;
 */
const useWalletConnectorNetwork = (walletConnector) => {
    const [network, setNetwork] = React.useState();
    usePromise.usePromise(() => walletConnector === null || walletConnector === void 0 ? void 0 : walletConnector.getNetwork(), {
        onResolve: (network) => setNetwork(network),
    });
    useWalletConnectorEvent.useWalletConnectorEvent(walletConnector || undefined, 'chainChange', ({ chain }) => setNetwork(chain));
    /**
     * Listen to disconnect event and update the network because ArgentX
     * emits a disconnect event when the user switches network.
     */
    useWalletConnectorEvent.useWalletConnectorEvent(walletConnector || undefined, 'disconnect', () => {
        if ((walletConnector === null || walletConnector === void 0 ? void 0 : walletConnector.key) === 'argentx') {
            walletConnector.getNetwork().then(setNetwork);
        }
    });
    return { network };
};

exports.useWalletConnectorNetwork = useWalletConnectorNetwork;
