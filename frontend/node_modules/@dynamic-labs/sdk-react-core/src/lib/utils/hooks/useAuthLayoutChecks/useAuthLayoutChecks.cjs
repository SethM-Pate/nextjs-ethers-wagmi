'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

require('react');
require('../../../context/DynamicContext/DynamicContext.cjs');
require('@dynamic-labs/sdk-api');
require('../../../shared/logger.cjs');
require('@dynamic-labs/iconic');
require('@dynamic-labs/wallet-connector-core');
require('react/jsx-runtime');
var ViewContext = require('../../../context/ViewContext/ViewContext.cjs');
require('@dynamic-labs/wallet-book');
require('../../constants/colors.cjs');
require('../../constants/values.cjs');
require('../../../shared/utils/classes/storage/localStorage.cjs');
require('viem');
require('@dynamic-labs/utils');
require('../../../shared/consts/index.cjs');
require('../../../events/dynamicEvents.cjs');
require('../../../../../_virtual/_tslib.cjs');
require('../../../context/CaptchaContext/CaptchaContext.cjs');
require('../../../context/ErrorContext/ErrorContext.cjs');
require('@dynamic-labs/multi-wallet');
require('viem/chains');
require('../../../context/AccessDeniedContext/AccessDeniedContext.cjs');
require('../../../context/AccountExistsContext/AccountExistsContext.cjs');
require('../../../config/ApiEndpoint.cjs');
require('../../../context/EmailVerificationContext/EmailVerificationContext.cjs');
require('react-dom');
require('../../../context/ThemeContext/ThemeContext.cjs');
require('@dynamic-labs/types');
require('yup');
require('react-i18next');
var MockContext = require('../../../context/MockContext/MockContext.cjs');
require('../useUserUpdateRequest/useUpdateUser/useUpdateUser.cjs');
require('../../../context/UserFieldEditorContext/UserFieldEditorContext.cjs');
require('@dynamic-labs/rpc-providers');
require('../../../context/UserWalletsContext/UserWalletsContext.cjs');
require('../../../components/Alert/Alert.cjs');
require('../../../components/ShadowDOM/ShadowDOM.cjs');
require('../../../components/IconButton/IconButton.cjs');
require('../../../components/InlineWidget/InlineWidget.cjs');
require('../../../components/IsBrowser/IsBrowser.cjs');
require('../../../components/MenuList/Dropdown/Dropdown.cjs');
require('../../../components/Transition/ZoomTransition/ZoomTransition.cjs');
require('../../../components/Transition/SlideInUpTransition/SlideInUpTransition.cjs');
require('../../../components/Transition/OpacityTransition/OpacityTransition.cjs');
require('../../../components/Popper/Popper/Popper.cjs');
require('../../../components/Popper/PopperContext/PopperContext.cjs');
require('react-focus-lock');
require('qrcode');
require('formik');
require('../../../locale/locale.cjs');
require('../../../components/OverlayCard/OverlayCard.context.cjs');
require('../../../components/PasskeyCreatedSuccessBanner/PasskeyCreatedSuccessBanner.cjs');
require('../../../context/PasskeyContext/PasskeyContext.cjs');
require('../../../views/WalletList/WalletList.cjs');
require('@hcaptcha/react-hcaptcha');
require('../../../context/LoadingContext/LoadingContext.cjs');
require('../../../context/SocialRedirectContext/SocialRedirectContext.cjs');
require('../../../context/WalletGroupContext/WalletGroupContext.cjs');
require('../../../widgets/DynamicBridgeWidget/views/WalletsView/components/SecondaryWallets/SecondaryWallets.cjs');
var isUserLinkingWallet = require('../../../shared/utils/functions/isUserLinkingWallet/isUserLinkingWallet.cjs');
var useDynamicLayoutData = require('../useDynamicLayoutData/useDynamicLayoutData.cjs');
var index = require('../../../context/FooterAnimationContext/index.cjs');
require('../../../widgets/DynamicWidget/components/DynamicWidgetHeader/DynamicWidgetHeader.cjs');
require('../../../widgets/DynamicWidget/context/DynamicWidgetContext.cjs');
require('../../../components/UserProfile/parts/UserProfileField/components/VerifiedEmailIcon/VerifiedEmailIcon.cjs');
require('@dynamic-labs/viem-utils');
require('../../../views/TransactionConfirmationView/helpers/transactionErrorMessage.cjs');
require('../useTransactionWithGasPrice/useTransactionWithGasPrice.cjs');
require('../../../widgets/DynamicWidget/views/ManagePasskeysWidgetView/PasskeyCard/PasskeyCard.cjs');
var useInternalDynamicContext = require('../../../context/DynamicContext/useDynamicContext/useInternalDynamicContext.cjs');

const useAuthLayoutChecks = () => {
    const { view } = ViewContext.useViewContext();
    const { user, customPrivacyPolicy, customTermsOfServices, privacyPolicyUrl, termsOfServiceUrl, isBridgeFlow, authMode, } = useInternalDynamicContext.useInternalDynamicContext();
    const { isFooterExpanded } = index.useFooterAnimationContext();
    const { mockedSDK } = MockContext.useMockContext();
    const { helpHeaderData } = useDynamicLayoutData.useDynamicLayoutData({
        authMode,
        view: view.type,
    });
    const displayBorderBelowHeader = (view.type !== 'wallet-list' &&
        view.type !== 'login-with-email-or-wallet-full-wallet-list' &&
        view.type !== 'multi-wallet-wallet-list' &&
        view.type !== 'login-with-wallet-only') ||
        isFooterExpanded;
    const isWalletListTypeView = view.type === 'wallet-connect-mobile-wallets-list' ||
        view.type === 'wallet-list' ||
        view.type === 'login-with-email-or-wallet-full-wallet-list' ||
        view.type === 'login-with-wallet-only';
    const showHelpContent = Boolean(helpHeaderData &&
        // Notice the negation here
        !(view.type === 'qr-code' ||
            view.type === 'no-qr-not-installed' ||
            view.type === 'wallet-used' ||
            view.type === 'chainalysis-blocked-wallet' ||
            view.type === 'wallet-sign' ||
            view.type === 'collect-user-data' ||
            view.type === 'passkey-new-domain-detected' ||
            isUserLinkingWallet.isUserLinkingWallet(user, view.type, mockedSDK)));
    const showHeader = view.type !== 'collect-user-data' &&
        view.type !== 'no-access' &&
        view.type !== 'chainalysis-blocked-wallet' &&
        view.type !== 'wallet-locked-view' &&
        view.type !== 'gate-blocked-wallet' &&
        view.type !== 'email-wallet-otp-verification-view' &&
        view.type !== 'bridge-welcome' &&
        view.type !== 'bridge-summary' &&
        view.type !== 'bridge-next-wallet-connection' &&
        view.type !== 'passkey-intro' &&
        view.type !== 'passkey-new-domain-detected' &&
        view.type !== 'social-redirect-view' &&
        view.type !== 'update-email' &&
        view.type !== 'collect-user-data-login-with-email' &&
        view.type !== 'passkey-recovery-bundle' &&
        view.type !== 'passkey-recovery-start' &&
        view.type !== 'embedded-reveal-view' &&
        view.type !== 'embedded-reveal-account-view' &&
        view.type !== 'rename-passkey' &&
        view.type !== 'embedded-wallet-auth-choice';
    const showConnectedWalletProgress = isBridgeFlow &&
        (view.type === 'wallet-list' ||
            view.type === 'qr-code' ||
            view.type === 'wallet-connect-mobile-wallets-list' ||
            view.type === 'pending-connect' ||
            view.type === 'pending-signature' ||
            view.type === 'pending-signature-without-back-button' ||
            view.type === 'bridge-next-wallet-connection' ||
            view.type === 'bridge-summary');
    const showToSFooter = Boolean(!isUserLinkingWallet.isUserLinkingWallet(user, view.type, mockedSDK) &&
        (view.type === 'wallet-list' ||
            view.type === 'wallet-connect-mobile-wallets-list' ||
            // Don't show empty footer during the login
            ((view.type === 'login-with-email-or-wallet' ||
                view.type === 'login-with-email-or-wallet-full-wallet-list' ||
                view.type === 'login-with-wallet-only' ||
                view.type === 'multi-wallet-wallet-list') &&
                (termsOfServiceUrl ||
                    privacyPolicyUrl ||
                    customPrivacyPolicy ||
                    customTermsOfServices))));
    const showDynamicFooter = view.type === 'login-with-email-or-wallet' ||
        view.type === 'login-with-email-or-wallet-full-wallet-list' ||
        view.type === 'login-with-wallet-only' ||
        view.type === 'login-with-email-verification' ||
        view.type === 'verify-email' ||
        view.type === 'pending-connect' ||
        view.type === 'wallet-group' ||
        view.type === 'select-wallet-in-wallet-group' ||
        view.type === 'select-hardware-wallet' ||
        view.type === 'pending-signature' ||
        view.type === 'qr-code' ||
        view.type === 'wallet-used' ||
        view.type === 'email-wallet-otp-verification-view' ||
        view.type === 'farcaster-connect-view';
    const showCloseButton = view.type !== 'login-with-email-or-wallet-full-wallet-list' &&
        view.type !== 'login-with-email-verification' &&
        view.type !== 'network-not-supported' &&
        view.type !== 'passkey-recovery-complete' &&
        view.type !== 'passkey-recovery-start' &&
        view.type !== 'passkey-recovery-bundle' &&
        view.type !== 'rename-passkey' &&
        view.type !== 'qr-code';
    const showBackButton = view.type === 'pending-signature' ||
        view.type === 'no-qr-not-installed' ||
        view.type === 'wallet-connect-mobile-wallets-list' ||
        view.type === 'login-with-email-verification' ||
        view.type === 'login-with-email-or-wallet-full-wallet-list' ||
        view.type === 'wallet-group' ||
        view.type === 'select-wallet-in-wallet-group' ||
        view.type === 'select-hardware-wallet' ||
        view.type === 'pending-connect' ||
        view.type === 'account-exists' ||
        view.type === 'passkey-intro' ||
        view.type === 'qr-code' ||
        view.type === 'farcaster-connect-view' ||
        (view.type === 'merge-user-accounts' && !user);
    const showDefaultFooter = !showConnectedWalletProgress && !showDynamicFooter && !showToSFooter;
    const shouldHideDynamicFooterSeparator = showDynamicFooter && showToSFooter;
    return {
        displayBorderBelowHeader,
        isWalletListTypeView,
        shouldHideDynamicFooterSeparator,
        showBackButton,
        showCloseButton,
        showConnectedWalletProgress,
        showDefaultFooter,
        showDynamicFooter,
        showHeader,
        showHelpContent,
        showToSFooter,
    };
};

exports.useAuthLayoutChecks = useAuthLayoutChecks;
