import { Chain, FetchPublicAddressOpts, WalletConnector } from '@dynamic-labs/wallet-connector-core';
import { SetShowAuthFlow } from '../../../context/DynamicContext/hooks';
import { ConnectWalletResult } from '../../../context/DynamicContext/types';
import { AuthModeType, OnBeforeConnectSuccessConfirmation, UserProfile, Wallet, WalletOption } from '../../../shared';
export type ConnectedWalletConnectorType = {
    id: string;
    walletChain?: Chain;
    walletConnectorKey: string;
    provider: string;
};
export type UseConnectWalletProps = {
    authMode: AuthModeType;
    clearPrimaryWalletId: () => void;
    enableVisitTrackingOnConnectOnly: boolean;
    environmentId: string;
    primaryWalletId: string | undefined;
    setPrimaryWalletId: (walletId: string) => void;
    walletConnectorOptions: WalletOption[];
    onDisconnect: (wallet?: Wallet) => void;
    onBeforeConnectSuccessConfirmation: OnBeforeConnectSuccessConfirmation | undefined;
    setShowAuthFlow: SetShowAuthFlow;
    isBridgeFlow: boolean;
    setIsVerificationInProgress: (newValue: boolean, checkWasSetOnDisable?: boolean | undefined) => void;
    user: UserProfile | undefined;
};
export type ConnectWalletOptions = {
    /** Whether to call onBeforeConnectSuccessConfirmation */
    applyOnBeforeConnectSuccessConfirmation?: boolean;
    /**
     * Whether to raise onConnected callback after the connected wallet is built
     * Should be removed after the userWallets refactor (QNTM-1082)
     */
    raiseOnConnect?: boolean;
};
type UseConnectWalletValue = {
    connectWallet: (walletConnector: WalletConnector, fetchPublicAddressOpts?: FetchPublicAddressOpts, options?: ConnectWalletOptions) => Promise<ConnectWalletResult | undefined>;
    connectedWallets: Wallet[];
    connectedWalletsInfo: ConnectedWalletConnectorType[];
    getConnectedWalletById: (walletId: string) => Wallet | undefined;
    refreshConnectedWallet: (walletId: string, walletConnector: WalletConnector) => Promise<void>;
    removeConnectedWalletsInfo: () => void;
    disconnectWallet: (walletId: string) => Promise<void>;
};
export declare const useConnectWallet: ({ authMode, clearPrimaryWalletId, enableVisitTrackingOnConnectOnly, environmentId, primaryWalletId, setPrimaryWalletId, walletConnectorOptions, onDisconnect, onBeforeConnectSuccessConfirmation, setShowAuthFlow, isBridgeFlow, setIsVerificationInProgress, user, }: UseConnectWalletProps) => UseConnectWalletValue;
export {};
