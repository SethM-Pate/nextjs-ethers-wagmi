import { useEffect } from 'react';
import { useWalletConnectorNetwork } from '../useWalletConnectorNetwork/useWalletConnectorNetwork.js';
import '@dynamic-labs/wallet-connector-core';
import '@dynamic-labs/sdk-api';
import '../../../shared/logger.js';
import '@dynamic-labs/iconic';
import 'react/jsx-runtime';
import '../../../context/ViewContext/ViewContext.js';
import '@dynamic-labs/wallet-book';
import '../../constants/colors.js';
import '../../constants/values.js';
import '../../../shared/utils/classes/storage/localStorage.js';
import 'viem';
import '@dynamic-labs/utils';
import '../../../shared/consts/index.js';
import '../../../../../_virtual/_tslib.js';
import '@dynamic-labs/multi-wallet';
import { isSupportedNetwork } from '../../functions/isSupportedNetwork/isSupportedNetwork.js';
import 'viem/chains';
import { useConnectAndSign } from '../authenticationHooks/useConnectAndSign/useConnectAndSign.js';
import '../../../context/DynamicContext/DynamicContext.js';
import '../../../events/dynamicEvents.js';
import 'react-dom';
import '../../../config/ApiEndpoint.js';
import '../../../context/ThemeContext/ThemeContext.js';
import '@dynamic-labs/types';
import '../../../context/ErrorContext/ErrorContext.js';
import '../../../context/AccountExistsContext/AccountExistsContext.js';
import 'yup';
import 'react-i18next';
import '../../../context/MockContext/MockContext.js';
import '../useUserUpdateRequest/useUpdateUser/useUpdateUser.js';
import '../../../context/UserFieldEditorContext/UserFieldEditorContext.js';
import '../../../context/AccessDeniedContext/AccessDeniedContext.js';
import '@dynamic-labs/rpc-providers';
import '../../../context/UserWalletsContext/UserWalletsContext.js';
import '../../../components/Alert/Alert.js';
import '../../../components/ShadowDOM/ShadowDOM.js';
import '../../../components/IconButton/IconButton.js';
import '../../../components/InlineWidget/InlineWidget.js';
import '../../../components/IsBrowser/IsBrowser.js';
import '../../../components/MenuList/Dropdown/Dropdown.js';
import '../../../components/Transition/ZoomTransition/ZoomTransition.js';
import '../../../components/Transition/SlideInUpTransition/SlideInUpTransition.js';
import '../../../components/Transition/OpacityTransition/OpacityTransition.js';
import '../../../components/Popper/Popper/Popper.js';
import '../../../components/Popper/PopperContext/PopperContext.js';
import 'react-focus-lock';
import 'qrcode';
import 'formik';
import '../../../locale/locale.js';
import '../../../components/OverlayCard/OverlayCard.context.js';
import '../../../components/PasskeyCreatedSuccessBanner/PasskeyCreatedSuccessBanner.js';
import '../../../context/PasskeyContext/PasskeyContext.js';
import '../../../views/WalletList/WalletList.js';
import '../../../context/EmailVerificationContext/EmailVerificationContext.js';
import '@hcaptcha/react-hcaptcha';
import '../../../context/CaptchaContext/CaptchaContext.js';
import '../../../context/LoadingContext/LoadingContext.js';
import '../../../context/SocialRedirectContext/SocialRedirectContext.js';
import '../../../context/WalletGroupContext/WalletGroupContext.js';
import '../../../widgets/DynamicBridgeWidget/views/WalletsView/components/SecondaryWallets/SecondaryWallets.js';
import '../../../context/FooterAnimationContext/index.js';
import '../../../widgets/DynamicWidget/components/DynamicWidgetHeader/DynamicWidgetHeader.js';
import '../../../widgets/DynamicWidget/context/DynamicWidgetContext.js';
import '../../../components/UserProfile/parts/UserProfileField/components/VerifiedEmailIcon/VerifiedEmailIcon.js';
import '@dynamic-labs/viem-utils';
import '../../../views/TransactionConfirmationView/helpers/transactionErrorMessage.js';
import '../useTransactionWithGasPrice/useTransactionWithGasPrice.js';
import '../../../widgets/DynamicWidget/views/ManagePasskeysWidgetView/PasskeyCard/PasskeyCard.js';
import { useInternalDynamicContext } from '../../../context/DynamicContext/useDynamicContext/useInternalDynamicContext.js';

const useNetworkNotSupported = () => {
    const { selectedWalletConnector: walletConnector, setShowAuthFlow, bridgeChainsToConnect, bridgeOnboardingCompleted, } = useInternalDynamicContext();
    const { network: walletConnectorNetwork } = useWalletConnectorNetwork(walletConnector);
    const finishConnectAndSign = useConnectAndSign({
        shouldCallCallback: false,
        shouldUpdateWallets: Boolean(bridgeChainsToConnect === null || bridgeChainsToConnect === void 0 ? void 0 : bridgeChainsToConnect.length),
    });
    // Finishes auth flow when wallet switches to proper network
    useEffect(() => {
        if (!isSupportedNetwork({ network: walletConnectorNetwork, walletConnector })) {
            return;
        }
        finishConnectAndSign({
            walletConnector: walletConnector,
        });
        // there are two scenarios here, one in not connected state and the other one in connected state.
        // previously we were calling setShowAuthFlow(false) in useHandleWalletsToConnect.
        // now, we don't call it in network-not-supported view, so we need to handle that scenario and close modal here
        // this should be gone, once we're done with the useConnectAndSign hook refactor.
        // TODO: https://linear.app/dynamic-labs/issue/QNTM-117/break-useconnectandsign-hook-to-small-parts
        if (bridgeOnboardingCompleted) {
            setShowAuthFlow(false);
        }
    }, [walletConnectorNetwork, setShowAuthFlow, bridgeOnboardingCompleted]);
    return { currentNetwork: walletConnectorNetwork };
};

export { useNetworkNotSupported };
