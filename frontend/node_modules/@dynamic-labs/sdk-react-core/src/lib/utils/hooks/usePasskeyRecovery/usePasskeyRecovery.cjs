'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _tslib = require('../../../../../_virtual/_tslib.cjs');
var React = require('react');
var walletConnectorCore = require('@dynamic-labs/wallet-connector-core');
require('../../../context/DynamicContext/DynamicContext.cjs');
require('@dynamic-labs/sdk-api');
var logger = require('../../../shared/logger.cjs');
require('@dynamic-labs/iconic');
require('react/jsx-runtime');
var ViewContext = require('../../../context/ViewContext/ViewContext.cjs');
require('@dynamic-labs/wallet-book');
require('../../constants/colors.cjs');
require('../../constants/values.cjs');
require('../../../shared/utils/classes/storage/localStorage.cjs');
require('viem');
require('@dynamic-labs/utils');
require('../../../shared/consts/index.cjs');
var dynamicEvents = require('../../../events/dynamicEvents.cjs');
require('../../../context/CaptchaContext/CaptchaContext.cjs');
require('../../../context/ErrorContext/ErrorContext.cjs');
var createUserProfile = require('../../functions/createUserProfile/createUserProfile.cjs');
require('@dynamic-labs/multi-wallet');
var getAuthToken = require('../../functions/getAuthToken/getAuthToken.cjs');
var isTurnkeyEnabled = require('../../functions/isTurnkeyEnabled/isTurnkeyEnabled.cjs');
var index = require('../../functions/storeAuthToken/index.cjs');
var getEnabledEmbeddedWalletsAuthenticators = require('../../functions/getEnabledEmbeddedWalletsAuthenticators/getEnabledEmbeddedWalletsAuthenticators.cjs');
require('viem/chains');
var getEOAWallet = require('../../functions/getEOAWallet/getEOAWallet.cjs');
require('../../../context/AccessDeniedContext/AccessDeniedContext.cjs');
require('../../../context/AccountExistsContext/AccountExistsContext.cjs');
require('../../../config/ApiEndpoint.cjs');
require('../../../context/EmailVerificationContext/EmailVerificationContext.cjs');
require('react-dom');
var useElementById = require('../useElementById/useElementById.cjs');
var useEmbeddedWallet = require('../useEmbeddedWallet/useEmbeddedWallet.cjs');
require('../../../context/ThemeContext/ThemeContext.cjs');
var constants = require('../../../views/Passkey/PasskeyRecovery/constants.cjs');
var passkeyRecovery = require('../../../views/Passkey/utils/passkeyRecovery/passkeyRecovery.cjs');
var useIsTurnkeyWallet = require('../useIsTurnkeyWallet/useIsTurnkeyWallet.cjs');
var useInitEmbeddedWalletAuthMethod = require('../useInitEmbeddedWalletAuthMethod/useInitEmbeddedWalletAuthMethod.cjs');
require('@dynamic-labs/types');
require('yup');
require('react-i18next');
require('../../../context/MockContext/MockContext.cjs');
require('../useUserUpdateRequest/useUpdateUser/useUpdateUser.cjs');
require('../../../context/UserFieldEditorContext/UserFieldEditorContext.cjs');
require('@dynamic-labs/rpc-providers');
require('../../../context/UserWalletsContext/UserWalletsContext.cjs');
require('../../../components/Alert/Alert.cjs');
require('../../../components/ShadowDOM/ShadowDOM.cjs');
require('../../../components/IconButton/IconButton.cjs');
require('../../../components/InlineWidget/InlineWidget.cjs');
require('../../../components/IsBrowser/IsBrowser.cjs');
require('../../../components/MenuList/Dropdown/Dropdown.cjs');
require('../../../components/Transition/ZoomTransition/ZoomTransition.cjs');
require('../../../components/Transition/SlideInUpTransition/SlideInUpTransition.cjs');
require('../../../components/Transition/OpacityTransition/OpacityTransition.cjs');
require('../../../components/Popper/Popper/Popper.cjs');
require('../../../components/Popper/PopperContext/PopperContext.cjs');
require('react-focus-lock');
require('qrcode');
require('formik');
require('../../../locale/locale.cjs');
require('../../../components/OverlayCard/OverlayCard.context.cjs');
require('../../../components/PasskeyCreatedSuccessBanner/PasskeyCreatedSuccessBanner.cjs');
require('../../../context/PasskeyContext/PasskeyContext.cjs');
require('../../../views/WalletList/WalletList.cjs');
require('@hcaptcha/react-hcaptcha');
require('../../../context/LoadingContext/LoadingContext.cjs');
require('../../../context/SocialRedirectContext/SocialRedirectContext.cjs');
require('../../../context/WalletGroupContext/WalletGroupContext.cjs');
require('../../../widgets/DynamicBridgeWidget/views/WalletsView/components/SecondaryWallets/SecondaryWallets.cjs');
require('../../../context/FooterAnimationContext/index.cjs');
require('../../../widgets/DynamicWidget/components/DynamicWidgetHeader/DynamicWidgetHeader.cjs');
require('../../../widgets/DynamicWidget/context/DynamicWidgetContext.cjs');
require('../../../components/UserProfile/parts/UserProfileField/components/VerifiedEmailIcon/VerifiedEmailIcon.cjs');
require('@dynamic-labs/viem-utils');
require('../../../views/TransactionConfirmationView/helpers/transactionErrorMessage.cjs');
require('../useTransactionWithGasPrice/useTransactionWithGasPrice.cjs');
require('../../../widgets/DynamicWidget/views/ManagePasskeysWidgetView/PasskeyCard/PasskeyCard.cjs');
var useInternalDynamicContext = require('../../../context/DynamicContext/useDynamicContext/useInternalDynamicContext.cjs');

// Hook exposed to customers and used internally to trigger passkey recovery
const usePasskeyRecovery = () => {
    const { authToken, environmentId, primaryWallet, projectSettings, setShowAuthFlow, user, setUser, } = useInternalDynamicContext.useInternalDynamicContext();
    const iframeContainerRef = useElementById.useElementById(constants.iframeContainerId);
    const { userHasEmbeddedWallet } = useEmbeddedWallet.useEmbeddedWallet();
    const { isTurnkeyWalletWithoutAuthenticator } = useIsTurnkeyWallet.useIsTurnkeyWallet();
    const { initAuthMethod } = useInitEmbeddedWalletAuthMethod.useInitEmbeddedWalletAuthMethod();
    const { setView } = ViewContext.useViewContext();
    const wallet = getEOAWallet.getEOAWallet(primaryWallet, (user === null || user === void 0 ? void 0 : user.verifiedCredentials) || []);
    const shouldInitRecovery = React.useCallback(() => _tslib.__awaiter(void 0, void 0, void 0, function* () {
        if (!wallet || !walletConnectorCore.isPasskeyWalletConnector(wallet.connector)) {
            return false;
        }
        const turnkeyRecoveryHandler = wallet.connector.getAuthenticatorHandler();
        // user has passkey authenticator set up OR
        // email auth - session is still up, so no need to recover
        if (!isTurnkeyWalletWithoutAuthenticator ||
            turnkeyRecoveryHandler.isSessionActive() ||
            (yield isSessionRestored())) {
            return false;
        }
        return true;
    }), [primaryWallet, isTurnkeyWalletWithoutAuthenticator]);
    const initPasskeyRecoveryProcess = React.useCallback((authenticatorType, currentAction) => _tslib.__awaiter(void 0, void 0, void 0, function* () {
        var _a;
        validateRecoveryRequest();
        const turnkeyRecoveryHandler = (wallet === null || wallet === void 0 ? void 0 : wallet.connector).getAuthenticatorHandler();
        // email auth - session is still up, so create passkey authenticator usign the same session
        if (authenticatorType === 'passkey' &&
            turnkeyRecoveryHandler.isSessionActive()) {
            const { jwt, decodedJwt } = yield passkeyRecovery.addNewPasskeyAuthenticator({
                authToken,
                environmentId,
                userEmail: user === null || user === void 0 ? void 0 : user.email,
                wallet,
            });
            index.storeAuthToken(jwt);
            setUser(createUserProfile.createUserProfile(decodedJwt));
            setShowAuthFlow(false);
            return wallet;
        }
        const supportedAuthenticators = getEnabledEmbeddedWalletsAuthenticators.getEnabledEmbeddedWalletsAuthenticators((_a = projectSettings === null || projectSettings === void 0 ? void 0 : projectSettings.sdk.embeddedWallets) === null || _a === void 0 ? void 0 : _a.supportedSecurityMethods);
        const supportedAuthenticatorMethods = supportedAuthenticators
            ? Object.keys(supportedAuthenticators)
            : [];
        if (!authenticatorType && supportedAuthenticatorMethods.length > 1) {
            setView('embedded-wallet-auth-choice', { currentAction });
            setShowAuthFlow(true, {
                ignoreIfIsEmbeddedWidget: false,
                performMultiWalletChecks: false,
            });
        }
        else {
            const [authType] = supportedAuthenticatorMethods;
            // since we're forcing the authenticator type = 'email' during transactions when no passkey is configured,
            // we need to make sure it's supported.
            // Otherwise, we'll use the first supported authenticator type from the list
            if (authenticatorType &&
                !supportedAuthenticatorMethods.includes(authenticatorType)) {
                authenticatorType = authType;
            }
            yield initAuthMethod({
                authenticatorType: authenticatorType || authType,
                currentAction,
                iframeContainer: iframeContainerRef.current,
            });
        }
        return new Promise((resolve, reject) => {
            dynamicEvents.dynamicEvents.once('passkeyRecoveryCompleted', (wallet) => resolve(wallet));
            dynamicEvents.dynamicEvents.once('passkeyRecoveryFailed', (error) => reject(error));
        });
    }), [setShowAuthFlow, projectSettings, setView, userHasEmbeddedWallet]);
    const validateRecoveryRequest = () => {
        const jwt = getAuthToken.getAuthToken();
        if (!jwt) {
            throw new Error('User is not logged in');
        }
        if (!isTurnkeyEnabled.isTurnkeyEnabled(projectSettings)) {
            throw new Error('Passkey embedded wallet is not enabled. Go to the dashboard and make sure to have both Turnkey/Passkey Embedded wallets and at least one EVM network enabled. Also, check if EthereumWalletConnectors is in the  DynamicContextProvider > settings > walletConnectors.');
        }
        if (!userHasEmbeddedWallet()) {
            throw new Error('Passkey embedded wallet not found');
        }
        if (wallet && !walletConnectorCore.isPasskeyWalletConnector(wallet.connector)) {
            throw new Error('Passkey embedded wallet not found.');
        }
    };
    const isSessionRestored = () => _tslib.__awaiter(void 0, void 0, void 0, function* () {
        var _b, _c, _d, _e;
        if (!((_b = projectSettings === null || projectSettings === void 0 ? void 0 : projectSettings.sdk.embeddedWallets) === null || _b === void 0 ? void 0 : _b.sessionKeyDuration) ||
            !passkeyRecovery.canRestoreEmbeddedWalletSession((_c = projectSettings === null || projectSettings === void 0 ? void 0 : projectSettings.sdk.embeddedWallets) === null || _c === void 0 ? void 0 : _c.sessionKeyDuration)) {
            return false;
        }
        const sessionExpiration = ((_d = projectSettings === null || projectSettings === void 0 ? void 0 : projectSettings.sdk.embeddedWallets) === null || _d === void 0 ? void 0 : _d.sessionKeyDuration.amount) *
            (((_e = projectSettings === null || projectSettings === void 0 ? void 0 : projectSettings.sdk.embeddedWallets) === null || _e === void 0 ? void 0 : _e.sessionKeyDuration.unit) ===
                'minutes'
                ? 60
                : 3600);
        try {
            return yield passkeyRecovery.restoreEmbeddedWalletSession({
                authToken,
                iframeContainer: iframeContainerRef.current,
                iframeElementId: constants.iframeElementId,
                sessionExpiration,
                wallet: primaryWallet,
            });
        }
        catch (err) {
            logger.logger.error('Failed to restore embedded wallet', err);
        }
        return false;
    });
    return {
        initPasskeyRecoveryProcess,
        shouldInitRecovery,
    };
};

exports.usePasskeyRecovery = usePasskeyRecovery;
