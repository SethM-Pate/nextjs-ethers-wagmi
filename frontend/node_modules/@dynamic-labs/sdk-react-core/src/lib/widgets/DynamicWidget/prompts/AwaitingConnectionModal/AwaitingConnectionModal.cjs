'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var jsxRuntime = require('react/jsx-runtime');
var React = require('react');
var walletConnectorCore = require('@dynamic-labs/wallet-connector-core');
require('../../../../context/DynamicContext/DynamicContext.cjs');
require('@dynamic-labs/sdk-api');
require('../../../../shared/logger.cjs');
require('@dynamic-labs/iconic');
require('../../../../context/ViewContext/ViewContext.cjs');
require('@dynamic-labs/wallet-book');
require('../../../../utils/constants/colors.cjs');
require('../../../../utils/constants/values.cjs');
require('../../../../shared/utils/classes/storage/localStorage.cjs');
require('viem');
require('@dynamic-labs/utils');
require('../../../../shared/consts/index.cjs');
require('../../../../events/dynamicEvents.cjs');
require('../../../../../../_virtual/_tslib.cjs');
require('../../../../context/CaptchaContext/CaptchaContext.cjs');
require('../../../../context/ErrorContext/ErrorContext.cjs');
require('@dynamic-labs/multi-wallet');
require('viem/chains');
require('../../../../context/AccessDeniedContext/AccessDeniedContext.cjs');
require('../../../../context/AccountExistsContext/AccountExistsContext.cjs');
require('../../../../config/ApiEndpoint.cjs');
require('../../../../context/EmailVerificationContext/EmailVerificationContext.cjs');
require('react-dom');
require('../../../../context/ThemeContext/ThemeContext.cjs');
require('@dynamic-labs/types');
require('yup');
require('react-i18next');
require('../../../../context/MockContext/MockContext.cjs');
require('../../../../utils/hooks/useUserUpdateRequest/useUpdateUser/useUpdateUser.cjs');
require('../../../../context/UserFieldEditorContext/UserFieldEditorContext.cjs');
require('@dynamic-labs/rpc-providers');
require('../../../../context/UserWalletsContext/UserWalletsContext.cjs');
require('../../../../components/Alert/Alert.cjs');
require('../../../../components/ShadowDOM/ShadowDOM.cjs');
require('../../../../components/IconButton/IconButton.cjs');
require('../../../../components/InlineWidget/InlineWidget.cjs');
require('../../../../components/IsBrowser/IsBrowser.cjs');
require('../../../../components/MenuList/Dropdown/Dropdown.cjs');
require('../../../../components/Transition/ZoomTransition/ZoomTransition.cjs');
require('../../../../components/Transition/SlideInUpTransition/SlideInUpTransition.cjs');
require('../../../../components/Transition/OpacityTransition/OpacityTransition.cjs');
require('../../../../components/Popper/Popper/Popper.cjs');
require('../../../../components/Popper/PopperContext/PopperContext.cjs');
require('react-focus-lock');
require('qrcode');
require('formik');
require('../../../../locale/locale.cjs');
require('../../../../components/OverlayCard/OverlayCard.context.cjs');
require('../../../../components/PasskeyCreatedSuccessBanner/PasskeyCreatedSuccessBanner.cjs');
require('../../../../context/PasskeyContext/PasskeyContext.cjs');
require('../../../../views/WalletList/WalletList.cjs');
var useCloseMultiWalletPrompt = require('../../hooks/useCloseMultiWalletPrompt/useCloseMultiWalletPrompt.cjs');
require('@hcaptcha/react-hcaptcha');
require('../../../../context/LoadingContext/LoadingContext.cjs');
require('../../../../context/SocialRedirectContext/SocialRedirectContext.cjs');
require('../../../../context/WalletGroupContext/WalletGroupContext.cjs');
require('../../../DynamicBridgeWidget/views/WalletsView/components/SecondaryWallets/SecondaryWallets.cjs');
require('../../../../context/FooterAnimationContext/index.cjs');
require('../../components/DynamicWidgetHeader/DynamicWidgetHeader.cjs');
var PromptModal = require('../../components/PromptModal/PromptModal.cjs');
var WidgetPortal = require('../../components/WidgetPortal/WidgetPortal.cjs');
var NoQrNotInstalledModalView = require('../NoQrNotInstalledModalView/NoQrNotInstalledModalView.cjs');
var PendingConnectionModal = require('../PendingConnectionModal/PendingConnectionModal.cjs');
var PendingSignModal = require('../PendingSignModal/PendingSignModal.cjs');
var QrCodeModalView = require('../QrCodeModalView/QrCodeModalView.cjs');
require('../../context/DynamicWidgetContext.cjs');
require('../../../../components/UserProfile/parts/UserProfileField/components/VerifiedEmailIcon/VerifiedEmailIcon.cjs');
require('@dynamic-labs/viem-utils');
require('../../../../views/TransactionConfirmationView/helpers/transactionErrorMessage.cjs');
require('../../../../utils/hooks/useTransactionWithGasPrice/useTransactionWithGasPrice.cjs');
require('../../views/ManagePasskeysWidgetView/PasskeyCard/PasskeyCard.cjs');
var useInternalDynamicContext = require('../../../../context/DynamicContext/useDynamicContext/useInternalDynamicContext.cjs');

const AwaitingConnectionContent = ({ PendingSign, PendingConnection, }) => {
    var _a, _b;
    const { selectedWalletConnector, showQrcodeModal, selectedWalletWithAction } = useInternalDynamicContext.useInternalDynamicContext();
    const Pending = React.useMemo(() => {
        if (selectedWalletConnector &&
            (walletConnectorCore.isEmailOTPWalletConnector(selectedWalletConnector) ||
                walletConnectorCore.isEmailWalletConnector(selectedWalletConnector))) {
            return PendingSign;
        }
        return PendingConnection;
    }, [selectedWalletConnector]);
    if (showQrcodeModal) {
        if (selectedWalletConnector === null || selectedWalletConnector === void 0 ? void 0 : selectedWalletConnector.canConnectViaQrCode) {
            return (jsxRuntime.jsx(QrCodeModalView.QrCodeModalView, { walletId: (_b = (_a = selectedWalletWithAction === null || selectedWalletWithAction === void 0 ? void 0 : selectedWalletWithAction.wallet) === null || _a === void 0 ? void 0 : _a.id) !== null && _b !== void 0 ? _b : '' }));
        }
        return jsxRuntime.jsx(NoQrNotInstalledModalView.NoQrNotInstalledModalView, {});
    }
    return jsxRuntime.jsx(Pending, {});
};
const AwaitingConnectionWidgetPortal = () => (jsxRuntime.jsx(WidgetPortal.WidgetPortal, { onClose: useCloseMultiWalletPrompt.useCloseMultiWalletPrompt(), children: jsxRuntime.jsx(AwaitingConnectionContent, { PendingSign: PendingSignModal.PendingSignWidgetPortal, PendingConnection: PendingConnectionModal.PendingConnectionWidgetPortal }) }));
const AwaitingConnectionModal = () => (jsxRuntime.jsx(PromptModal.PromptModal, { onClose: useCloseMultiWalletPrompt.useCloseMultiWalletPrompt(), children: jsxRuntime.jsx(AwaitingConnectionContent, { PendingSign: PendingSignModal.PendingSignModal, PendingConnection: PendingConnectionModal.PendingConnectionModal }) }));

exports.AwaitingConnectionModal = AwaitingConnectionModal;
exports.AwaitingConnectionWidgetPortal = AwaitingConnectionWidgetPortal;
