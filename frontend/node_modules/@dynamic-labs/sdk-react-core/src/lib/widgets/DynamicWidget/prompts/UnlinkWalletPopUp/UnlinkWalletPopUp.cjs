'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _tslib = require('../../../../../../_virtual/_tslib.cjs');
var jsxRuntime = require('react/jsx-runtime');
var reactI18next = require('react-i18next');
require('react');
require('../../../../context/DynamicContext/DynamicContext.cjs');
require('@dynamic-labs/sdk-api');
var logger = require('../../../../shared/logger.cjs');
require('@dynamic-labs/iconic');
require('@dynamic-labs/wallet-connector-core');
require('../../../../context/ViewContext/ViewContext.cjs');
require('@dynamic-labs/wallet-book');
require('../../../../utils/constants/colors.cjs');
require('../../../../utils/constants/values.cjs');
require('../../../../shared/utils/classes/storage/localStorage.cjs');
require('viem');
require('@dynamic-labs/utils');
require('../../../../shared/consts/index.cjs');
require('../../../../events/dynamicEvents.cjs');
require('../../../../context/CaptchaContext/CaptchaContext.cjs');
require('../../../../context/ErrorContext/ErrorContext.cjs');
require('@dynamic-labs/multi-wallet');
require('viem/chains');
require('../../../../context/AccessDeniedContext/AccessDeniedContext.cjs');
require('../../../../context/AccountExistsContext/AccountExistsContext.cjs');
require('../../../../config/ApiEndpoint.cjs');
require('../../../../context/EmailVerificationContext/EmailVerificationContext.cjs');
require('react-dom');
require('../../../../context/ThemeContext/ThemeContext.cjs');
require('@dynamic-labs/types');
require('yup');
require('../../../../context/MockContext/MockContext.cjs');
require('../../../../utils/hooks/useUserUpdateRequest/useUpdateUser/useUpdateUser.cjs');
require('../../../../context/UserFieldEditorContext/UserFieldEditorContext.cjs');
require('@dynamic-labs/rpc-providers');
require('../../../../context/UserWalletsContext/UserWalletsContext.cjs');
require('../../../../components/Alert/Alert.cjs');
var Typography = require('../../../../components/Typography/Typography.cjs');
var Button = require('../../../../components/Button/Button.cjs');
require('../../../../components/ShadowDOM/ShadowDOM.cjs');
require('../../../../components/IconButton/IconButton.cjs');
require('../../../../components/InlineWidget/InlineWidget.cjs');
require('../../../../components/IsBrowser/IsBrowser.cjs');
require('../../../../components/MenuList/Dropdown/Dropdown.cjs');
require('../../../../components/Transition/ZoomTransition/ZoomTransition.cjs');
require('../../../../components/Transition/SlideInUpTransition/SlideInUpTransition.cjs');
require('../../../../components/Transition/OpacityTransition/OpacityTransition.cjs');
require('../../../../components/Popper/Popper/Popper.cjs');
require('../../../../components/Popper/PopperContext/PopperContext.cjs');
require('react-focus-lock');
require('qrcode');
require('formik');
require('../../../../locale/locale.cjs');
require('../../../../components/OverlayCard/OverlayCard.context.cjs');
require('../../../../components/PasskeyCreatedSuccessBanner/PasskeyCreatedSuccessBanner.cjs');
require('../../../../context/PasskeyContext/PasskeyContext.cjs');
require('../../../../views/WalletList/WalletList.cjs');
var useCloseMultiWalletPrompt = require('../../hooks/useCloseMultiWalletPrompt/useCloseMultiWalletPrompt.cjs');
require('@hcaptcha/react-hcaptcha');
var LoadingContext = require('../../../../context/LoadingContext/LoadingContext.cjs');
require('../../../../context/SocialRedirectContext/SocialRedirectContext.cjs');
require('../../../../context/WalletGroupContext/WalletGroupContext.cjs');
require('../../../DynamicBridgeWidget/views/WalletsView/components/SecondaryWallets/SecondaryWallets.cjs');
require('../../../../context/FooterAnimationContext/index.cjs');
require('../../components/DynamicWidgetHeader/DynamicWidgetHeader.cjs');
var PromptModal = require('../../components/PromptModal/PromptModal.cjs');
var WidgetPortal = require('../../components/WidgetPortal/WidgetPortal.cjs');
require('../../context/DynamicWidgetContext.cjs');
require('../../../../components/UserProfile/parts/UserProfileField/components/VerifiedEmailIcon/VerifiedEmailIcon.cjs');
require('@dynamic-labs/viem-utils');
require('../../../../views/TransactionConfirmationView/helpers/transactionErrorMessage.cjs');
require('../../../../utils/hooks/useTransactionWithGasPrice/useTransactionWithGasPrice.cjs');
require('../../views/ManagePasskeysWidgetView/PasskeyCard/PasskeyCard.cjs');
var useInternalDynamicContext = require('../../../../context/DynamicContext/useDynamicContext/useInternalDynamicContext.cjs');

const UnlinkWalletPopUpContent = ({ onClickCancel, }) => {
    var _a;
    const { handleUnlinkWallet, setSelectedWalletWithAction, authMode, selectedWalletWithAction, } = useInternalDynamicContext.useInternalDynamicContext();
    const { t } = reactI18next.useTranslation();
    const { loading, setLoading } = LoadingContext.useLoadingContext();
    const walletId = (_a = selectedWalletWithAction === null || selectedWalletWithAction === void 0 ? void 0 : selectedWalletWithAction.wallet) === null || _a === void 0 ? void 0 : _a.id;
    if (!walletId) {
        throw new Error('Wallet id is not defined');
    }
    const onConfirmClick = () => _tslib.__awaiter(void 0, void 0, void 0, function* () {
        try {
            setLoading(true);
            yield handleUnlinkWallet(walletId);
            setSelectedWalletWithAction(null);
        }
        catch (error) {
            logger.logger.error(error);
        }
        finally {
            setLoading(false);
        }
    });
    return (jsxRuntime.jsxs("div", { className: 'unlink-wallet-popup__container', children: [jsxRuntime.jsx(Typography.Typography, { color: 'primary', className: 'unlink-wallet-popup__title', variant: 'body_normal', as: 'h6', children: authMode === 'connect-only'
                    ? t('dyn_unlink_wallet_pop_up.disconnect_title')
                    : t('dyn_unlink_wallet_pop_up.unlink_title') }), jsxRuntime.jsx(Typography.Typography, { className: 'unlink-wallet-popup__label', variant: 'body_small', color: 'secondary', children: authMode === 'connect-only'
                    ? t('dyn_unlink_wallet_pop_up.disconnect_description')
                    : t('dyn_unlink_wallet_pop_up.unlink_description') }), jsxRuntime.jsx(Button.Button, { buttonPadding: 'small', onClick: onConfirmClick, disabled: loading, buttonClassName: 'unlink-wallet-popup__button unlink-wallet-popup__button--shadow', color: 'primary', expanded: true, typographyProps: {
                    variant: 'button_secondary',
                    weight: 'medium',
                }, dataTestId: 'unlink-wallet-popup-yes-button', children: authMode === 'connect-only'
                    ? t('dyn_unlink_wallet_pop_up.disconnect_button')
                    : t('dyn_unlink_wallet_pop_up.unlink_button') }), jsxRuntime.jsx(Button.Button, { expanded: true, buttonPadding: 'small', onClick: onClickCancel, buttonVariant: 'secondary', buttonClassName: 'unlink-wallet-popup__button', typographyProps: {
                    variant: 'button_secondary',
                    weight: 'medium',
                }, children: t('dyn_unlink_wallet_pop_up.cancel_button') })] }));
};
const UnlinkWalletPopUpModal = () => (jsxRuntime.jsx(PromptModal.PromptModal, { onClose: useCloseMultiWalletPrompt.useCloseMultiWalletPrompt(), children: jsxRuntime.jsx(UnlinkWalletPopUpContent, { onClickCancel: useCloseMultiWalletPrompt.useCloseMultiWalletPrompt() }) }));
const UnlinkWalletPopUpWidgetPortal = () => (jsxRuntime.jsx(WidgetPortal.WidgetPortal, { onClose: useCloseMultiWalletPrompt.useCloseMultiWalletPrompt(), children: jsxRuntime.jsx(UnlinkWalletPopUpContent, { onClickCancel: useCloseMultiWalletPrompt.useCloseMultiWalletPrompt() }) }));

exports.UnlinkWalletPopUpModal = UnlinkWalletPopUpModal;
exports.UnlinkWalletPopUpWidgetPortal = UnlinkWalletPopUpWidgetPortal;
