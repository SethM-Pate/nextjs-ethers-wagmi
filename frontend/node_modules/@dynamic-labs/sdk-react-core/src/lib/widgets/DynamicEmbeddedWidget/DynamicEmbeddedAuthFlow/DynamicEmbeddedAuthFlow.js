import { jsx } from 'react/jsx-runtime';
import { useEffect } from 'react';
import { dynamicEvents } from '../../../events/dynamicEvents.js';
import '../../../../../_virtual/_tslib.js';
import '@dynamic-labs/utils';
import '../../../context/DynamicContext/DynamicContext.js';
import '@dynamic-labs/sdk-api';
import '../../../shared/logger.js';
import '@dynamic-labs/iconic';
import '@dynamic-labs/wallet-connector-core';
import { useViewContext } from '../../../context/ViewContext/ViewContext.js';
import '@dynamic-labs/wallet-book';
import '../../../utils/constants/colors.js';
import '../../../utils/constants/values.js';
import '../../../shared/utils/classes/storage/localStorage.js';
import 'viem';
import '../../../shared/consts/index.js';
import { useInternalDynamicContext } from '../../../context/DynamicContext/useDynamicContext/useInternalDynamicContext.js';
import '../../../context/CaptchaContext/CaptchaContext.js';
import '../../../context/ErrorContext/ErrorContext.js';
import '@dynamic-labs/multi-wallet';
import 'viem/chains';
import '../../../context/AccessDeniedContext/AccessDeniedContext.js';
import '../../../context/AccountExistsContext/AccountExistsContext.js';
import '../../../config/ApiEndpoint.js';
import '../../../context/EmailVerificationContext/EmailVerificationContext.js';
import 'react-dom';
import '../../../context/ThemeContext/ThemeContext.js';
import { useIsLoggedIn } from '../../../utils/hooks/useIsLoggedIn/useIsLoggedIn.js';
import '@dynamic-labs/types';
import 'yup';
import 'react-i18next';
import '../../../context/MockContext/MockContext.js';
import '../../../utils/hooks/useUserUpdateRequest/useUpdateUser/useUpdateUser.js';
import '../../../context/UserFieldEditorContext/UserFieldEditorContext.js';
import '@dynamic-labs/rpc-providers';
import '../../../context/UserWalletsContext/UserWalletsContext.js';
import { DynamicAuthLayout } from '../../../layout/DynamicAuthLayout/DynamicAuthLayout.js';
import '../../../components/Transition/ZoomTransition/ZoomTransition.js';
import '../../../components/Transition/SlideInUpTransition/SlideInUpTransition.js';
import '../../../components/Transition/OpacityTransition/OpacityTransition.js';
import { ShadowDOM } from '../../../components/ShadowDOM/ShadowDOM.js';
import '../../../components/OverlayCard/OverlayCard.context.js';
import '../../DynamicWidget/components/DynamicWidgetHeader/DynamicWidgetHeader.js';
import { ModalCard } from '../../../components/ModalCard/ModalCard.js';
import 'react-focus-lock';
import '../../../context/LoadingContext/LoadingContext.js';
import '../../../locale/locale.js';
import '../../DynamicWidget/context/DynamicWidgetContext.js';
import '../../../components/UserProfile/parts/UserProfileField/components/VerifiedEmailIcon/VerifiedEmailIcon.js';
import 'formik';
import '../../../components/IconButton/IconButton.js';
import '../../../components/Alert/Alert.js';
import '../../../components/PasskeyCreatedSuccessBanner/PasskeyCreatedSuccessBanner.js';
import '../../../context/PasskeyContext/PasskeyContext.js';
import '@dynamic-labs/viem-utils';
import '../../../views/TransactionConfirmationView/helpers/transactionErrorMessage.js';
import '../../../utils/hooks/useTransactionWithGasPrice/useTransactionWithGasPrice.js';
import '../../DynamicWidget/views/ManagePasskeysWidgetView/PasskeyCard/PasskeyCard.js';
import { FooterAnimationContextProvider } from '../../../context/FooterAnimationContext/index.js';
import '../../../components/InlineWidget/InlineWidget.js';
import '../../../components/IsBrowser/IsBrowser.js';
import '../../../components/MenuList/Dropdown/Dropdown.js';
import '../../../components/Popper/Popper/Popper.js';
import { PopperProvider } from '../../../components/Popper/PopperContext/PopperContext.js';
import 'qrcode';
import { RenderView } from '../../../components/RenderView/RenderView.js';
import { SandboxIndicatorWrapper } from '../../../components/SandboxIndicatorWrapper/SandboxIndicatorWrapper.js';
import { SocialRedirectContextProvider } from '../../../context/SocialRedirectContext/SocialRedirectContext.js';

const DynamicEmbeddedAuthFlow = ({ background = 'none', className, style, }) => {
    const hide = useIsLoggedIn();
    const { projectSettings, isRenderingEmbeddedAuthFlow, walletConnectorOptions, } = useInternalDynamicContext();
    // This is needed to make sure WalletConnect is initialized for users who are using
    // universal links on mobile. This also happens in useShowAuthFlow, but since this
    // is the embedded auth flow, that hook does not get called.
    // Without initializing WalletConnect here, users end up hitting the iOS app store bug
    // and are redirected to the app store, instead of the wallet
    useEffect(() => {
        var _a;
        (_a = walletConnectorOptions
            .find((wallet) => wallet.walletConnector.key === 'walletconnect')) === null || _a === void 0 ? void 0 : _a.walletConnector.init();
    }, [walletConnectorOptions]);
    const { goToInitialView: resetAuthView } = useViewContext();
    // Reset view when user logs out
    useEffect(() => {
        dynamicEvents.addListener('logout', resetAuthView);
        return () => {
            dynamicEvents.removeListener('logout', resetAuthView);
        };
    }, [resetAuthView]);
    // Keep isRenderingEmbeddedAuthFlow up to date
    useEffect(() => {
        isRenderingEmbeddedAuthFlow.current = !hide;
        return () => {
            isRenderingEmbeddedAuthFlow.current = false;
        };
    }, [hide, isRenderingEmbeddedAuthFlow]);
    if (hide)
        return null;
    const content = (jsx(DynamicAuthLayout, { className: className, style: style, projectSettings: projectSettings, children: jsx(RenderView, {}) }));
    return (jsx(ShadowDOM, { className: 'embedded-widget', children: jsx(PopperProvider, { children: jsx(SocialRedirectContextProvider, { children: jsx(FooterAnimationContextProvider, { children: jsx(SandboxIndicatorWrapper, { children: background === 'none' ? (content) : (jsx(ModalCard, { border: background === 'with-border', sharpBottomRadiusOnMobile: false, children: content })) }) }) }) }) }));
};

export { DynamicEmbeddedAuthFlow };
