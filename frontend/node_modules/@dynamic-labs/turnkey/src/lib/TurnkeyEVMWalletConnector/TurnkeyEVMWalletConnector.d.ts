import { LocalAccount, PublicClient, Transport, Chain as ViemChain, Account, WalletClient } from 'viem';
import { TurnkeyClient } from '@turnkey/http';
import { JwtVerifiedCredential } from '@dynamic-labs/sdk-api';
import { WalletBookSchema } from '@dynamic-labs/wallet-book';
import type { Chain } from '@dynamic-labs/wallet-connector-core';
import { EvmNetwork, GenericNetwork, WalletUiUtils } from '@dynamic-labs/types';
import { ChainRpcProviders } from '@dynamic-labs/rpc-providers';
import { TurnkeyWalletConnectorNameAndKey } from '../../types';
import { TurnkeyWalletConnectorBase } from '../TurnkeyWalletConnectorBase';
export type TurnkeyEVMConnectorProps = {
    walletUiUtils: WalletUiUtils;
    walletBook: WalletBookSchema;
    evmNetworks: GenericNetwork[];
    appName?: string;
    chainRpcProviders: typeof ChainRpcProviders;
};
export declare class TurnkeyEVMWalletConnector extends TurnkeyWalletConnectorBase {
    connectedChain: Chain;
    supportedChains: Chain[];
    evmNetworks: EvmNetwork[];
    verifiedCredentialChain: string;
    private walletUiUtils;
    private _turnkeyAccount;
    static lastUsedChainIdStorageKey: string;
    private _selectedChainId;
    private __turnkeyClient;
    constructor(nameAndKey: TurnkeyWalletConnectorNameAndKey, props: TurnkeyEVMConnectorProps);
    private getLastUsedChainId;
    getNetwork(): Promise<number | undefined>;
    supportsNetworkSwitching(): boolean;
    switchNetwork({ networkChainId, }: {
        networkChainId: number;
    }): Promise<void>;
    setVerifiedCredentials(verifiedCredentials: JwtVerifiedCredential[]): void;
    getRpcUrl(): string | undefined;
    getBalance(): Promise<string | undefined>;
    signMessage(messageToSign: string): Promise<string | undefined>;
    getPublicClient(): Promise<void | PublicClient | undefined>;
    getSigner(): Promise<WalletClient<Transport, ViemChain, Account> | undefined>;
    getTurnkeyClient(): TurnkeyClient;
    getAccount(): Promise<LocalAccount>;
    getWalletClient(): WalletClient<Transport, ViemChain, Account> | undefined;
    private refreshTurnkeyAccount;
    private get currentChainId();
    private get networkRpcUrl();
    private get currentEvmNetwork();
    private getTurnkeyAccount;
    get lastUsedChainId(): number | undefined;
    set lastUsedChainId(chainId: number | undefined);
}
