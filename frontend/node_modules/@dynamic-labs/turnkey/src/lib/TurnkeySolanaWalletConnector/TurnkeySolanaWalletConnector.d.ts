/// <reference types="node" />
import { Commitment, Connection, ConnectionConfig, Transaction } from '@solana/web3.js';
import { TurnkeySigner } from '@turnkey/solana';
import { GenericNetwork, WalletUiUtils } from '@dynamic-labs/types';
import { Chain } from '@dynamic-labs/wallet-connector-core';
import { WalletBookSchema } from '@dynamic-labs/wallet-book';
import { JwtVerifiedCredential } from '@dynamic-labs/sdk-api';
import { ChainRpcProviders } from '@dynamic-labs/rpc-providers';
import { TurnkeyWalletConnectorBase } from '../TurnkeyWalletConnectorBase';
import { TurnkeyWalletConnectorNameAndKey } from '../../types';
export type TurnkeySolanaConnectorProps = {
    walletUiUtils: WalletUiUtils;
    walletBook: WalletBookSchema;
    solNetworks: GenericNetwork[];
    appName?: string;
    chainRpcProviders: typeof ChainRpcProviders;
};
export declare class TurnkeySolanaWalletConnector extends TurnkeyWalletConnectorBase {
    connectedChain: Chain;
    supportedChains: Chain[];
    solNetworks: GenericNetwork[];
    verifiedCredentialChain: string;
    private walletUiUtils;
    private _turnkeyAccount;
    private _connectionClient;
    private __turnkeyClient;
    constructor(nameAndKey: TurnkeyWalletConnectorNameAndKey, props: TurnkeySolanaConnectorProps);
    getRpcUrl(): string;
    getConnection(commitmentOrConfig?: Commitment | ConnectionConfig): Connection;
    getWalletClient(): Connection;
    getNetwork(): Promise<string>;
    getPublicClient(): Promise<Connection | undefined>;
    supportsNetworkSwitching(): boolean;
    setVerifiedCredentials(verifiedCredentials: JwtVerifiedCredential[]): void;
    getAccount(): string | undefined;
    private refreshTurnkeyAccount;
    private getTurnkeyClient;
    private createTurnkeyAccount;
    private getTurnkeyAccount;
    getSigner(): Promise<TurnkeySigner | undefined>;
    getBalance(): Promise<string | undefined>;
    signMessage(messageToSign: string): Promise<string | undefined>;
    signTransaction({ transaction, }: {
        transaction: Transaction;
    }): Promise<Buffer>;
    signAndSendTransaction({ transaction, }: {
        transaction: Transaction;
    }): Promise<string>;
    private lamportsToSol;
}
