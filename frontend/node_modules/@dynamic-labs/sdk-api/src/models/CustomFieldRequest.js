import { exists } from '../runtime.js';
import { CustomFieldTypeFromJSON, CustomFieldTypeToJSON } from './CustomFieldType.js';
import { CustomFieldValidationRulesFromJSON, CustomFieldValidationRulesToJSON } from './CustomFieldValidationRules.js';

/* tslint:disable */
function CustomFieldRequestFromJSON(json) {
    return CustomFieldRequestFromJSONTyped(json);
}
function CustomFieldRequestFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'name': json['name'],
        'enabled': json['enabled'],
        'required': json['required'],
        'fieldType': CustomFieldTypeFromJSON(json['fieldType']),
        'validationRules': !exists(json, 'validationRules') ? undefined : CustomFieldValidationRulesFromJSON(json['validationRules']),
    };
}
function CustomFieldRequestToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'name': value.name,
        'enabled': value.enabled,
        'required': value.required,
        'fieldType': CustomFieldTypeToJSON(value.fieldType),
        'validationRules': CustomFieldValidationRulesToJSON(value.validationRules),
    };
}

export { CustomFieldRequestFromJSON, CustomFieldRequestFromJSONTyped, CustomFieldRequestToJSON };
