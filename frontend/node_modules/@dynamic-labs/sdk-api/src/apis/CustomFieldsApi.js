import { __awaiter } from '../../_virtual/_tslib.js';
import { BaseAPI, RequiredError, JSONApiResponse, VoidApiResponse } from '../runtime.js';
import '../models/AccessOutcomeEnum.js';
import '../models/AuthModeEnum.js';
import '../models/AuthenticatorTransportProtocol.js';
import '../models/JwtVerifiedCredentialFormatEnum.js';
import '../models/ProviderEnum.js';
import '../models/WalletAddressType.js';
import '../models/HardwareWalletEnum.js';
import '../models/PasswordSourceTypeEnum.js';
import '../models/WalletProviderEnum.js';
import '../models/BillingSubscriptionPlanTypeEnum.js';
import '../models/ChainEnum.js';
import '../models/ChainalysisCheckResultEnum.js';
import '../models/EmbeddedWalletProviderEnum.js';
import '../models/UserIdentifierTypeEnum.js';
import '../models/CurrencyType.js';
import { CustomFieldFromJSON } from '../models/CustomField.js';
import { CustomFieldRequestToJSON } from '../models/CustomFieldRequest.js';
import '../models/CustomFieldType.js';
import '../models/TimeUnitEnum.js';
import '../models/EmbeddedWalletAuthType.js';
import '../models/EmbeddedWalletSecurityMethod.js';
import '../models/EnvironmentEnum.js';
import '../models/SignInProviderEnum.js';
import '../models/SocialSignInProviderEnum.js';
import '../models/SdkViewSectionAlignment.js';
import '../models/SdkViewSectionType.js';
import '../models/SdkViewType.js';
import '../models/UserFilterableFieldsEnum.js';
import '../models/ExportFormatEnum.js';
import '../models/ExportModelEnum.js';
import '../models/ExportStatusEnum.js';
import '../models/GateRuleType.js';
import '../models/HealthcheckStatus.js';
import '../models/InviteStatusEnum.js';
import '../models/NextViewEnum.js';
import '../models/OauthResultStatus.js';
import '../models/WhenToImplementEnum.js';
import '../models/PublishEventsEvents.js';
import '../models/RoleEnum.js';
import '../models/SubscriptionAdvancedScopeEnum.js';
import '../models/SubscriptionFreeScopeEnum.js';
import '../models/UnprocessableEntityErrorCode.js';
import '../models/VisitorFilterableFieldsEnum.js';

/* tslint:disable */
/**
 *
 */
class CustomFieldsApi extends BaseAPI {
    /**
     * Create a new custom field for an environment
     */
    createCustomFieldForEnvironmentRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.environmentId === null || requestParameters.environmentId === undefined) {
                throw new RequiredError('environmentId', 'Required parameter requestParameters.environmentId was null or undefined when calling createCustomFieldForEnvironment.');
            }
            if (requestParameters.customFieldRequest === null || requestParameters.customFieldRequest === undefined) {
                throw new RequiredError('customFieldRequest', 'Required parameter requestParameters.customFieldRequest was null or undefined when calling createCustomFieldForEnvironment.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("bearerAuth", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/environments/{environmentId}/custom/fields`.replace(`{${"environmentId"}}`, encodeURIComponent(String(requestParameters.environmentId))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: CustomFieldRequestToJSON(requestParameters.customFieldRequest),
            }, initOverrides);
            return new JSONApiResponse(response, (jsonValue) => CustomFieldFromJSON(jsonValue));
        });
    }
    /**
     * Create a new custom field for an environment
     */
    createCustomFieldForEnvironment(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.createCustomFieldForEnvironmentRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Delete a specific custom field by its ID
     */
    deleteCustomFieldByIdRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.customFieldId === null || requestParameters.customFieldId === undefined) {
                throw new RequiredError('customFieldId', 'Required parameter requestParameters.customFieldId was null or undefined when calling deleteCustomFieldById.');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("bearerAuth", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/custom/fields/{customFieldId}`.replace(`{${"customFieldId"}}`, encodeURIComponent(String(requestParameters.customFieldId))),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new VoidApiResponse(response);
        });
    }
    /**
     * Delete a specific custom field by its ID
     */
    deleteCustomFieldById(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.deleteCustomFieldByIdRaw(requestParameters, initOverrides);
        });
    }
    /**
     * Retrieve a specific custom field by its ID
     */
    getCustomFieldByIdRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.customFieldId === null || requestParameters.customFieldId === undefined) {
                throw new RequiredError('customFieldId', 'Required parameter requestParameters.customFieldId was null or undefined when calling getCustomFieldById.');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("bearerAuth", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/custom/fields/{customFieldId}`.replace(`{${"customFieldId"}}`, encodeURIComponent(String(requestParameters.customFieldId))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new JSONApiResponse(response, (jsonValue) => CustomFieldFromJSON(jsonValue));
        });
    }
    /**
     * Retrieve a specific custom field by its ID
     */
    getCustomFieldById(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getCustomFieldByIdRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Get the custom fields for an environment
     */
    getCustomFieldsForEnvironmentRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.environmentId === null || requestParameters.environmentId === undefined) {
                throw new RequiredError('environmentId', 'Required parameter requestParameters.environmentId was null or undefined when calling getCustomFieldsForEnvironment.');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("bearerAuth", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/environments/{environmentId}/custom/fields`.replace(`{${"environmentId"}}`, encodeURIComponent(String(requestParameters.environmentId))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new JSONApiResponse(response, (jsonValue) => jsonValue.map(CustomFieldFromJSON));
        });
    }
    /**
     * Get the custom fields for an environment
     */
    getCustomFieldsForEnvironment(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getCustomFieldsForEnvironmentRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Update an existing custom field by its ID
     */
    updateCustomFieldByIdRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.customFieldId === null || requestParameters.customFieldId === undefined) {
                throw new RequiredError('customFieldId', 'Required parameter requestParameters.customFieldId was null or undefined when calling updateCustomFieldById.');
            }
            if (requestParameters.customFieldRequest === null || requestParameters.customFieldRequest === undefined) {
                throw new RequiredError('customFieldRequest', 'Required parameter requestParameters.customFieldRequest was null or undefined when calling updateCustomFieldById.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("bearerAuth", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/custom/fields/{customFieldId}`.replace(`{${"customFieldId"}}`, encodeURIComponent(String(requestParameters.customFieldId))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: CustomFieldRequestToJSON(requestParameters.customFieldRequest),
            }, initOverrides);
            return new JSONApiResponse(response, (jsonValue) => CustomFieldFromJSON(jsonValue));
        });
    }
    /**
     * Update an existing custom field by its ID
     */
    updateCustomFieldById(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.updateCustomFieldByIdRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
}

export { CustomFieldsApi };
