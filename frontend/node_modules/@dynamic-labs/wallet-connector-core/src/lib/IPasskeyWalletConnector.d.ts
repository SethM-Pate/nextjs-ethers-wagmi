import { WalletConnectorBase } from './WalletConnector';
export interface Attestation {
    attestationObject: string;
    clientDataJson: string;
    credentialId: string;
    transports: unknown[];
}
export interface WebAuthnAttestation {
    attestation: Attestation;
    challenge: string;
}
export type RecoveryWebAuthnAttestation = WebAuthnAttestation & {
    organizationId: string;
};
export type AuthenticatorType = 'passkey' | 'email';
export interface IPasskeyWalletConnector extends WalletConnectorBase {
    getWebAuthnAttestation(): Promise<WebAuthnAttestation>;
    getAuthenticatorHandler: () => AuthenticatorRecoveryHandler;
    getExportHandler: () => ExportHandler;
}
export interface AuthenticatorRecoveryHandler {
    initRecovery: (authType: AuthenticatorType, iframeContainer: HTMLElement, iframeElementId: string, sessionExpiration?: number) => Promise<string | null>;
    verifyRecoveryCode: (recoveryBundle: string, organizationId?: string) => Promise<unknown>;
    completeRecovery: (recoveryParams: RecoveryWebAuthnAttestation) => Promise<unknown>;
    addPasskeyAuthenticator: (passkeyAuthenticatorParams: RecoveryWebAuthnAttestation) => Promise<unknown>;
    clear: () => void;
    isSessionActive: () => boolean;
    get publicKey(): string | undefined | null;
    get recoveryType(): AuthenticatorType | undefined | null;
    set recoveryUserId(recoveryUserId: string);
}
export interface ExportHandler {
    verifyExportWallet: (exportBundle: string) => Promise<unknown>;
    verifyExportPrivateKey: (exportBundle: string) => Promise<unknown>;
    initExport: (iframeContainer: HTMLElement, iframeElementId: string) => Promise<string | null>;
    exportWallet: (exportParams: {
        address?: string;
        walletId: string;
        organizationId: string;
    }) => Promise<unknown>;
    exportPrivateKey: (exportParams: {
        privateKeyId: string;
        organizationId: string;
    }) => Promise<unknown>;
    clear: () => void;
    get publicKey(): string | undefined | null;
}
